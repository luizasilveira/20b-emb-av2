
RTOS-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006980  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406980  00406980  00016980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  00406988  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000032c  204009b8  00407340  000209b8  2**2
                  ALLOC
  4 .stack        00002004  20400ce4  0040766c  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402ce8  00409670  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   00021c52  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000446a  00000000  00000000  00042691  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009f72  00000000  00000000  00046afb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f90  00000000  00000000  00050a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001260  00000000  00000000  000519fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00023be3  00000000  00000000  00052c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00011d9c  00000000  00000000  00076840  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009dabe  00000000  00000000  000885dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003250  00000000  00000000  0012609c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 2c 40 20 d1 0b 40 00 cf 0b 40 00 cf 0b 40 00     .,@ ..@...@...@.
  400010:	cf 0b 40 00 cf 0b 40 00 cf 0b 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	c1 0f 40 00 cf 0b 40 00 00 00 00 00 61 10 40 00     ..@...@.....a.@.
  40003c:	c5 10 40 00 cf 0b 40 00 cf 0b 40 00 cf 0b 40 00     ..@...@...@...@.
  40004c:	cf 0b 40 00 cf 0b 40 00 cf 0b 40 00 cf 0b 40 00     ..@...@...@...@.
  40005c:	cf 0b 40 00 cf 0b 40 00 00 00 00 00 ed 08 40 00     ..@...@.......@.
  40006c:	01 09 40 00 15 09 40 00 cf 0b 40 00 cf 0b 40 00     ..@...@...@...@.
  40007c:	cf 0b 40 00 29 09 40 00 3d 09 40 00 cf 0b 40 00     ..@.).@.=.@...@.
  40008c:	cf 0b 40 00 cf 0b 40 00 cf 0b 40 00 cf 0b 40 00     ..@...@...@...@.
  40009c:	cf 0b 40 00 cf 0b 40 00 cf 0b 40 00 cf 0b 40 00     ..@...@...@...@.
  4000ac:	cf 0b 40 00 cf 0b 40 00 d9 06 40 00 cf 0b 40 00     ..@...@...@...@.
  4000bc:	cf 0b 40 00 cf 0b 40 00 cf 0b 40 00 cf 0b 40 00     ..@...@...@...@.
  4000cc:	cf 0b 40 00 cf 0b 40 00 cf 0b 40 00 cf 0b 40 00     ..@...@...@...@.
  4000dc:	cf 0b 40 00 ed 06 40 00 cf 0b 40 00 cf 0b 40 00     ..@...@...@...@.
  4000ec:	cf 0b 40 00 cf 0b 40 00 cf 0b 40 00 cf 0b 40 00     ..@...@...@...@.
  4000fc:	cf 0b 40 00 cf 0b 40 00 cf 0b 40 00 cf 0b 40 00     ..@...@...@...@.
  40010c:	cf 0b 40 00 cf 0b 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 cf 0b 40 00 cf 0b 40 00 cf 0b 40 00     ......@...@...@.
  40012c:	cf 0b 40 00 cf 0b 40 00 cf 0b 40 00 cf 0b 40 00     ..@...@...@...@.
  40013c:	cf 0b 40 00 cf 0b 40 00 cf 0b 40 00 cf 0b 40 00     ..@...@...@...@.
  40014c:	cf 0b 40 00 cf 0b 40 00 cf 0b 40 00 cf 0b 40 00     ..@...@...@...@.
  40015c:	cf 0b 40 00 cf 0b 40 00 cf 0b 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009b8 	.word	0x204009b8
  400184:	00000000 	.word	0x00000000
  400188:	00406988 	.word	0x00406988

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00406988 	.word	0x00406988
  4001c8:	204009bc 	.word	0x204009bc
  4001cc:	00406988 	.word	0x00406988
  4001d0:	00000000 	.word	0x00000000

004001d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4001d6:	4810      	ldr	r0, [pc, #64]	; (400218 <sysclk_init+0x44>)
  4001d8:	4b10      	ldr	r3, [pc, #64]	; (40021c <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001dc:	213e      	movs	r1, #62	; 0x3e
  4001de:	2000      	movs	r0, #0
  4001e0:	4b0f      	ldr	r3, [pc, #60]	; (400220 <sysclk_init+0x4c>)
  4001e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001e4:	4c0f      	ldr	r4, [pc, #60]	; (400224 <sysclk_init+0x50>)
  4001e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d0fc      	beq.n	4001e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <sysclk_init+0x54>)
  4001ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <sysclk_init+0x58>)
  4001f2:	4b0f      	ldr	r3, [pc, #60]	; (400230 <sysclk_init+0x5c>)
  4001f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001f6:	4c0f      	ldr	r4, [pc, #60]	; (400234 <sysclk_init+0x60>)
  4001f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d0fc      	beq.n	4001f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001fe:	2002      	movs	r0, #2
  400200:	4b0d      	ldr	r3, [pc, #52]	; (400238 <sysclk_init+0x64>)
  400202:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400204:	2000      	movs	r0, #0
  400206:	4b0d      	ldr	r3, [pc, #52]	; (40023c <sysclk_init+0x68>)
  400208:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40020a:	4b0d      	ldr	r3, [pc, #52]	; (400240 <sysclk_init+0x6c>)
  40020c:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  40020e:	4802      	ldr	r0, [pc, #8]	; (400218 <sysclk_init+0x44>)
  400210:	4b02      	ldr	r3, [pc, #8]	; (40021c <sysclk_init+0x48>)
  400212:	4798      	blx	r3
  400214:	bd10      	pop	{r4, pc}
  400216:	bf00      	nop
  400218:	08f0d180 	.word	0x08f0d180
  40021c:	00400da5 	.word	0x00400da5
  400220:	004009ed 	.word	0x004009ed
  400224:	00400a41 	.word	0x00400a41
  400228:	00400a51 	.word	0x00400a51
  40022c:	20183f01 	.word	0x20183f01
  400230:	400e0600 	.word	0x400e0600
  400234:	00400a61 	.word	0x00400a61
  400238:	00400951 	.word	0x00400951
  40023c:	00400989 	.word	0x00400989
  400240:	00400c99 	.word	0x00400c99

00400244 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400248:	b980      	cbnz	r0, 40026c <_read+0x28>
  40024a:	460c      	mov	r4, r1
  40024c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40024e:	2a00      	cmp	r2, #0
  400250:	dd0f      	ble.n	400272 <_read+0x2e>
  400252:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400254:	4e08      	ldr	r6, [pc, #32]	; (400278 <_read+0x34>)
  400256:	4d09      	ldr	r5, [pc, #36]	; (40027c <_read+0x38>)
  400258:	6830      	ldr	r0, [r6, #0]
  40025a:	4621      	mov	r1, r4
  40025c:	682b      	ldr	r3, [r5, #0]
  40025e:	4798      	blx	r3
		ptr++;
  400260:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400262:	42bc      	cmp	r4, r7
  400264:	d1f8      	bne.n	400258 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400266:	4640      	mov	r0, r8
  400268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40026c:	f04f 38ff 	mov.w	r8, #4294967295
  400270:	e7f9      	b.n	400266 <_read+0x22>
	for (; len > 0; --len) {
  400272:	4680      	mov	r8, r0
  400274:	e7f7      	b.n	400266 <_read+0x22>
  400276:	bf00      	nop
  400278:	20400be4 	.word	0x20400be4
  40027c:	20400bdc 	.word	0x20400bdc

00400280 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400280:	3801      	subs	r0, #1
  400282:	2802      	cmp	r0, #2
  400284:	d815      	bhi.n	4002b2 <_write+0x32>
{
  400286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40028a:	460e      	mov	r6, r1
  40028c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40028e:	b19a      	cbz	r2, 4002b8 <_write+0x38>
  400290:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400292:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002cc <_write+0x4c>
  400296:	4f0c      	ldr	r7, [pc, #48]	; (4002c8 <_write+0x48>)
  400298:	f8d8 0000 	ldr.w	r0, [r8]
  40029c:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002a0:	683b      	ldr	r3, [r7, #0]
  4002a2:	4798      	blx	r3
  4002a4:	2800      	cmp	r0, #0
  4002a6:	db0a      	blt.n	4002be <_write+0x3e>
  4002a8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002aa:	3c01      	subs	r4, #1
  4002ac:	d1f4      	bne.n	400298 <_write+0x18>
  4002ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002b2:	f04f 30ff 	mov.w	r0, #4294967295
  4002b6:	4770      	bx	lr
	for (; len != 0; --len) {
  4002b8:	4610      	mov	r0, r2
  4002ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4002be:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002c6:	bf00      	nop
  4002c8:	20400be0 	.word	0x20400be0
  4002cc:	20400be4 	.word	0x20400be4

004002d0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002d6:	4b5b      	ldr	r3, [pc, #364]	; (400444 <board_init+0x174>)
  4002d8:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4002da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002de:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  4002e2:	4b59      	ldr	r3, [pc, #356]	; (400448 <board_init+0x178>)
  4002e4:	2100      	movs	r1, #0
  4002e6:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  4002ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002ee:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  4002f2:	695a      	ldr	r2, [r3, #20]
  4002f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002f8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  4002fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002fe:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  400302:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400306:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  40030a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  40030e:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400312:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  400316:	016e      	lsls	r6, r5, #5
  400318:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40031c:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  400320:	461c      	mov	r4, r3
  400322:	ea06 000e 	and.w	r0, r6, lr
  400326:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400328:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40032a:	ea40 0102 	orr.w	r1, r0, r2
  40032e:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  400332:	3b01      	subs	r3, #1
  400334:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  400338:	f1b3 3fff 	cmp.w	r3, #4294967295
  40033c:	d1f5      	bne.n	40032a <board_init+0x5a>
    } while(sets-- != 0U);
  40033e:	3d01      	subs	r5, #1
  400340:	3e20      	subs	r6, #32
  400342:	f1b5 3fff 	cmp.w	r5, #4294967295
  400346:	d1ec      	bne.n	400322 <board_init+0x52>
  400348:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  40034c:	4b3e      	ldr	r3, [pc, #248]	; (400448 <board_init+0x178>)
  40034e:	695a      	ldr	r2, [r3, #20]
  400350:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400354:	615a      	str	r2, [r3, #20]
  400356:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40035a:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40035e:	4a3b      	ldr	r2, [pc, #236]	; (40044c <board_init+0x17c>)
  400360:	493b      	ldr	r1, [pc, #236]	; (400450 <board_init+0x180>)
  400362:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400364:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400368:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  40036a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40036e:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400372:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400376:	f022 0201 	bic.w	r2, r2, #1
  40037a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40037e:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400382:	f022 0201 	bic.w	r2, r2, #1
  400386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  40038a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40038e:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400392:	200a      	movs	r0, #10
  400394:	4c2f      	ldr	r4, [pc, #188]	; (400454 <board_init+0x184>)
  400396:	47a0      	blx	r4
  400398:	200b      	movs	r0, #11
  40039a:	47a0      	blx	r4
  40039c:	200c      	movs	r0, #12
  40039e:	47a0      	blx	r4
  4003a0:	2010      	movs	r0, #16
  4003a2:	47a0      	blx	r4
  4003a4:	2011      	movs	r0, #17
  4003a6:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003a8:	4b2b      	ldr	r3, [pc, #172]	; (400458 <board_init+0x188>)
  4003aa:	f44f 7280 	mov.w	r2, #256	; 0x100
  4003ae:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003b4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003b6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4003ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4003be:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003c4:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003ca:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003cc:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003d4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003d8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003da:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003dc:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003e0:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003e6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003f2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003f8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003fa:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400400:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400402:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400406:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400408:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40040a:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40040e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400410:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400412:	4a12      	ldr	r2, [pc, #72]	; (40045c <board_init+0x18c>)
  400414:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400418:	f043 0310 	orr.w	r3, r3, #16
  40041c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400420:	4b0f      	ldr	r3, [pc, #60]	; (400460 <board_init+0x190>)
  400422:	2210      	movs	r2, #16
  400424:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40042a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40042c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40042e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400432:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400434:	4311      	orrs	r1, r2
  400436:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400438:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40043a:	4311      	orrs	r1, r2
  40043c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40043e:	605a      	str	r2, [r3, #4]
  400440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400442:	bf00      	nop
  400444:	400e1850 	.word	0x400e1850
  400448:	e000ed00 	.word	0xe000ed00
  40044c:	400e0c00 	.word	0x400e0c00
  400450:	5a00080c 	.word	0x5a00080c
  400454:	00400a71 	.word	0x00400a71
  400458:	400e1200 	.word	0x400e1200
  40045c:	40088000 	.word	0x40088000
  400460:	400e1000 	.word	0x400e1000

00400464 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400464:	b570      	push	{r4, r5, r6, lr}
  400466:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400468:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40046a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  40046c:	4013      	ands	r3, r2
  40046e:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400470:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400472:	4e1c      	ldr	r6, [pc, #112]	; (4004e4 <afec_process_callback+0x80>)
  400474:	4d1c      	ldr	r5, [pc, #112]	; (4004e8 <afec_process_callback+0x84>)
  400476:	42a8      	cmp	r0, r5
  400478:	bf14      	ite	ne
  40047a:	2000      	movne	r0, #0
  40047c:	2001      	moveq	r0, #1
  40047e:	0105      	lsls	r5, r0, #4
  400480:	e00b      	b.n	40049a <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400482:	2c0e      	cmp	r4, #14
  400484:	d81e      	bhi.n	4004c4 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400486:	9a01      	ldr	r2, [sp, #4]
  400488:	f104 010c 	add.w	r1, r4, #12
  40048c:	2301      	movs	r3, #1
  40048e:	408b      	lsls	r3, r1
  400490:	4213      	tst	r3, r2
  400492:	d110      	bne.n	4004b6 <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400494:	3401      	adds	r4, #1
  400496:	2c10      	cmp	r4, #16
  400498:	d022      	beq.n	4004e0 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40049a:	2c0b      	cmp	r4, #11
  40049c:	d8f1      	bhi.n	400482 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  40049e:	9a01      	ldr	r2, [sp, #4]
  4004a0:	2301      	movs	r3, #1
  4004a2:	40a3      	lsls	r3, r4
  4004a4:	4213      	tst	r3, r2
  4004a6:	d0f5      	beq.n	400494 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4004a8:	192b      	adds	r3, r5, r4
  4004aa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4004ae:	2b00      	cmp	r3, #0
  4004b0:	d0f0      	beq.n	400494 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4004b2:	4798      	blx	r3
  4004b4:	e7ee      	b.n	400494 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4004b6:	192b      	adds	r3, r5, r4
  4004b8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4004bc:	2b00      	cmp	r3, #0
  4004be:	d0e9      	beq.n	400494 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4004c0:	4798      	blx	r3
  4004c2:	e7e7      	b.n	400494 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4004c4:	9a01      	ldr	r2, [sp, #4]
  4004c6:	f104 010f 	add.w	r1, r4, #15
  4004ca:	2301      	movs	r3, #1
  4004cc:	408b      	lsls	r3, r1
  4004ce:	4213      	tst	r3, r2
  4004d0:	d0e0      	beq.n	400494 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4004d2:	192b      	adds	r3, r5, r4
  4004d4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4004d8:	2b00      	cmp	r3, #0
  4004da:	d0db      	beq.n	400494 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4004dc:	4798      	blx	r3
  4004de:	e7d9      	b.n	400494 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  4004e0:	b002      	add	sp, #8
  4004e2:	bd70      	pop	{r4, r5, r6, pc}
  4004e4:	20400be8 	.word	0x20400be8
  4004e8:	40064000 	.word	0x40064000

004004ec <afec_ch_set_config>:
{
  4004ec:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  4004ee:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  4004f0:	2301      	movs	r3, #1
  4004f2:	408b      	lsls	r3, r1
  4004f4:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4004f8:	7815      	ldrb	r5, [r2, #0]
  4004fa:	2d00      	cmp	r5, #0
  4004fc:	bf08      	it	eq
  4004fe:	2300      	moveq	r3, #0
  400500:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  400502:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  400504:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  400506:	004b      	lsls	r3, r1, #1
  400508:	2103      	movs	r1, #3
  40050a:	4099      	lsls	r1, r3
  40050c:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400510:	7851      	ldrb	r1, [r2, #1]
  400512:	4099      	lsls	r1, r3
  400514:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  400516:	6541      	str	r1, [r0, #84]	; 0x54
}
  400518:	bc30      	pop	{r4, r5}
  40051a:	4770      	bx	lr

0040051c <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  40051c:	784b      	ldrb	r3, [r1, #1]
  40051e:	780a      	ldrb	r2, [r1, #0]
  400520:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  400522:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  400524:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  400526:	884b      	ldrh	r3, [r1, #2]
  400528:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40052c:	6743      	str	r3, [r0, #116]	; 0x74
  40052e:	4770      	bx	lr

00400530 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400530:	2200      	movs	r2, #0
  400532:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400534:	4b08      	ldr	r3, [pc, #32]	; (400558 <afec_get_config_defaults+0x28>)
  400536:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400538:	4b08      	ldr	r3, [pc, #32]	; (40055c <afec_get_config_defaults+0x2c>)
  40053a:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  40053c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400540:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  400542:	2302      	movs	r3, #2
  400544:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  400546:	2301      	movs	r3, #1
  400548:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  40054a:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  40054c:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  40054e:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400550:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400552:	7583      	strb	r3, [r0, #22]
  400554:	4770      	bx	lr
  400556:	bf00      	nop
  400558:	11e1a300 	.word	0x11e1a300
  40055c:	005b8d80 	.word	0x005b8d80

00400560 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400560:	2300      	movs	r3, #0
  400562:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400564:	2301      	movs	r3, #1
  400566:	7043      	strb	r3, [r0, #1]
  400568:	4770      	bx	lr

0040056a <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  40056a:	2300      	movs	r3, #0
  40056c:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  40056e:	2320      	movs	r3, #32
  400570:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  400572:	23ff      	movs	r3, #255	; 0xff
  400574:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  400576:	f640 73ff 	movw	r3, #4095	; 0xfff
  40057a:	8083      	strh	r3, [r0, #4]
  40057c:	4770      	bx	lr
	...

00400580 <afec_init>:
	return afec->AFEC_ISR;
  400580:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400582:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  400586:	d001      	beq.n	40058c <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400588:	2019      	movs	r0, #25
  40058a:	4770      	bx	lr
{
  40058c:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  40058e:	2301      	movs	r3, #1
  400590:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400592:	7ccb      	ldrb	r3, [r1, #19]
  400594:	2b00      	cmp	r3, #0
  400596:	bf18      	it	ne
  400598:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  40059c:	684b      	ldr	r3, [r1, #4]
  40059e:	688c      	ldr	r4, [r1, #8]
  4005a0:	fbb3 f3f4 	udiv	r3, r3, r4
  4005a4:	3b01      	subs	r3, #1
  4005a6:	021b      	lsls	r3, r3, #8
  4005a8:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4005aa:	68cc      	ldr	r4, [r1, #12]
  4005ac:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  4005b0:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  4005b2:	7c0c      	ldrb	r4, [r1, #16]
  4005b4:	0624      	lsls	r4, r4, #24
  4005b6:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4005ba:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  4005bc:	7c4c      	ldrb	r4, [r1, #17]
  4005be:	0724      	lsls	r4, r4, #28
  4005c0:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4005c4:	4323      	orrs	r3, r4
  4005c6:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  4005c8:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005ca:	7d0b      	ldrb	r3, [r1, #20]
  4005cc:	2b00      	cmp	r3, #0
  4005ce:	bf14      	ite	ne
  4005d0:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4005d4:	2300      	moveq	r3, #0
  4005d6:	680a      	ldr	r2, [r1, #0]
  4005d8:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  4005da:	7d4a      	ldrb	r2, [r1, #21]
  4005dc:	2a00      	cmp	r2, #0
  4005de:	bf14      	ite	ne
  4005e0:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  4005e4:	2200      	moveq	r2, #0
			(config->resolution) |
  4005e6:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005e8:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  4005ea:	7d8b      	ldrb	r3, [r1, #22]
  4005ec:	021b      	lsls	r3, r3, #8
  4005ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4005f2:	f043 030c 	orr.w	r3, r3, #12
  4005f6:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4005fa:	4b0f      	ldr	r3, [pc, #60]	; (400638 <afec_init+0xb8>)
  4005fc:	4298      	cmp	r0, r3
  4005fe:	d006      	beq.n	40060e <afec_init+0x8e>
	if(afec == AFEC1) {
  400600:	4b0e      	ldr	r3, [pc, #56]	; (40063c <afec_init+0xbc>)
  400602:	4298      	cmp	r0, r3
  400604:	d00d      	beq.n	400622 <afec_init+0xa2>
	return STATUS_OK;
  400606:	2000      	movs	r0, #0
}
  400608:	f85d 4b04 	ldr.w	r4, [sp], #4
  40060c:	4770      	bx	lr
  40060e:	4b0c      	ldr	r3, [pc, #48]	; (400640 <afec_init+0xc0>)
  400610:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  400614:	2200      	movs	r2, #0
  400616:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40061a:	428b      	cmp	r3, r1
  40061c:	d1fb      	bne.n	400616 <afec_init+0x96>
	return STATUS_OK;
  40061e:	2000      	movs	r0, #0
  400620:	e7f2      	b.n	400608 <afec_init+0x88>
  400622:	4b08      	ldr	r3, [pc, #32]	; (400644 <afec_init+0xc4>)
  400624:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  400628:	2200      	movs	r2, #0
  40062a:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40062e:	428b      	cmp	r3, r1
  400630:	d1fb      	bne.n	40062a <afec_init+0xaa>
	return STATUS_OK;
  400632:	2000      	movs	r0, #0
  400634:	e7e8      	b.n	400608 <afec_init+0x88>
  400636:	bf00      	nop
  400638:	4003c000 	.word	0x4003c000
  40063c:	40064000 	.word	0x40064000
  400640:	20400be4 	.word	0x20400be4
  400644:	20400c28 	.word	0x20400c28

00400648 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400648:	4b0c      	ldr	r3, [pc, #48]	; (40067c <afec_enable_interrupt+0x34>)
  40064a:	4299      	cmp	r1, r3
  40064c:	d007      	beq.n	40065e <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  40064e:	290b      	cmp	r1, #11
  400650:	d80b      	bhi.n	40066a <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  400652:	d006      	beq.n	400662 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400654:	2301      	movs	r3, #1
  400656:	fa03 f101 	lsl.w	r1, r3, r1
  40065a:	6241      	str	r1, [r0, #36]	; 0x24
  40065c:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  40065e:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  400660:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  400662:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400666:	6243      	str	r3, [r0, #36]	; 0x24
  400668:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40066a:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  40066c:	bf94      	ite	ls
  40066e:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  400670:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400672:	2301      	movs	r3, #1
  400674:	fa03 f101 	lsl.w	r1, r3, r1
  400678:	6241      	str	r1, [r0, #36]	; 0x24
  40067a:	4770      	bx	lr
  40067c:	47000fff 	.word	0x47000fff

00400680 <afec_set_callback>:
{
  400680:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  400682:	4c11      	ldr	r4, [pc, #68]	; (4006c8 <afec_set_callback+0x48>)
  400684:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  400686:	bf0c      	ite	eq
  400688:	2410      	moveq	r4, #16
  40068a:	2400      	movne	r4, #0
  40068c:	440c      	add	r4, r1
  40068e:	4d0f      	ldr	r5, [pc, #60]	; (4006cc <afec_set_callback+0x4c>)
  400690:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  400694:	d10a      	bne.n	4006ac <afec_set_callback+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400696:	4a0e      	ldr	r2, [pc, #56]	; (4006d0 <afec_set_callback+0x50>)
  400698:	f44f 7480 	mov.w	r4, #256	; 0x100
  40069c:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4006a0:	015b      	lsls	r3, r3, #5
  4006a2:	b2db      	uxtb	r3, r3
  4006a4:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006a8:	6054      	str	r4, [r2, #4]
  4006aa:	e009      	b.n	4006c0 <afec_set_callback+0x40>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006ac:	4a08      	ldr	r2, [pc, #32]	; (4006d0 <afec_set_callback+0x50>)
  4006ae:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  4006b2:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4006b6:	015b      	lsls	r3, r3, #5
  4006b8:	b2db      	uxtb	r3, r3
  4006ba:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006be:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  4006c0:	4b04      	ldr	r3, [pc, #16]	; (4006d4 <afec_set_callback+0x54>)
  4006c2:	4798      	blx	r3
  4006c4:	bd38      	pop	{r3, r4, r5, pc}
  4006c6:	bf00      	nop
  4006c8:	40064000 	.word	0x40064000
  4006cc:	20400be8 	.word	0x20400be8
  4006d0:	e000e100 	.word	0xe000e100
  4006d4:	00400649 	.word	0x00400649

004006d8 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4006d8:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  4006da:	4802      	ldr	r0, [pc, #8]	; (4006e4 <AFEC0_Handler+0xc>)
  4006dc:	4b02      	ldr	r3, [pc, #8]	; (4006e8 <AFEC0_Handler+0x10>)
  4006de:	4798      	blx	r3
  4006e0:	bd08      	pop	{r3, pc}
  4006e2:	bf00      	nop
  4006e4:	4003c000 	.word	0x4003c000
  4006e8:	00400465 	.word	0x00400465

004006ec <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4006ec:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4006ee:	4802      	ldr	r0, [pc, #8]	; (4006f8 <AFEC1_Handler+0xc>)
  4006f0:	4b02      	ldr	r3, [pc, #8]	; (4006fc <AFEC1_Handler+0x10>)
  4006f2:	4798      	blx	r3
  4006f4:	bd08      	pop	{r3, pc}
  4006f6:	bf00      	nop
  4006f8:	40064000 	.word	0x40064000
  4006fc:	00400465 	.word	0x00400465

00400700 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400700:	b500      	push	{lr}
  400702:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400704:	4b13      	ldr	r3, [pc, #76]	; (400754 <afec_enable+0x54>)
  400706:	4298      	cmp	r0, r3
  400708:	bf0c      	ite	eq
  40070a:	2028      	moveq	r0, #40	; 0x28
  40070c:	201d      	movne	r0, #29
  40070e:	4b12      	ldr	r3, [pc, #72]	; (400758 <afec_enable+0x58>)
  400710:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400712:	4b12      	ldr	r3, [pc, #72]	; (40075c <afec_enable+0x5c>)
  400714:	789b      	ldrb	r3, [r3, #2]
  400716:	2bff      	cmp	r3, #255	; 0xff
  400718:	d01a      	beq.n	400750 <afec_enable+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40071a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40071e:	fab3 f383 	clz	r3, r3
  400722:	095b      	lsrs	r3, r3, #5
  400724:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400726:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400728:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40072c:	2200      	movs	r2, #0
  40072e:	4b0c      	ldr	r3, [pc, #48]	; (400760 <afec_enable+0x60>)
  400730:	701a      	strb	r2, [r3, #0]
	return flags;
  400732:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400734:	4a09      	ldr	r2, [pc, #36]	; (40075c <afec_enable+0x5c>)
  400736:	7893      	ldrb	r3, [r2, #2]
  400738:	3301      	adds	r3, #1
  40073a:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40073c:	b129      	cbz	r1, 40074a <afec_enable+0x4a>
		cpu_irq_enable();
  40073e:	2201      	movs	r2, #1
  400740:	4b07      	ldr	r3, [pc, #28]	; (400760 <afec_enable+0x60>)
  400742:	701a      	strb	r2, [r3, #0]
  400744:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400748:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  40074a:	b003      	add	sp, #12
  40074c:	f85d fb04 	ldr.w	pc, [sp], #4
  400750:	e7fe      	b.n	400750 <afec_enable+0x50>
  400752:	bf00      	nop
  400754:	40064000 	.word	0x40064000
  400758:	00400a71 	.word	0x00400a71
  40075c:	20400bd4 	.word	0x20400bd4
  400760:	20400000 	.word	0x20400000

00400764 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400764:	b90a      	cbnz	r2, 40076a <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400766:	6601      	str	r1, [r0, #96]	; 0x60
  400768:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40076a:	6641      	str	r1, [r0, #100]	; 0x64
  40076c:	4770      	bx	lr

0040076e <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  40076e:	6301      	str	r1, [r0, #48]	; 0x30
  400770:	4770      	bx	lr

00400772 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400772:	6341      	str	r1, [r0, #52]	; 0x34
  400774:	4770      	bx	lr

00400776 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400776:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  40077a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40077e:	d105      	bne.n	40078c <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  400780:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  400782:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  400784:	bf14      	ite	ne
  400786:	2001      	movne	r0, #1
  400788:	2000      	moveq	r0, #0
  40078a:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  40078c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  40078e:	e7f8      	b.n	400782 <pio_get+0xc>

00400790 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400790:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400792:	f012 0f01 	tst.w	r2, #1
  400796:	d10d      	bne.n	4007b4 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400798:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40079a:	f012 0f0a 	tst.w	r2, #10
  40079e:	d00b      	beq.n	4007b8 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4007a0:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4007a2:	f012 0f02 	tst.w	r2, #2
  4007a6:	d109      	bne.n	4007bc <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4007a8:	f012 0f08 	tst.w	r2, #8
  4007ac:	d008      	beq.n	4007c0 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4007ae:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4007b2:	e005      	b.n	4007c0 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4007b4:	6641      	str	r1, [r0, #100]	; 0x64
  4007b6:	e7f0      	b.n	40079a <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4007b8:	6241      	str	r1, [r0, #36]	; 0x24
  4007ba:	e7f2      	b.n	4007a2 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4007bc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4007c0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4007c2:	6001      	str	r1, [r0, #0]
  4007c4:	4770      	bx	lr

004007c6 <pio_set_output>:
{
  4007c6:	b410      	push	{r4}
  4007c8:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4007ca:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4007cc:	b94c      	cbnz	r4, 4007e2 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4007ce:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4007d0:	b14b      	cbz	r3, 4007e6 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4007d2:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4007d4:	b94a      	cbnz	r2, 4007ea <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4007d6:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4007d8:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4007da:	6001      	str	r1, [r0, #0]
}
  4007dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4007e0:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4007e2:	6641      	str	r1, [r0, #100]	; 0x64
  4007e4:	e7f4      	b.n	4007d0 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4007e6:	6541      	str	r1, [r0, #84]	; 0x54
  4007e8:	e7f4      	b.n	4007d4 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4007ea:	6301      	str	r1, [r0, #48]	; 0x30
  4007ec:	e7f4      	b.n	4007d8 <pio_set_output+0x12>

004007ee <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4007ee:	f012 0f10 	tst.w	r2, #16
  4007f2:	d012      	beq.n	40081a <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4007f4:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4007f8:	f012 0f20 	tst.w	r2, #32
  4007fc:	d007      	beq.n	40080e <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4007fe:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400802:	f012 0f40 	tst.w	r2, #64	; 0x40
  400806:	d005      	beq.n	400814 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400808:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  40080c:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  40080e:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400812:	e7f6      	b.n	400802 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400814:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400818:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  40081a:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40081e:	4770      	bx	lr

00400820 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400820:	6401      	str	r1, [r0, #64]	; 0x40
  400822:	4770      	bx	lr

00400824 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400824:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400826:	4770      	bx	lr

00400828 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400828:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40082a:	4770      	bx	lr

0040082c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40082c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400830:	4604      	mov	r4, r0
  400832:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400834:	4b0e      	ldr	r3, [pc, #56]	; (400870 <pio_handler_process+0x44>)
  400836:	4798      	blx	r3
  400838:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40083a:	4620      	mov	r0, r4
  40083c:	4b0d      	ldr	r3, [pc, #52]	; (400874 <pio_handler_process+0x48>)
  40083e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400840:	4005      	ands	r5, r0
  400842:	d013      	beq.n	40086c <pio_handler_process+0x40>
  400844:	4c0c      	ldr	r4, [pc, #48]	; (400878 <pio_handler_process+0x4c>)
  400846:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40084a:	e003      	b.n	400854 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40084c:	42b4      	cmp	r4, r6
  40084e:	d00d      	beq.n	40086c <pio_handler_process+0x40>
  400850:	3410      	adds	r4, #16
		while (status != 0) {
  400852:	b15d      	cbz	r5, 40086c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400854:	6820      	ldr	r0, [r4, #0]
  400856:	4540      	cmp	r0, r8
  400858:	d1f8      	bne.n	40084c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40085a:	6861      	ldr	r1, [r4, #4]
  40085c:	4229      	tst	r1, r5
  40085e:	d0f5      	beq.n	40084c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400860:	68e3      	ldr	r3, [r4, #12]
  400862:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400864:	6863      	ldr	r3, [r4, #4]
  400866:	ea25 0503 	bic.w	r5, r5, r3
  40086a:	e7ef      	b.n	40084c <pio_handler_process+0x20>
  40086c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400870:	00400825 	.word	0x00400825
  400874:	00400829 	.word	0x00400829
  400878:	204009d4 	.word	0x204009d4

0040087c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40087c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40087e:	4c18      	ldr	r4, [pc, #96]	; (4008e0 <pio_handler_set+0x64>)
  400880:	6826      	ldr	r6, [r4, #0]
  400882:	2e06      	cmp	r6, #6
  400884:	d82a      	bhi.n	4008dc <pio_handler_set+0x60>
  400886:	f04f 0c00 	mov.w	ip, #0
  40088a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40088c:	4f15      	ldr	r7, [pc, #84]	; (4008e4 <pio_handler_set+0x68>)
  40088e:	e004      	b.n	40089a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400890:	3401      	adds	r4, #1
  400892:	b2e4      	uxtb	r4, r4
  400894:	46a4      	mov	ip, r4
  400896:	42a6      	cmp	r6, r4
  400898:	d309      	bcc.n	4008ae <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40089a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40089c:	0125      	lsls	r5, r4, #4
  40089e:	597d      	ldr	r5, [r7, r5]
  4008a0:	428d      	cmp	r5, r1
  4008a2:	d1f5      	bne.n	400890 <pio_handler_set+0x14>
  4008a4:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4008a8:	686d      	ldr	r5, [r5, #4]
  4008aa:	4295      	cmp	r5, r2
  4008ac:	d1f0      	bne.n	400890 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4008ae:	4d0d      	ldr	r5, [pc, #52]	; (4008e4 <pio_handler_set+0x68>)
  4008b0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4008b4:	eb05 040e 	add.w	r4, r5, lr
  4008b8:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4008bc:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4008be:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4008c0:	9906      	ldr	r1, [sp, #24]
  4008c2:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4008c4:	3601      	adds	r6, #1
  4008c6:	4566      	cmp	r6, ip
  4008c8:	d005      	beq.n	4008d6 <pio_handler_set+0x5a>
  4008ca:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4008cc:	461a      	mov	r2, r3
  4008ce:	4b06      	ldr	r3, [pc, #24]	; (4008e8 <pio_handler_set+0x6c>)
  4008d0:	4798      	blx	r3

	return 0;
  4008d2:	2000      	movs	r0, #0
  4008d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4008d6:	4902      	ldr	r1, [pc, #8]	; (4008e0 <pio_handler_set+0x64>)
  4008d8:	600e      	str	r6, [r1, #0]
  4008da:	e7f6      	b.n	4008ca <pio_handler_set+0x4e>
		return 1;
  4008dc:	2001      	movs	r0, #1
}
  4008de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4008e0:	20400a44 	.word	0x20400a44
  4008e4:	204009d4 	.word	0x204009d4
  4008e8:	004007ef 	.word	0x004007ef

004008ec <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4008ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4008ee:	210a      	movs	r1, #10
  4008f0:	4801      	ldr	r0, [pc, #4]	; (4008f8 <PIOA_Handler+0xc>)
  4008f2:	4b02      	ldr	r3, [pc, #8]	; (4008fc <PIOA_Handler+0x10>)
  4008f4:	4798      	blx	r3
  4008f6:	bd08      	pop	{r3, pc}
  4008f8:	400e0e00 	.word	0x400e0e00
  4008fc:	0040082d 	.word	0x0040082d

00400900 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400900:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400902:	210b      	movs	r1, #11
  400904:	4801      	ldr	r0, [pc, #4]	; (40090c <PIOB_Handler+0xc>)
  400906:	4b02      	ldr	r3, [pc, #8]	; (400910 <PIOB_Handler+0x10>)
  400908:	4798      	blx	r3
  40090a:	bd08      	pop	{r3, pc}
  40090c:	400e1000 	.word	0x400e1000
  400910:	0040082d 	.word	0x0040082d

00400914 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400914:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400916:	210c      	movs	r1, #12
  400918:	4801      	ldr	r0, [pc, #4]	; (400920 <PIOC_Handler+0xc>)
  40091a:	4b02      	ldr	r3, [pc, #8]	; (400924 <PIOC_Handler+0x10>)
  40091c:	4798      	blx	r3
  40091e:	bd08      	pop	{r3, pc}
  400920:	400e1200 	.word	0x400e1200
  400924:	0040082d 	.word	0x0040082d

00400928 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400928:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40092a:	2110      	movs	r1, #16
  40092c:	4801      	ldr	r0, [pc, #4]	; (400934 <PIOD_Handler+0xc>)
  40092e:	4b02      	ldr	r3, [pc, #8]	; (400938 <PIOD_Handler+0x10>)
  400930:	4798      	blx	r3
  400932:	bd08      	pop	{r3, pc}
  400934:	400e1400 	.word	0x400e1400
  400938:	0040082d 	.word	0x0040082d

0040093c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40093c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40093e:	2111      	movs	r1, #17
  400940:	4801      	ldr	r0, [pc, #4]	; (400948 <PIOE_Handler+0xc>)
  400942:	4b02      	ldr	r3, [pc, #8]	; (40094c <PIOE_Handler+0x10>)
  400944:	4798      	blx	r3
  400946:	bd08      	pop	{r3, pc}
  400948:	400e1600 	.word	0x400e1600
  40094c:	0040082d 	.word	0x0040082d

00400950 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400950:	2803      	cmp	r0, #3
  400952:	d011      	beq.n	400978 <pmc_mck_set_division+0x28>
  400954:	2804      	cmp	r0, #4
  400956:	d012      	beq.n	40097e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400958:	2802      	cmp	r0, #2
  40095a:	bf0c      	ite	eq
  40095c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400960:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400962:	4a08      	ldr	r2, [pc, #32]	; (400984 <pmc_mck_set_division+0x34>)
  400964:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40096a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40096c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40096e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400970:	f013 0f08 	tst.w	r3, #8
  400974:	d0fb      	beq.n	40096e <pmc_mck_set_division+0x1e>
}
  400976:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400978:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40097c:	e7f1      	b.n	400962 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40097e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400982:	e7ee      	b.n	400962 <pmc_mck_set_division+0x12>
  400984:	400e0600 	.word	0x400e0600

00400988 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400988:	4a17      	ldr	r2, [pc, #92]	; (4009e8 <pmc_switch_mck_to_pllack+0x60>)
  40098a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40098c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400990:	4318      	orrs	r0, r3
  400992:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400994:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400996:	f013 0f08 	tst.w	r3, #8
  40099a:	d10a      	bne.n	4009b2 <pmc_switch_mck_to_pllack+0x2a>
  40099c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4009a0:	4911      	ldr	r1, [pc, #68]	; (4009e8 <pmc_switch_mck_to_pllack+0x60>)
  4009a2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4009a4:	f012 0f08 	tst.w	r2, #8
  4009a8:	d103      	bne.n	4009b2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4009aa:	3b01      	subs	r3, #1
  4009ac:	d1f9      	bne.n	4009a2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4009ae:	2001      	movs	r0, #1
  4009b0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4009b2:	4a0d      	ldr	r2, [pc, #52]	; (4009e8 <pmc_switch_mck_to_pllack+0x60>)
  4009b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4009b6:	f023 0303 	bic.w	r3, r3, #3
  4009ba:	f043 0302 	orr.w	r3, r3, #2
  4009be:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4009c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009c2:	f013 0f08 	tst.w	r3, #8
  4009c6:	d10a      	bne.n	4009de <pmc_switch_mck_to_pllack+0x56>
  4009c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4009cc:	4906      	ldr	r1, [pc, #24]	; (4009e8 <pmc_switch_mck_to_pllack+0x60>)
  4009ce:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4009d0:	f012 0f08 	tst.w	r2, #8
  4009d4:	d105      	bne.n	4009e2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4009d6:	3b01      	subs	r3, #1
  4009d8:	d1f9      	bne.n	4009ce <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4009da:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4009dc:	4770      	bx	lr
	return 0;
  4009de:	2000      	movs	r0, #0
  4009e0:	4770      	bx	lr
  4009e2:	2000      	movs	r0, #0
  4009e4:	4770      	bx	lr
  4009e6:	bf00      	nop
  4009e8:	400e0600 	.word	0x400e0600

004009ec <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4009ec:	b9a0      	cbnz	r0, 400a18 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4009ee:	480e      	ldr	r0, [pc, #56]	; (400a28 <pmc_switch_mainck_to_xtal+0x3c>)
  4009f0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4009f2:	0209      	lsls	r1, r1, #8
  4009f4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4009f6:	4a0d      	ldr	r2, [pc, #52]	; (400a2c <pmc_switch_mainck_to_xtal+0x40>)
  4009f8:	401a      	ands	r2, r3
  4009fa:	4b0d      	ldr	r3, [pc, #52]	; (400a30 <pmc_switch_mainck_to_xtal+0x44>)
  4009fc:	4313      	orrs	r3, r2
  4009fe:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a00:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400a02:	4602      	mov	r2, r0
  400a04:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a06:	f013 0f01 	tst.w	r3, #1
  400a0a:	d0fb      	beq.n	400a04 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400a0c:	4a06      	ldr	r2, [pc, #24]	; (400a28 <pmc_switch_mainck_to_xtal+0x3c>)
  400a0e:	6a11      	ldr	r1, [r2, #32]
  400a10:	4b08      	ldr	r3, [pc, #32]	; (400a34 <pmc_switch_mainck_to_xtal+0x48>)
  400a12:	430b      	orrs	r3, r1
  400a14:	6213      	str	r3, [r2, #32]
  400a16:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a18:	4903      	ldr	r1, [pc, #12]	; (400a28 <pmc_switch_mainck_to_xtal+0x3c>)
  400a1a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400a1c:	4a06      	ldr	r2, [pc, #24]	; (400a38 <pmc_switch_mainck_to_xtal+0x4c>)
  400a1e:	401a      	ands	r2, r3
  400a20:	4b06      	ldr	r3, [pc, #24]	; (400a3c <pmc_switch_mainck_to_xtal+0x50>)
  400a22:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a24:	620b      	str	r3, [r1, #32]
  400a26:	4770      	bx	lr
  400a28:	400e0600 	.word	0x400e0600
  400a2c:	ffc8fffc 	.word	0xffc8fffc
  400a30:	00370001 	.word	0x00370001
  400a34:	01370000 	.word	0x01370000
  400a38:	fec8fffc 	.word	0xfec8fffc
  400a3c:	01370002 	.word	0x01370002

00400a40 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400a40:	4b02      	ldr	r3, [pc, #8]	; (400a4c <pmc_osc_is_ready_mainck+0xc>)
  400a42:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400a44:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400a48:	4770      	bx	lr
  400a4a:	bf00      	nop
  400a4c:	400e0600 	.word	0x400e0600

00400a50 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400a50:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400a54:	4b01      	ldr	r3, [pc, #4]	; (400a5c <pmc_disable_pllack+0xc>)
  400a56:	629a      	str	r2, [r3, #40]	; 0x28
  400a58:	4770      	bx	lr
  400a5a:	bf00      	nop
  400a5c:	400e0600 	.word	0x400e0600

00400a60 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400a60:	4b02      	ldr	r3, [pc, #8]	; (400a6c <pmc_is_locked_pllack+0xc>)
  400a62:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400a64:	f000 0002 	and.w	r0, r0, #2
  400a68:	4770      	bx	lr
  400a6a:	bf00      	nop
  400a6c:	400e0600 	.word	0x400e0600

00400a70 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400a70:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400a74:	4b05      	ldr	r3, [pc, #20]	; (400a8c <pmc_enable_periph_clk+0x1c>)
  400a76:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  400a7a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400a7e:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  400a82:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400a86:	2000      	movs	r0, #0
  400a88:	4770      	bx	lr
  400a8a:	bf00      	nop
  400a8c:	400e0600 	.word	0x400e0600

00400a90 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400a90:	6943      	ldr	r3, [r0, #20]
  400a92:	f013 0f02 	tst.w	r3, #2
  400a96:	d002      	beq.n	400a9e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400a98:	61c1      	str	r1, [r0, #28]
	return 0;
  400a9a:	2000      	movs	r0, #0
  400a9c:	4770      	bx	lr
		return 1;
  400a9e:	2001      	movs	r0, #1
}
  400aa0:	4770      	bx	lr

00400aa2 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400aa2:	6943      	ldr	r3, [r0, #20]
  400aa4:	f013 0f01 	tst.w	r3, #1
  400aa8:	d003      	beq.n	400ab2 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400aaa:	6983      	ldr	r3, [r0, #24]
  400aac:	700b      	strb	r3, [r1, #0]
	return 0;
  400aae:	2000      	movs	r0, #0
  400ab0:	4770      	bx	lr
		return 1;
  400ab2:	2001      	movs	r0, #1
}
  400ab4:	4770      	bx	lr

00400ab6 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400ab6:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400ab8:	010b      	lsls	r3, r1, #4
  400aba:	4293      	cmp	r3, r2
  400abc:	d914      	bls.n	400ae8 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400abe:	00c9      	lsls	r1, r1, #3
  400ac0:	084b      	lsrs	r3, r1, #1
  400ac2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400ac6:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400aca:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400acc:	1e5c      	subs	r4, r3, #1
  400ace:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400ad2:	428c      	cmp	r4, r1
  400ad4:	d901      	bls.n	400ada <usart_set_async_baudrate+0x24>
		return 1;
  400ad6:	2001      	movs	r0, #1
  400ad8:	e017      	b.n	400b0a <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400ada:	6841      	ldr	r1, [r0, #4]
  400adc:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400ae0:	6041      	str	r1, [r0, #4]
  400ae2:	e00c      	b.n	400afe <usart_set_async_baudrate+0x48>
		return 1;
  400ae4:	2001      	movs	r0, #1
  400ae6:	e010      	b.n	400b0a <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400ae8:	0859      	lsrs	r1, r3, #1
  400aea:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400aee:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400af2:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400af4:	1e5c      	subs	r4, r3, #1
  400af6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400afa:	428c      	cmp	r4, r1
  400afc:	d8f2      	bhi.n	400ae4 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400afe:	0412      	lsls	r2, r2, #16
  400b00:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400b04:	431a      	orrs	r2, r3
  400b06:	6202      	str	r2, [r0, #32]

	return 0;
  400b08:	2000      	movs	r0, #0
}
  400b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
  400b0e:	4770      	bx	lr

00400b10 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400b10:	4b08      	ldr	r3, [pc, #32]	; (400b34 <usart_reset+0x24>)
  400b12:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400b16:	2300      	movs	r3, #0
  400b18:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400b1a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400b1c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400b1e:	2388      	movs	r3, #136	; 0x88
  400b20:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400b22:	2324      	movs	r3, #36	; 0x24
  400b24:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400b26:	f44f 7380 	mov.w	r3, #256	; 0x100
  400b2a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400b2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400b30:	6003      	str	r3, [r0, #0]
  400b32:	4770      	bx	lr
  400b34:	55534100 	.word	0x55534100

00400b38 <usart_init_rs232>:
{
  400b38:	b570      	push	{r4, r5, r6, lr}
  400b3a:	4605      	mov	r5, r0
  400b3c:	460c      	mov	r4, r1
  400b3e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400b40:	4b0f      	ldr	r3, [pc, #60]	; (400b80 <usart_init_rs232+0x48>)
  400b42:	4798      	blx	r3
	ul_reg_val = 0;
  400b44:	2200      	movs	r2, #0
  400b46:	4b0f      	ldr	r3, [pc, #60]	; (400b84 <usart_init_rs232+0x4c>)
  400b48:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400b4a:	b1a4      	cbz	r4, 400b76 <usart_init_rs232+0x3e>
  400b4c:	4632      	mov	r2, r6
  400b4e:	6821      	ldr	r1, [r4, #0]
  400b50:	4628      	mov	r0, r5
  400b52:	4b0d      	ldr	r3, [pc, #52]	; (400b88 <usart_init_rs232+0x50>)
  400b54:	4798      	blx	r3
  400b56:	4602      	mov	r2, r0
  400b58:	b978      	cbnz	r0, 400b7a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b5a:	6863      	ldr	r3, [r4, #4]
  400b5c:	68a1      	ldr	r1, [r4, #8]
  400b5e:	430b      	orrs	r3, r1
  400b60:	6921      	ldr	r1, [r4, #16]
  400b62:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400b64:	68e1      	ldr	r1, [r4, #12]
  400b66:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b68:	4906      	ldr	r1, [pc, #24]	; (400b84 <usart_init_rs232+0x4c>)
  400b6a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400b6c:	6869      	ldr	r1, [r5, #4]
  400b6e:	430b      	orrs	r3, r1
  400b70:	606b      	str	r3, [r5, #4]
}
  400b72:	4610      	mov	r0, r2
  400b74:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400b76:	2201      	movs	r2, #1
  400b78:	e7fb      	b.n	400b72 <usart_init_rs232+0x3a>
  400b7a:	2201      	movs	r2, #1
  400b7c:	e7f9      	b.n	400b72 <usart_init_rs232+0x3a>
  400b7e:	bf00      	nop
  400b80:	00400b11 	.word	0x00400b11
  400b84:	20400a48 	.word	0x20400a48
  400b88:	00400ab7 	.word	0x00400ab7

00400b8c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400b8c:	2340      	movs	r3, #64	; 0x40
  400b8e:	6003      	str	r3, [r0, #0]
  400b90:	4770      	bx	lr

00400b92 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400b92:	2310      	movs	r3, #16
  400b94:	6003      	str	r3, [r0, #0]
  400b96:	4770      	bx	lr

00400b98 <usart_is_tx_ready>:
	return (p_usart->US_CSR & US_CSR_TXRDY) > 0;
  400b98:	6940      	ldr	r0, [r0, #20]
}
  400b9a:	f3c0 0040 	ubfx	r0, r0, #1, #1
  400b9e:	4770      	bx	lr

00400ba0 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400ba0:	6943      	ldr	r3, [r0, #20]
  400ba2:	f013 0f02 	tst.w	r3, #2
  400ba6:	d004      	beq.n	400bb2 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400ba8:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400bac:	61c1      	str	r1, [r0, #28]
	return 0;
  400bae:	2000      	movs	r0, #0
  400bb0:	4770      	bx	lr
		return 1;
  400bb2:	2001      	movs	r0, #1
}
  400bb4:	4770      	bx	lr

00400bb6 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400bb6:	6943      	ldr	r3, [r0, #20]
  400bb8:	f013 0f01 	tst.w	r3, #1
  400bbc:	d005      	beq.n	400bca <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400bbe:	6983      	ldr	r3, [r0, #24]
  400bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400bc4:	600b      	str	r3, [r1, #0]
	return 0;
  400bc6:	2000      	movs	r0, #0
  400bc8:	4770      	bx	lr
		return 1;
  400bca:	2001      	movs	r0, #1
}
  400bcc:	4770      	bx	lr

00400bce <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400bce:	e7fe      	b.n	400bce <Dummy_Handler>

00400bd0 <Reset_Handler>:
{
  400bd0:	b500      	push	{lr}
  400bd2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400bd4:	4b25      	ldr	r3, [pc, #148]	; (400c6c <Reset_Handler+0x9c>)
  400bd6:	4a26      	ldr	r2, [pc, #152]	; (400c70 <Reset_Handler+0xa0>)
  400bd8:	429a      	cmp	r2, r3
  400bda:	d010      	beq.n	400bfe <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400bdc:	4b25      	ldr	r3, [pc, #148]	; (400c74 <Reset_Handler+0xa4>)
  400bde:	4a23      	ldr	r2, [pc, #140]	; (400c6c <Reset_Handler+0x9c>)
  400be0:	429a      	cmp	r2, r3
  400be2:	d20c      	bcs.n	400bfe <Reset_Handler+0x2e>
  400be4:	3b01      	subs	r3, #1
  400be6:	1a9b      	subs	r3, r3, r2
  400be8:	f023 0303 	bic.w	r3, r3, #3
  400bec:	3304      	adds	r3, #4
  400bee:	4413      	add	r3, r2
  400bf0:	491f      	ldr	r1, [pc, #124]	; (400c70 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400bf2:	f851 0b04 	ldr.w	r0, [r1], #4
  400bf6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400bfa:	429a      	cmp	r2, r3
  400bfc:	d1f9      	bne.n	400bf2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400bfe:	4b1e      	ldr	r3, [pc, #120]	; (400c78 <Reset_Handler+0xa8>)
  400c00:	4a1e      	ldr	r2, [pc, #120]	; (400c7c <Reset_Handler+0xac>)
  400c02:	429a      	cmp	r2, r3
  400c04:	d20a      	bcs.n	400c1c <Reset_Handler+0x4c>
  400c06:	3b01      	subs	r3, #1
  400c08:	1a9b      	subs	r3, r3, r2
  400c0a:	f023 0303 	bic.w	r3, r3, #3
  400c0e:	3304      	adds	r3, #4
  400c10:	4413      	add	r3, r2
                *pDest++ = 0;
  400c12:	2100      	movs	r1, #0
  400c14:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400c18:	4293      	cmp	r3, r2
  400c1a:	d1fb      	bne.n	400c14 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400c1c:	4a18      	ldr	r2, [pc, #96]	; (400c80 <Reset_Handler+0xb0>)
  400c1e:	4b19      	ldr	r3, [pc, #100]	; (400c84 <Reset_Handler+0xb4>)
  400c20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400c24:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400c26:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400c2a:	fab3 f383 	clz	r3, r3
  400c2e:	095b      	lsrs	r3, r3, #5
  400c30:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400c32:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400c34:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400c38:	2200      	movs	r2, #0
  400c3a:	4b13      	ldr	r3, [pc, #76]	; (400c88 <Reset_Handler+0xb8>)
  400c3c:	701a      	strb	r2, [r3, #0]
	return flags;
  400c3e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400c40:	4a12      	ldr	r2, [pc, #72]	; (400c8c <Reset_Handler+0xbc>)
  400c42:	6813      	ldr	r3, [r2, #0]
  400c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400c48:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400c4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400c4e:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400c52:	b129      	cbz	r1, 400c60 <Reset_Handler+0x90>
		cpu_irq_enable();
  400c54:	2201      	movs	r2, #1
  400c56:	4b0c      	ldr	r3, [pc, #48]	; (400c88 <Reset_Handler+0xb8>)
  400c58:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400c5a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400c5e:	b662      	cpsie	i
        __libc_init_array();
  400c60:	4b0b      	ldr	r3, [pc, #44]	; (400c90 <Reset_Handler+0xc0>)
  400c62:	4798      	blx	r3
        main();
  400c64:	4b0b      	ldr	r3, [pc, #44]	; (400c94 <Reset_Handler+0xc4>)
  400c66:	4798      	blx	r3
  400c68:	e7fe      	b.n	400c68 <Reset_Handler+0x98>
  400c6a:	bf00      	nop
  400c6c:	20400000 	.word	0x20400000
  400c70:	00406988 	.word	0x00406988
  400c74:	204009b8 	.word	0x204009b8
  400c78:	20400ce4 	.word	0x20400ce4
  400c7c:	204009b8 	.word	0x204009b8
  400c80:	e000ed00 	.word	0xe000ed00
  400c84:	00400000 	.word	0x00400000
  400c88:	20400000 	.word	0x20400000
  400c8c:	e000ed88 	.word	0xe000ed88
  400c90:	004036e9 	.word	0x004036e9
  400c94:	00403561 	.word	0x00403561

00400c98 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400c98:	4b3b      	ldr	r3, [pc, #236]	; (400d88 <SystemCoreClockUpdate+0xf0>)
  400c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c9c:	f003 0303 	and.w	r3, r3, #3
  400ca0:	2b01      	cmp	r3, #1
  400ca2:	d01d      	beq.n	400ce0 <SystemCoreClockUpdate+0x48>
  400ca4:	b183      	cbz	r3, 400cc8 <SystemCoreClockUpdate+0x30>
  400ca6:	2b02      	cmp	r3, #2
  400ca8:	d036      	beq.n	400d18 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400caa:	4b37      	ldr	r3, [pc, #220]	; (400d88 <SystemCoreClockUpdate+0xf0>)
  400cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400cae:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400cb2:	2b70      	cmp	r3, #112	; 0x70
  400cb4:	d05f      	beq.n	400d76 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400cb6:	4b34      	ldr	r3, [pc, #208]	; (400d88 <SystemCoreClockUpdate+0xf0>)
  400cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400cba:	4934      	ldr	r1, [pc, #208]	; (400d8c <SystemCoreClockUpdate+0xf4>)
  400cbc:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400cc0:	680b      	ldr	r3, [r1, #0]
  400cc2:	40d3      	lsrs	r3, r2
  400cc4:	600b      	str	r3, [r1, #0]
  400cc6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400cc8:	4b31      	ldr	r3, [pc, #196]	; (400d90 <SystemCoreClockUpdate+0xf8>)
  400cca:	695b      	ldr	r3, [r3, #20]
  400ccc:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400cd0:	bf14      	ite	ne
  400cd2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400cd6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400cda:	4b2c      	ldr	r3, [pc, #176]	; (400d8c <SystemCoreClockUpdate+0xf4>)
  400cdc:	601a      	str	r2, [r3, #0]
  400cde:	e7e4      	b.n	400caa <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400ce0:	4b29      	ldr	r3, [pc, #164]	; (400d88 <SystemCoreClockUpdate+0xf0>)
  400ce2:	6a1b      	ldr	r3, [r3, #32]
  400ce4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ce8:	d003      	beq.n	400cf2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400cea:	4a2a      	ldr	r2, [pc, #168]	; (400d94 <SystemCoreClockUpdate+0xfc>)
  400cec:	4b27      	ldr	r3, [pc, #156]	; (400d8c <SystemCoreClockUpdate+0xf4>)
  400cee:	601a      	str	r2, [r3, #0]
  400cf0:	e7db      	b.n	400caa <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400cf2:	4a29      	ldr	r2, [pc, #164]	; (400d98 <SystemCoreClockUpdate+0x100>)
  400cf4:	4b25      	ldr	r3, [pc, #148]	; (400d8c <SystemCoreClockUpdate+0xf4>)
  400cf6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400cf8:	4b23      	ldr	r3, [pc, #140]	; (400d88 <SystemCoreClockUpdate+0xf0>)
  400cfa:	6a1b      	ldr	r3, [r3, #32]
  400cfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d00:	2b10      	cmp	r3, #16
  400d02:	d005      	beq.n	400d10 <SystemCoreClockUpdate+0x78>
  400d04:	2b20      	cmp	r3, #32
  400d06:	d1d0      	bne.n	400caa <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400d08:	4a22      	ldr	r2, [pc, #136]	; (400d94 <SystemCoreClockUpdate+0xfc>)
  400d0a:	4b20      	ldr	r3, [pc, #128]	; (400d8c <SystemCoreClockUpdate+0xf4>)
  400d0c:	601a      	str	r2, [r3, #0]
          break;
  400d0e:	e7cc      	b.n	400caa <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400d10:	4a22      	ldr	r2, [pc, #136]	; (400d9c <SystemCoreClockUpdate+0x104>)
  400d12:	4b1e      	ldr	r3, [pc, #120]	; (400d8c <SystemCoreClockUpdate+0xf4>)
  400d14:	601a      	str	r2, [r3, #0]
          break;
  400d16:	e7c8      	b.n	400caa <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400d18:	4b1b      	ldr	r3, [pc, #108]	; (400d88 <SystemCoreClockUpdate+0xf0>)
  400d1a:	6a1b      	ldr	r3, [r3, #32]
  400d1c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400d20:	d016      	beq.n	400d50 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400d22:	4a1c      	ldr	r2, [pc, #112]	; (400d94 <SystemCoreClockUpdate+0xfc>)
  400d24:	4b19      	ldr	r3, [pc, #100]	; (400d8c <SystemCoreClockUpdate+0xf4>)
  400d26:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400d28:	4b17      	ldr	r3, [pc, #92]	; (400d88 <SystemCoreClockUpdate+0xf0>)
  400d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d2c:	f003 0303 	and.w	r3, r3, #3
  400d30:	2b02      	cmp	r3, #2
  400d32:	d1ba      	bne.n	400caa <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400d34:	4a14      	ldr	r2, [pc, #80]	; (400d88 <SystemCoreClockUpdate+0xf0>)
  400d36:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400d38:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400d3a:	4814      	ldr	r0, [pc, #80]	; (400d8c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400d3c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400d40:	6803      	ldr	r3, [r0, #0]
  400d42:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400d46:	b2d2      	uxtb	r2, r2
  400d48:	fbb3 f3f2 	udiv	r3, r3, r2
  400d4c:	6003      	str	r3, [r0, #0]
  400d4e:	e7ac      	b.n	400caa <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400d50:	4a11      	ldr	r2, [pc, #68]	; (400d98 <SystemCoreClockUpdate+0x100>)
  400d52:	4b0e      	ldr	r3, [pc, #56]	; (400d8c <SystemCoreClockUpdate+0xf4>)
  400d54:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400d56:	4b0c      	ldr	r3, [pc, #48]	; (400d88 <SystemCoreClockUpdate+0xf0>)
  400d58:	6a1b      	ldr	r3, [r3, #32]
  400d5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d5e:	2b10      	cmp	r3, #16
  400d60:	d005      	beq.n	400d6e <SystemCoreClockUpdate+0xd6>
  400d62:	2b20      	cmp	r3, #32
  400d64:	d1e0      	bne.n	400d28 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400d66:	4a0b      	ldr	r2, [pc, #44]	; (400d94 <SystemCoreClockUpdate+0xfc>)
  400d68:	4b08      	ldr	r3, [pc, #32]	; (400d8c <SystemCoreClockUpdate+0xf4>)
  400d6a:	601a      	str	r2, [r3, #0]
          break;
  400d6c:	e7dc      	b.n	400d28 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400d6e:	4a0b      	ldr	r2, [pc, #44]	; (400d9c <SystemCoreClockUpdate+0x104>)
  400d70:	4b06      	ldr	r3, [pc, #24]	; (400d8c <SystemCoreClockUpdate+0xf4>)
  400d72:	601a      	str	r2, [r3, #0]
          break;
  400d74:	e7d8      	b.n	400d28 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400d76:	4a05      	ldr	r2, [pc, #20]	; (400d8c <SystemCoreClockUpdate+0xf4>)
  400d78:	6813      	ldr	r3, [r2, #0]
  400d7a:	4909      	ldr	r1, [pc, #36]	; (400da0 <SystemCoreClockUpdate+0x108>)
  400d7c:	fba1 1303 	umull	r1, r3, r1, r3
  400d80:	085b      	lsrs	r3, r3, #1
  400d82:	6013      	str	r3, [r2, #0]
  400d84:	4770      	bx	lr
  400d86:	bf00      	nop
  400d88:	400e0600 	.word	0x400e0600
  400d8c:	20400004 	.word	0x20400004
  400d90:	400e1810 	.word	0x400e1810
  400d94:	00b71b00 	.word	0x00b71b00
  400d98:	003d0900 	.word	0x003d0900
  400d9c:	007a1200 	.word	0x007a1200
  400da0:	aaaaaaab 	.word	0xaaaaaaab

00400da4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400da4:	4b16      	ldr	r3, [pc, #88]	; (400e00 <system_init_flash+0x5c>)
  400da6:	4298      	cmp	r0, r3
  400da8:	d913      	bls.n	400dd2 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400daa:	4b16      	ldr	r3, [pc, #88]	; (400e04 <system_init_flash+0x60>)
  400dac:	4298      	cmp	r0, r3
  400dae:	d915      	bls.n	400ddc <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400db0:	4b15      	ldr	r3, [pc, #84]	; (400e08 <system_init_flash+0x64>)
  400db2:	4298      	cmp	r0, r3
  400db4:	d916      	bls.n	400de4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400db6:	4b15      	ldr	r3, [pc, #84]	; (400e0c <system_init_flash+0x68>)
  400db8:	4298      	cmp	r0, r3
  400dba:	d917      	bls.n	400dec <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400dbc:	4b14      	ldr	r3, [pc, #80]	; (400e10 <system_init_flash+0x6c>)
  400dbe:	4298      	cmp	r0, r3
  400dc0:	d918      	bls.n	400df4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400dc2:	4b14      	ldr	r3, [pc, #80]	; (400e14 <system_init_flash+0x70>)
  400dc4:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400dc6:	bf94      	ite	ls
  400dc8:	4a13      	ldrls	r2, [pc, #76]	; (400e18 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400dca:	4a14      	ldrhi	r2, [pc, #80]	; (400e1c <system_init_flash+0x78>)
  400dcc:	4b14      	ldr	r3, [pc, #80]	; (400e20 <system_init_flash+0x7c>)
  400dce:	601a      	str	r2, [r3, #0]
  400dd0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400dd2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400dd6:	4b12      	ldr	r3, [pc, #72]	; (400e20 <system_init_flash+0x7c>)
  400dd8:	601a      	str	r2, [r3, #0]
  400dda:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ddc:	4a11      	ldr	r2, [pc, #68]	; (400e24 <system_init_flash+0x80>)
  400dde:	4b10      	ldr	r3, [pc, #64]	; (400e20 <system_init_flash+0x7c>)
  400de0:	601a      	str	r2, [r3, #0]
  400de2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400de4:	4a10      	ldr	r2, [pc, #64]	; (400e28 <system_init_flash+0x84>)
  400de6:	4b0e      	ldr	r3, [pc, #56]	; (400e20 <system_init_flash+0x7c>)
  400de8:	601a      	str	r2, [r3, #0]
  400dea:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400dec:	4a0f      	ldr	r2, [pc, #60]	; (400e2c <system_init_flash+0x88>)
  400dee:	4b0c      	ldr	r3, [pc, #48]	; (400e20 <system_init_flash+0x7c>)
  400df0:	601a      	str	r2, [r3, #0]
  400df2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400df4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400df8:	4b09      	ldr	r3, [pc, #36]	; (400e20 <system_init_flash+0x7c>)
  400dfa:	601a      	str	r2, [r3, #0]
  400dfc:	4770      	bx	lr
  400dfe:	bf00      	nop
  400e00:	015ef3bf 	.word	0x015ef3bf
  400e04:	02bde77f 	.word	0x02bde77f
  400e08:	041cdb3f 	.word	0x041cdb3f
  400e0c:	057bceff 	.word	0x057bceff
  400e10:	06dac2bf 	.word	0x06dac2bf
  400e14:	0839b67f 	.word	0x0839b67f
  400e18:	04000500 	.word	0x04000500
  400e1c:	04000600 	.word	0x04000600
  400e20:	400e0c00 	.word	0x400e0c00
  400e24:	04000100 	.word	0x04000100
  400e28:	04000200 	.word	0x04000200
  400e2c:	04000300 	.word	0x04000300

00400e30 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400e30:	4b0a      	ldr	r3, [pc, #40]	; (400e5c <_sbrk+0x2c>)
  400e32:	681b      	ldr	r3, [r3, #0]
  400e34:	b153      	cbz	r3, 400e4c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400e36:	4b09      	ldr	r3, [pc, #36]	; (400e5c <_sbrk+0x2c>)
  400e38:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400e3a:	181a      	adds	r2, r3, r0
  400e3c:	4908      	ldr	r1, [pc, #32]	; (400e60 <_sbrk+0x30>)
  400e3e:	4291      	cmp	r1, r2
  400e40:	db08      	blt.n	400e54 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400e42:	4610      	mov	r0, r2
  400e44:	4a05      	ldr	r2, [pc, #20]	; (400e5c <_sbrk+0x2c>)
  400e46:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400e48:	4618      	mov	r0, r3
  400e4a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400e4c:	4a05      	ldr	r2, [pc, #20]	; (400e64 <_sbrk+0x34>)
  400e4e:	4b03      	ldr	r3, [pc, #12]	; (400e5c <_sbrk+0x2c>)
  400e50:	601a      	str	r2, [r3, #0]
  400e52:	e7f0      	b.n	400e36 <_sbrk+0x6>
		return (caddr_t) -1;	
  400e54:	f04f 30ff 	mov.w	r0, #4294967295
}
  400e58:	4770      	bx	lr
  400e5a:	bf00      	nop
  400e5c:	20400a4c 	.word	0x20400a4c
  400e60:	2045fffc 	.word	0x2045fffc
  400e64:	20402ee8 	.word	0x20402ee8

00400e68 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400e68:	f04f 30ff 	mov.w	r0, #4294967295
  400e6c:	4770      	bx	lr

00400e6e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400e6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400e72:	604b      	str	r3, [r1, #4]

	return 0;
}
  400e74:	2000      	movs	r0, #0
  400e76:	4770      	bx	lr

00400e78 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400e78:	2001      	movs	r0, #1
  400e7a:	4770      	bx	lr

00400e7c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400e7c:	2000      	movs	r0, #0
  400e7e:	4770      	bx	lr

00400e80 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e80:	f100 0308 	add.w	r3, r0, #8
  400e84:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400e86:	f04f 32ff 	mov.w	r2, #4294967295
  400e8a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e8c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e8e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400e90:	2300      	movs	r3, #0
  400e92:	6003      	str	r3, [r0, #0]
  400e94:	4770      	bx	lr

00400e96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400e96:	2300      	movs	r3, #0
  400e98:	6103      	str	r3, [r0, #16]
  400e9a:	4770      	bx	lr

00400e9c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400e9c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400e9e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400ea0:	689a      	ldr	r2, [r3, #8]
  400ea2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400ea4:	689a      	ldr	r2, [r3, #8]
  400ea6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400ea8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400eaa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400eac:	6803      	ldr	r3, [r0, #0]
  400eae:	3301      	adds	r3, #1
  400eb0:	6003      	str	r3, [r0, #0]
  400eb2:	4770      	bx	lr

00400eb4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400eb4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400eb6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400eb8:	f1b5 3fff 	cmp.w	r5, #4294967295
  400ebc:	d002      	beq.n	400ec4 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400ebe:	f100 0208 	add.w	r2, r0, #8
  400ec2:	e002      	b.n	400eca <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  400ec4:	6902      	ldr	r2, [r0, #16]
  400ec6:	e004      	b.n	400ed2 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400ec8:	461a      	mov	r2, r3
  400eca:	6853      	ldr	r3, [r2, #4]
  400ecc:	681c      	ldr	r4, [r3, #0]
  400ece:	42a5      	cmp	r5, r4
  400ed0:	d2fa      	bcs.n	400ec8 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400ed2:	6853      	ldr	r3, [r2, #4]
  400ed4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400ed6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400ed8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400eda:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400edc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400ede:	6803      	ldr	r3, [r0, #0]
  400ee0:	3301      	adds	r3, #1
  400ee2:	6003      	str	r3, [r0, #0]
}
  400ee4:	bc30      	pop	{r4, r5}
  400ee6:	4770      	bx	lr

00400ee8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400ee8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400eea:	6842      	ldr	r2, [r0, #4]
  400eec:	6881      	ldr	r1, [r0, #8]
  400eee:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400ef0:	6882      	ldr	r2, [r0, #8]
  400ef2:	6841      	ldr	r1, [r0, #4]
  400ef4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400ef6:	685a      	ldr	r2, [r3, #4]
  400ef8:	4290      	cmp	r0, r2
  400efa:	d006      	beq.n	400f0a <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400efc:	2200      	movs	r2, #0
  400efe:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400f00:	681a      	ldr	r2, [r3, #0]
  400f02:	3a01      	subs	r2, #1
  400f04:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400f06:	6818      	ldr	r0, [r3, #0]
}
  400f08:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400f0a:	6882      	ldr	r2, [r0, #8]
  400f0c:	605a      	str	r2, [r3, #4]
  400f0e:	e7f5      	b.n	400efc <uxListRemove+0x14>

00400f10 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  400f10:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
  400f12:	2300      	movs	r3, #0
  400f14:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400f16:	4b0f      	ldr	r3, [pc, #60]	; (400f54 <prvTaskExitError+0x44>)
  400f18:	681b      	ldr	r3, [r3, #0]
  400f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f1e:	d00a      	beq.n	400f36 <prvTaskExitError+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400f20:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f24:	b672      	cpsid	i
  400f26:	f383 8811 	msr	BASEPRI, r3
  400f2a:	f3bf 8f6f 	isb	sy
  400f2e:	f3bf 8f4f 	dsb	sy
  400f32:	b662      	cpsie	i
  400f34:	e7fe      	b.n	400f34 <prvTaskExitError+0x24>
  400f36:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f3a:	b672      	cpsid	i
  400f3c:	f383 8811 	msr	BASEPRI, r3
  400f40:	f3bf 8f6f 	isb	sy
  400f44:	f3bf 8f4f 	dsb	sy
  400f48:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
  400f4a:	9b01      	ldr	r3, [sp, #4]
  400f4c:	2b00      	cmp	r3, #0
  400f4e:	d0fc      	beq.n	400f4a <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
  400f50:	b002      	add	sp, #8
  400f52:	4770      	bx	lr
  400f54:	20400008 	.word	0x20400008

00400f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
  400f58:	4808      	ldr	r0, [pc, #32]	; (400f7c <prvPortStartFirstTask+0x24>)
  400f5a:	6800      	ldr	r0, [r0, #0]
  400f5c:	6800      	ldr	r0, [r0, #0]
  400f5e:	f380 8808 	msr	MSP, r0
  400f62:	f04f 0000 	mov.w	r0, #0
  400f66:	f380 8814 	msr	CONTROL, r0
  400f6a:	b662      	cpsie	i
  400f6c:	b661      	cpsie	f
  400f6e:	f3bf 8f4f 	dsb	sy
  400f72:	f3bf 8f6f 	isb	sy
  400f76:	df00      	svc	0
  400f78:	bf00      	nop
  400f7a:	0000      	.short	0x0000
  400f7c:	e000ed08 	.word	0xe000ed08

00400f80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400f80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400f90 <vPortEnableVFP+0x10>
  400f84:	6801      	ldr	r1, [r0, #0]
  400f86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400f8a:	6001      	str	r1, [r0, #0]
  400f8c:	4770      	bx	lr
  400f8e:	0000      	.short	0x0000
  400f90:	e000ed88 	.word	0xe000ed88

00400f94 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400f94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400f98:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  400f9c:	f021 0101 	bic.w	r1, r1, #1
  400fa0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400fa4:	4b05      	ldr	r3, [pc, #20]	; (400fbc <pxPortInitialiseStack+0x28>)
  400fa6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400faa:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  400fae:	f06f 0302 	mvn.w	r3, #2
  400fb2:	f840 3c24 	str.w	r3, [r0, #-36]
}
  400fb6:	3844      	subs	r0, #68	; 0x44
  400fb8:	4770      	bx	lr
  400fba:	bf00      	nop
  400fbc:	00400f11 	.word	0x00400f11

00400fc0 <SVC_Handler>:
	__asm volatile (
  400fc0:	4b07      	ldr	r3, [pc, #28]	; (400fe0 <pxCurrentTCBConst2>)
  400fc2:	6819      	ldr	r1, [r3, #0]
  400fc4:	6808      	ldr	r0, [r1, #0]
  400fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400fca:	f380 8809 	msr	PSP, r0
  400fce:	f3bf 8f6f 	isb	sy
  400fd2:	f04f 0000 	mov.w	r0, #0
  400fd6:	f380 8811 	msr	BASEPRI, r0
  400fda:	4770      	bx	lr
  400fdc:	f3af 8000 	nop.w

00400fe0 <pxCurrentTCBConst2>:
  400fe0:	20400a58 	.word	0x20400a58

00400fe4 <vPortEnterCritical>:
  400fe4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fe8:	b672      	cpsid	i
  400fea:	f383 8811 	msr	BASEPRI, r3
  400fee:	f3bf 8f6f 	isb	sy
  400ff2:	f3bf 8f4f 	dsb	sy
  400ff6:	b662      	cpsie	i
	uxCriticalNesting++;
  400ff8:	4a0b      	ldr	r2, [pc, #44]	; (401028 <vPortEnterCritical+0x44>)
  400ffa:	6813      	ldr	r3, [r2, #0]
  400ffc:	3301      	adds	r3, #1
  400ffe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  401000:	2b01      	cmp	r3, #1
  401002:	d10f      	bne.n	401024 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  401004:	4b09      	ldr	r3, [pc, #36]	; (40102c <vPortEnterCritical+0x48>)
  401006:	681b      	ldr	r3, [r3, #0]
  401008:	f013 0fff 	tst.w	r3, #255	; 0xff
  40100c:	d00a      	beq.n	401024 <vPortEnterCritical+0x40>
  40100e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401012:	b672      	cpsid	i
  401014:	f383 8811 	msr	BASEPRI, r3
  401018:	f3bf 8f6f 	isb	sy
  40101c:	f3bf 8f4f 	dsb	sy
  401020:	b662      	cpsie	i
  401022:	e7fe      	b.n	401022 <vPortEnterCritical+0x3e>
  401024:	4770      	bx	lr
  401026:	bf00      	nop
  401028:	20400008 	.word	0x20400008
  40102c:	e000ed04 	.word	0xe000ed04

00401030 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401030:	4b0a      	ldr	r3, [pc, #40]	; (40105c <vPortExitCritical+0x2c>)
  401032:	681b      	ldr	r3, [r3, #0]
  401034:	b953      	cbnz	r3, 40104c <vPortExitCritical+0x1c>
  401036:	f04f 0380 	mov.w	r3, #128	; 0x80
  40103a:	b672      	cpsid	i
  40103c:	f383 8811 	msr	BASEPRI, r3
  401040:	f3bf 8f6f 	isb	sy
  401044:	f3bf 8f4f 	dsb	sy
  401048:	b662      	cpsie	i
  40104a:	e7fe      	b.n	40104a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  40104c:	3b01      	subs	r3, #1
  40104e:	4a03      	ldr	r2, [pc, #12]	; (40105c <vPortExitCritical+0x2c>)
  401050:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401052:	b90b      	cbnz	r3, 401058 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401054:	f383 8811 	msr	BASEPRI, r3
  401058:	4770      	bx	lr
  40105a:	bf00      	nop
  40105c:	20400008 	.word	0x20400008

00401060 <PendSV_Handler>:
	__asm volatile
  401060:	f3ef 8009 	mrs	r0, PSP
  401064:	f3bf 8f6f 	isb	sy
  401068:	4b15      	ldr	r3, [pc, #84]	; (4010c0 <pxCurrentTCBConst>)
  40106a:	681a      	ldr	r2, [r3, #0]
  40106c:	f01e 0f10 	tst.w	lr, #16
  401070:	bf08      	it	eq
  401072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  401076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40107a:	6010      	str	r0, [r2, #0]
  40107c:	e92d 0009 	stmdb	sp!, {r0, r3}
  401080:	f04f 0080 	mov.w	r0, #128	; 0x80
  401084:	b672      	cpsid	i
  401086:	f380 8811 	msr	BASEPRI, r0
  40108a:	f3bf 8f4f 	dsb	sy
  40108e:	f3bf 8f6f 	isb	sy
  401092:	b662      	cpsie	i
  401094:	f001 f9e6 	bl	402464 <vTaskSwitchContext>
  401098:	f04f 0000 	mov.w	r0, #0
  40109c:	f380 8811 	msr	BASEPRI, r0
  4010a0:	bc09      	pop	{r0, r3}
  4010a2:	6819      	ldr	r1, [r3, #0]
  4010a4:	6808      	ldr	r0, [r1, #0]
  4010a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4010aa:	f01e 0f10 	tst.w	lr, #16
  4010ae:	bf08      	it	eq
  4010b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4010b4:	f380 8809 	msr	PSP, r0
  4010b8:	f3bf 8f6f 	isb	sy
  4010bc:	4770      	bx	lr
  4010be:	bf00      	nop

004010c0 <pxCurrentTCBConst>:
  4010c0:	20400a58 	.word	0x20400a58

004010c4 <SysTick_Handler>:
{
  4010c4:	b508      	push	{r3, lr}
	__asm volatile
  4010c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010ca:	b672      	cpsid	i
  4010cc:	f383 8811 	msr	BASEPRI, r3
  4010d0:	f3bf 8f6f 	isb	sy
  4010d4:	f3bf 8f4f 	dsb	sy
  4010d8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4010da:	4b05      	ldr	r3, [pc, #20]	; (4010f0 <SysTick_Handler+0x2c>)
  4010dc:	4798      	blx	r3
  4010de:	b118      	cbz	r0, 4010e8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4010e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4010e4:	4b03      	ldr	r3, [pc, #12]	; (4010f4 <SysTick_Handler+0x30>)
  4010e6:	601a      	str	r2, [r3, #0]
	__asm volatile
  4010e8:	2300      	movs	r3, #0
  4010ea:	f383 8811 	msr	BASEPRI, r3
  4010ee:	bd08      	pop	{r3, pc}
  4010f0:	004021a9 	.word	0x004021a9
  4010f4:	e000ed04 	.word	0xe000ed04

004010f8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  4010f8:	4b05      	ldr	r3, [pc, #20]	; (401110 <vPortSetupTimerInterrupt+0x18>)
  4010fa:	2200      	movs	r2, #0
  4010fc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  4010fe:	4905      	ldr	r1, [pc, #20]	; (401114 <vPortSetupTimerInterrupt+0x1c>)
  401100:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401102:	4905      	ldr	r1, [pc, #20]	; (401118 <vPortSetupTimerInterrupt+0x20>)
  401104:	4a05      	ldr	r2, [pc, #20]	; (40111c <vPortSetupTimerInterrupt+0x24>)
  401106:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  401108:	2207      	movs	r2, #7
  40110a:	601a      	str	r2, [r3, #0]
  40110c:	4770      	bx	lr
  40110e:	bf00      	nop
  401110:	e000e010 	.word	0xe000e010
  401114:	e000e018 	.word	0xe000e018
  401118:	000927bf 	.word	0x000927bf
  40111c:	e000e014 	.word	0xe000e014

00401120 <xPortStartScheduler>:
{
  401120:	b510      	push	{r4, lr}
  401122:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  401124:	4b2e      	ldr	r3, [pc, #184]	; (4011e0 <xPortStartScheduler+0xc0>)
  401126:	781a      	ldrb	r2, [r3, #0]
  401128:	b2d2      	uxtb	r2, r2
  40112a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40112c:	22ff      	movs	r2, #255	; 0xff
  40112e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401130:	781b      	ldrb	r3, [r3, #0]
  401132:	b2db      	uxtb	r3, r3
  401134:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401138:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40113c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401140:	4a28      	ldr	r2, [pc, #160]	; (4011e4 <xPortStartScheduler+0xc4>)
  401142:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401144:	2207      	movs	r2, #7
  401146:	4b28      	ldr	r3, [pc, #160]	; (4011e8 <xPortStartScheduler+0xc8>)
  401148:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40114a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40114e:	f013 0f80 	tst.w	r3, #128	; 0x80
  401152:	d012      	beq.n	40117a <xPortStartScheduler+0x5a>
  401154:	2306      	movs	r3, #6
  401156:	e000      	b.n	40115a <xPortStartScheduler+0x3a>
  401158:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40115a:	f89d 2003 	ldrb.w	r2, [sp, #3]
  40115e:	0052      	lsls	r2, r2, #1
  401160:	b2d2      	uxtb	r2, r2
  401162:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401166:	f89d 2003 	ldrb.w	r2, [sp, #3]
  40116a:	1e59      	subs	r1, r3, #1
  40116c:	f012 0f80 	tst.w	r2, #128	; 0x80
  401170:	d1f2      	bne.n	401158 <xPortStartScheduler+0x38>
  401172:	4a1d      	ldr	r2, [pc, #116]	; (4011e8 <xPortStartScheduler+0xc8>)
  401174:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
  401176:	2b04      	cmp	r3, #4
  401178:	d00a      	beq.n	401190 <xPortStartScheduler+0x70>
	__asm volatile
  40117a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40117e:	b672      	cpsid	i
  401180:	f383 8811 	msr	BASEPRI, r3
  401184:	f3bf 8f6f 	isb	sy
  401188:	f3bf 8f4f 	dsb	sy
  40118c:	b662      	cpsie	i
  40118e:	e7fe      	b.n	40118e <xPortStartScheduler+0x6e>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401190:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401192:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401196:	4a14      	ldr	r2, [pc, #80]	; (4011e8 <xPortStartScheduler+0xc8>)
  401198:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40119a:	9b01      	ldr	r3, [sp, #4]
  40119c:	b2db      	uxtb	r3, r3
  40119e:	4a10      	ldr	r2, [pc, #64]	; (4011e0 <xPortStartScheduler+0xc0>)
  4011a0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4011a2:	4b12      	ldr	r3, [pc, #72]	; (4011ec <xPortStartScheduler+0xcc>)
  4011a4:	681a      	ldr	r2, [r3, #0]
  4011a6:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4011aa:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4011ac:	681a      	ldr	r2, [r3, #0]
  4011ae:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4011b2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4011b4:	4b0e      	ldr	r3, [pc, #56]	; (4011f0 <xPortStartScheduler+0xd0>)
  4011b6:	4798      	blx	r3
	uxCriticalNesting = 0;
  4011b8:	2400      	movs	r4, #0
  4011ba:	4b0e      	ldr	r3, [pc, #56]	; (4011f4 <xPortStartScheduler+0xd4>)
  4011bc:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  4011be:	4b0e      	ldr	r3, [pc, #56]	; (4011f8 <xPortStartScheduler+0xd8>)
  4011c0:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4011c2:	4a0e      	ldr	r2, [pc, #56]	; (4011fc <xPortStartScheduler+0xdc>)
  4011c4:	6813      	ldr	r3, [r2, #0]
  4011c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4011ca:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4011cc:	4b0c      	ldr	r3, [pc, #48]	; (401200 <xPortStartScheduler+0xe0>)
  4011ce:	4798      	blx	r3
	vTaskSwitchContext();
  4011d0:	4b0c      	ldr	r3, [pc, #48]	; (401204 <xPortStartScheduler+0xe4>)
  4011d2:	4798      	blx	r3
	prvTaskExitError();
  4011d4:	4b0c      	ldr	r3, [pc, #48]	; (401208 <xPortStartScheduler+0xe8>)
  4011d6:	4798      	blx	r3
}
  4011d8:	4620      	mov	r0, r4
  4011da:	b002      	add	sp, #8
  4011dc:	bd10      	pop	{r4, pc}
  4011de:	bf00      	nop
  4011e0:	e000e400 	.word	0xe000e400
  4011e4:	20400a50 	.word	0x20400a50
  4011e8:	20400a54 	.word	0x20400a54
  4011ec:	e000ed20 	.word	0xe000ed20
  4011f0:	004010f9 	.word	0x004010f9
  4011f4:	20400008 	.word	0x20400008
  4011f8:	00400f81 	.word	0x00400f81
  4011fc:	e000ef34 	.word	0xe000ef34
  401200:	00400f59 	.word	0x00400f59
  401204:	00402465 	.word	0x00402465
  401208:	00400f11 	.word	0x00400f11

0040120c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
  40120c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401210:	2b0f      	cmp	r3, #15
  401212:	d911      	bls.n	401238 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401214:	4a12      	ldr	r2, [pc, #72]	; (401260 <vPortValidateInterruptPriority+0x54>)
  401216:	5c9b      	ldrb	r3, [r3, r2]
  401218:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40121a:	4a12      	ldr	r2, [pc, #72]	; (401264 <vPortValidateInterruptPriority+0x58>)
  40121c:	7812      	ldrb	r2, [r2, #0]
  40121e:	429a      	cmp	r2, r3
  401220:	d90a      	bls.n	401238 <vPortValidateInterruptPriority+0x2c>
  401222:	f04f 0380 	mov.w	r3, #128	; 0x80
  401226:	b672      	cpsid	i
  401228:	f383 8811 	msr	BASEPRI, r3
  40122c:	f3bf 8f6f 	isb	sy
  401230:	f3bf 8f4f 	dsb	sy
  401234:	b662      	cpsie	i
  401236:	e7fe      	b.n	401236 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401238:	4b0b      	ldr	r3, [pc, #44]	; (401268 <vPortValidateInterruptPriority+0x5c>)
  40123a:	681b      	ldr	r3, [r3, #0]
  40123c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401240:	4a0a      	ldr	r2, [pc, #40]	; (40126c <vPortValidateInterruptPriority+0x60>)
  401242:	6812      	ldr	r2, [r2, #0]
  401244:	4293      	cmp	r3, r2
  401246:	d90a      	bls.n	40125e <vPortValidateInterruptPriority+0x52>
  401248:	f04f 0380 	mov.w	r3, #128	; 0x80
  40124c:	b672      	cpsid	i
  40124e:	f383 8811 	msr	BASEPRI, r3
  401252:	f3bf 8f6f 	isb	sy
  401256:	f3bf 8f4f 	dsb	sy
  40125a:	b662      	cpsie	i
  40125c:	e7fe      	b.n	40125c <vPortValidateInterruptPriority+0x50>
  40125e:	4770      	bx	lr
  401260:	e000e3f0 	.word	0xe000e3f0
  401264:	20400a50 	.word	0x20400a50
  401268:	e000ed0c 	.word	0xe000ed0c
  40126c:	20400a54 	.word	0x20400a54

00401270 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401270:	b510      	push	{r4, lr}
  401272:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401274:	4b06      	ldr	r3, [pc, #24]	; (401290 <pvPortMalloc+0x20>)
  401276:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401278:	4620      	mov	r0, r4
  40127a:	4b06      	ldr	r3, [pc, #24]	; (401294 <pvPortMalloc+0x24>)
  40127c:	4798      	blx	r3
  40127e:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401280:	4b05      	ldr	r3, [pc, #20]	; (401298 <pvPortMalloc+0x28>)
  401282:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401284:	b10c      	cbz	r4, 40128a <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401286:	4620      	mov	r0, r4
  401288:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  40128a:	4b04      	ldr	r3, [pc, #16]	; (40129c <pvPortMalloc+0x2c>)
  40128c:	4798      	blx	r3
	return pvReturn;
  40128e:	e7fa      	b.n	401286 <pvPortMalloc+0x16>
  401290:	0040218d 	.word	0x0040218d
  401294:	00403761 	.word	0x00403761
  401298:	004022f1 	.word	0x004022f1
  40129c:	0040354b 	.word	0x0040354b

004012a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  4012a0:	b148      	cbz	r0, 4012b6 <vPortFree+0x16>
{
  4012a2:	b510      	push	{r4, lr}
  4012a4:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  4012a6:	4b04      	ldr	r3, [pc, #16]	; (4012b8 <vPortFree+0x18>)
  4012a8:	4798      	blx	r3
		{
			free( pv );
  4012aa:	4620      	mov	r0, r4
  4012ac:	4b03      	ldr	r3, [pc, #12]	; (4012bc <vPortFree+0x1c>)
  4012ae:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  4012b0:	4b03      	ldr	r3, [pc, #12]	; (4012c0 <vPortFree+0x20>)
  4012b2:	4798      	blx	r3
  4012b4:	bd10      	pop	{r4, pc}
  4012b6:	4770      	bx	lr
  4012b8:	0040218d 	.word	0x0040218d
  4012bc:	00403771 	.word	0x00403771
  4012c0:	004022f1 	.word	0x004022f1

004012c4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
  4012c4:	b510      	push	{r4, lr}
  4012c6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  4012c8:	4b04      	ldr	r3, [pc, #16]	; (4012dc <prvIsQueueEmpty+0x18>)
  4012ca:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  4012cc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  4012ce:	4b04      	ldr	r3, [pc, #16]	; (4012e0 <prvIsQueueEmpty+0x1c>)
  4012d0:	4798      	blx	r3

	return xReturn;
}
  4012d2:	fab4 f084 	clz	r0, r4
  4012d6:	0940      	lsrs	r0, r0, #5
  4012d8:	bd10      	pop	{r4, pc}
  4012da:	bf00      	nop
  4012dc:	00400fe5 	.word	0x00400fe5
  4012e0:	00401031 	.word	0x00401031

004012e4 <prvCopyDataToQueue>:
{
  4012e4:	b570      	push	{r4, r5, r6, lr}
  4012e6:	4604      	mov	r4, r0
  4012e8:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  4012ea:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4012ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4012ee:	b952      	cbnz	r2, 401306 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4012f0:	6803      	ldr	r3, [r0, #0]
  4012f2:	2b00      	cmp	r3, #0
  4012f4:	d12a      	bne.n	40134c <prvCopyDataToQueue+0x68>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4012f6:	6840      	ldr	r0, [r0, #4]
  4012f8:	4b17      	ldr	r3, [pc, #92]	; (401358 <prvCopyDataToQueue+0x74>)
  4012fa:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4012fc:	2300      	movs	r3, #0
  4012fe:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  401300:	3501      	adds	r5, #1
  401302:	63a5      	str	r5, [r4, #56]	; 0x38
}
  401304:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401306:	b96e      	cbnz	r6, 401324 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401308:	6880      	ldr	r0, [r0, #8]
  40130a:	4b14      	ldr	r3, [pc, #80]	; (40135c <prvCopyDataToQueue+0x78>)
  40130c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40130e:	68a3      	ldr	r3, [r4, #8]
  401310:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401312:	4413      	add	r3, r2
  401314:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401316:	6862      	ldr	r2, [r4, #4]
  401318:	4293      	cmp	r3, r2
  40131a:	d319      	bcc.n	401350 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40131c:	6823      	ldr	r3, [r4, #0]
  40131e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401320:	2000      	movs	r0, #0
  401322:	e7ed      	b.n	401300 <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401324:	68c0      	ldr	r0, [r0, #12]
  401326:	4b0d      	ldr	r3, [pc, #52]	; (40135c <prvCopyDataToQueue+0x78>)
  401328:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40132a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40132c:	425b      	negs	r3, r3
  40132e:	68e2      	ldr	r2, [r4, #12]
  401330:	441a      	add	r2, r3
  401332:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401334:	6821      	ldr	r1, [r4, #0]
  401336:	428a      	cmp	r2, r1
  401338:	d202      	bcs.n	401340 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40133a:	6862      	ldr	r2, [r4, #4]
  40133c:	4413      	add	r3, r2
  40133e:	60e3      	str	r3, [r4, #12]
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  401340:	b145      	cbz	r5, 401354 <prvCopyDataToQueue+0x70>
  401342:	2e02      	cmp	r6, #2
  401344:	d106      	bne.n	401354 <prvCopyDataToQueue+0x70>
				--uxMessagesWaiting;
  401346:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  401348:	2000      	movs	r0, #0
  40134a:	e7d9      	b.n	401300 <prvCopyDataToQueue+0x1c>
  40134c:	2000      	movs	r0, #0
  40134e:	e7d7      	b.n	401300 <prvCopyDataToQueue+0x1c>
  401350:	2000      	movs	r0, #0
  401352:	e7d5      	b.n	401300 <prvCopyDataToQueue+0x1c>
  401354:	2000      	movs	r0, #0
  401356:	e7d3      	b.n	401300 <prvCopyDataToQueue+0x1c>
  401358:	004027e9 	.word	0x004027e9
  40135c:	00403ce1 	.word	0x00403ce1

00401360 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401360:	b570      	push	{r4, r5, r6, lr}
  401362:	b082      	sub	sp, #8
  401364:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401366:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401368:	b174      	cbz	r4, 401388 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40136a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40136c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40136e:	429a      	cmp	r2, r3
  401370:	d315      	bcc.n	40139e <prvNotifyQueueSetContainer+0x3e>
  401372:	f04f 0380 	mov.w	r3, #128	; 0x80
  401376:	b672      	cpsid	i
  401378:	f383 8811 	msr	BASEPRI, r3
  40137c:	f3bf 8f6f 	isb	sy
  401380:	f3bf 8f4f 	dsb	sy
  401384:	b662      	cpsie	i
  401386:	e7fe      	b.n	401386 <prvNotifyQueueSetContainer+0x26>
  401388:	f04f 0380 	mov.w	r3, #128	; 0x80
  40138c:	b672      	cpsid	i
  40138e:	f383 8811 	msr	BASEPRI, r3
  401392:	f3bf 8f6f 	isb	sy
  401396:	f3bf 8f4f 	dsb	sy
  40139a:	b662      	cpsie	i
  40139c:	e7fe      	b.n	40139c <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40139e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4013a0:	4293      	cmp	r3, r2
  4013a2:	d803      	bhi.n	4013ac <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  4013a4:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4013a6:	4630      	mov	r0, r6
  4013a8:	b002      	add	sp, #8
  4013aa:	bd70      	pop	{r4, r5, r6, pc}
  4013ac:	460a      	mov	r2, r1
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  4013ae:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  4013b2:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4013b4:	a901      	add	r1, sp, #4
  4013b6:	4620      	mov	r0, r4
  4013b8:	4b0a      	ldr	r3, [pc, #40]	; (4013e4 <prvNotifyQueueSetContainer+0x84>)
  4013ba:	4798      	blx	r3
  4013bc:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
  4013be:	f1b5 3fff 	cmp.w	r5, #4294967295
  4013c2:	d10a      	bne.n	4013da <prvNotifyQueueSetContainer+0x7a>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4013c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4013c6:	2b00      	cmp	r3, #0
  4013c8:	d0ed      	beq.n	4013a6 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4013ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4013ce:	4b06      	ldr	r3, [pc, #24]	; (4013e8 <prvNotifyQueueSetContainer+0x88>)
  4013d0:	4798      	blx	r3
  4013d2:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4013d4:	bf18      	it	ne
  4013d6:	2601      	movne	r6, #1
  4013d8:	e7e5      	b.n	4013a6 <prvNotifyQueueSetContainer+0x46>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  4013da:	1c6b      	adds	r3, r5, #1
  4013dc:	b25b      	sxtb	r3, r3
  4013de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  4013e2:	e7e0      	b.n	4013a6 <prvNotifyQueueSetContainer+0x46>
  4013e4:	004012e5 	.word	0x004012e5
  4013e8:	004025b9 	.word	0x004025b9

004013ec <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4013ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4013ee:	b172      	cbz	r2, 40140e <prvCopyDataFromQueue+0x22>
{
  4013f0:	b510      	push	{r4, lr}
  4013f2:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4013f4:	68c4      	ldr	r4, [r0, #12]
  4013f6:	4414      	add	r4, r2
  4013f8:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4013fa:	6840      	ldr	r0, [r0, #4]
  4013fc:	4284      	cmp	r4, r0
  4013fe:	d301      	bcc.n	401404 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401400:	6818      	ldr	r0, [r3, #0]
  401402:	60d8      	str	r0, [r3, #12]
  401404:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401406:	68d9      	ldr	r1, [r3, #12]
  401408:	4b01      	ldr	r3, [pc, #4]	; (401410 <prvCopyDataFromQueue+0x24>)
  40140a:	4798      	blx	r3
  40140c:	bd10      	pop	{r4, pc}
  40140e:	4770      	bx	lr
  401410:	00403ce1 	.word	0x00403ce1

00401414 <prvUnlockQueue>:
{
  401414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401418:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  40141a:	4b23      	ldr	r3, [pc, #140]	; (4014a8 <prvUnlockQueue+0x94>)
  40141c:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
  40141e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  401422:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  401424:	2c00      	cmp	r4, #0
  401426:	dd19      	ble.n	40145c <prvUnlockQueue+0x48>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  401428:	4e20      	ldr	r6, [pc, #128]	; (4014ac <prvUnlockQueue+0x98>)
						vTaskMissedYield();
  40142a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4014b8 <prvUnlockQueue+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40142e:	4f20      	ldr	r7, [pc, #128]	; (4014b0 <prvUnlockQueue+0x9c>)
  401430:	e008      	b.n	401444 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401432:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  401434:	b193      	cbz	r3, 40145c <prvUnlockQueue+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401436:	f105 0024 	add.w	r0, r5, #36	; 0x24
  40143a:	47b8      	blx	r7
  40143c:	b960      	cbnz	r0, 401458 <prvUnlockQueue+0x44>
  40143e:	3c01      	subs	r4, #1
  401440:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  401442:	b15c      	cbz	r4, 40145c <prvUnlockQueue+0x48>
				if( pxQueue->pxQueueSetContainer != NULL )
  401444:	6cab      	ldr	r3, [r5, #72]	; 0x48
  401446:	2b00      	cmp	r3, #0
  401448:	d0f3      	beq.n	401432 <prvUnlockQueue+0x1e>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  40144a:	2100      	movs	r1, #0
  40144c:	4628      	mov	r0, r5
  40144e:	47b0      	blx	r6
  401450:	2800      	cmp	r0, #0
  401452:	d0f4      	beq.n	40143e <prvUnlockQueue+0x2a>
						vTaskMissedYield();
  401454:	47c0      	blx	r8
  401456:	e7f2      	b.n	40143e <prvUnlockQueue+0x2a>
							vTaskMissedYield();
  401458:	47c0      	blx	r8
  40145a:	e7f0      	b.n	40143e <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
  40145c:	23ff      	movs	r3, #255	; 0xff
  40145e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
  401462:	4b14      	ldr	r3, [pc, #80]	; (4014b4 <prvUnlockQueue+0xa0>)
  401464:	4798      	blx	r3
	taskENTER_CRITICAL();
  401466:	4b10      	ldr	r3, [pc, #64]	; (4014a8 <prvUnlockQueue+0x94>)
  401468:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
  40146a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  40146e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  401470:	2c00      	cmp	r4, #0
  401472:	dd12      	ble.n	40149a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401474:	692b      	ldr	r3, [r5, #16]
  401476:	b183      	cbz	r3, 40149a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401478:	f105 0710 	add.w	r7, r5, #16
  40147c:	4e0c      	ldr	r6, [pc, #48]	; (4014b0 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  40147e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4014b8 <prvUnlockQueue+0xa4>
  401482:	e004      	b.n	40148e <prvUnlockQueue+0x7a>
  401484:	3c01      	subs	r4, #1
  401486:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  401488:	b13c      	cbz	r4, 40149a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40148a:	692b      	ldr	r3, [r5, #16]
  40148c:	b12b      	cbz	r3, 40149a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40148e:	4638      	mov	r0, r7
  401490:	47b0      	blx	r6
  401492:	2800      	cmp	r0, #0
  401494:	d0f6      	beq.n	401484 <prvUnlockQueue+0x70>
					vTaskMissedYield();
  401496:	47c0      	blx	r8
  401498:	e7f4      	b.n	401484 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
  40149a:	23ff      	movs	r3, #255	; 0xff
  40149c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
  4014a0:	4b04      	ldr	r3, [pc, #16]	; (4014b4 <prvUnlockQueue+0xa0>)
  4014a2:	4798      	blx	r3
  4014a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014a8:	00400fe5 	.word	0x00400fe5
  4014ac:	00401361 	.word	0x00401361
  4014b0:	004025b9 	.word	0x004025b9
  4014b4:	00401031 	.word	0x00401031
  4014b8:	004026fd 	.word	0x004026fd

004014bc <xQueueGenericReset>:
{
  4014bc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  4014be:	b330      	cbz	r0, 40150e <xQueueGenericReset+0x52>
  4014c0:	4604      	mov	r4, r0
  4014c2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4014c4:	4b1d      	ldr	r3, [pc, #116]	; (40153c <xQueueGenericReset+0x80>)
  4014c6:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4014c8:	6822      	ldr	r2, [r4, #0]
  4014ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4014cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4014ce:	fb03 f301 	mul.w	r3, r3, r1
  4014d2:	18d0      	adds	r0, r2, r3
  4014d4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4014d6:	2000      	movs	r0, #0
  4014d8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4014da:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4014dc:	1a5b      	subs	r3, r3, r1
  4014de:	4413      	add	r3, r2
  4014e0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  4014e2:	23ff      	movs	r3, #255	; 0xff
  4014e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  4014e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  4014ec:	b9d5      	cbnz	r5, 401524 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4014ee:	6923      	ldr	r3, [r4, #16]
  4014f0:	b1fb      	cbz	r3, 401532 <xQueueGenericReset+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4014f2:	f104 0010 	add.w	r0, r4, #16
  4014f6:	4b12      	ldr	r3, [pc, #72]	; (401540 <xQueueGenericReset+0x84>)
  4014f8:	4798      	blx	r3
  4014fa:	b1d0      	cbz	r0, 401532 <xQueueGenericReset+0x76>
					queueYIELD_IF_USING_PREEMPTION();
  4014fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401500:	4b10      	ldr	r3, [pc, #64]	; (401544 <xQueueGenericReset+0x88>)
  401502:	601a      	str	r2, [r3, #0]
  401504:	f3bf 8f4f 	dsb	sy
  401508:	f3bf 8f6f 	isb	sy
  40150c:	e011      	b.n	401532 <xQueueGenericReset+0x76>
  40150e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401512:	b672      	cpsid	i
  401514:	f383 8811 	msr	BASEPRI, r3
  401518:	f3bf 8f6f 	isb	sy
  40151c:	f3bf 8f4f 	dsb	sy
  401520:	b662      	cpsie	i
  401522:	e7fe      	b.n	401522 <xQueueGenericReset+0x66>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401524:	f104 0010 	add.w	r0, r4, #16
  401528:	4d07      	ldr	r5, [pc, #28]	; (401548 <xQueueGenericReset+0x8c>)
  40152a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  40152c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401530:	47a8      	blx	r5
	taskEXIT_CRITICAL();
  401532:	4b06      	ldr	r3, [pc, #24]	; (40154c <xQueueGenericReset+0x90>)
  401534:	4798      	blx	r3
}
  401536:	2001      	movs	r0, #1
  401538:	bd38      	pop	{r3, r4, r5, pc}
  40153a:	bf00      	nop
  40153c:	00400fe5 	.word	0x00400fe5
  401540:	004025b9 	.word	0x004025b9
  401544:	e000ed04 	.word	0xe000ed04
  401548:	00400e81 	.word	0x00400e81
  40154c:	00401031 	.word	0x00401031

00401550 <xQueueGenericCreate>:
	{
  401550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401552:	b950      	cbnz	r0, 40156a <xQueueGenericCreate+0x1a>
  401554:	f04f 0380 	mov.w	r3, #128	; 0x80
  401558:	b672      	cpsid	i
  40155a:	f383 8811 	msr	BASEPRI, r3
  40155e:	f3bf 8f6f 	isb	sy
  401562:	f3bf 8f4f 	dsb	sy
  401566:	b662      	cpsie	i
  401568:	e7fe      	b.n	401568 <xQueueGenericCreate+0x18>
  40156a:	4606      	mov	r6, r0
  40156c:	4617      	mov	r7, r2
  40156e:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401570:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401574:	3054      	adds	r0, #84	; 0x54
  401576:	4b0b      	ldr	r3, [pc, #44]	; (4015a4 <xQueueGenericCreate+0x54>)
  401578:	4798      	blx	r3
		if( pxNewQueue != NULL )
  40157a:	4604      	mov	r4, r0
  40157c:	b178      	cbz	r0, 40159e <xQueueGenericCreate+0x4e>
	if( uxItemSize == ( UBaseType_t ) 0 )
  40157e:	b11d      	cbz	r5, 401588 <xQueueGenericCreate+0x38>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401580:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  401584:	6003      	str	r3, [r0, #0]
  401586:	e000      	b.n	40158a <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401588:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
  40158a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  40158c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40158e:	2101      	movs	r1, #1
  401590:	4620      	mov	r0, r4
  401592:	4b05      	ldr	r3, [pc, #20]	; (4015a8 <xQueueGenericCreate+0x58>)
  401594:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
  401596:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
  40159a:	2300      	movs	r3, #0
  40159c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
  40159e:	4620      	mov	r0, r4
  4015a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4015a2:	bf00      	nop
  4015a4:	00401271 	.word	0x00401271
  4015a8:	004014bd 	.word	0x004014bd

004015ac <xQueueGenericSend>:
{
  4015ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4015b0:	b085      	sub	sp, #20
  4015b2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4015b4:	b1b8      	cbz	r0, 4015e6 <xQueueGenericSend+0x3a>
  4015b6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4015b8:	b301      	cbz	r1, 4015fc <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4015ba:	2b02      	cmp	r3, #2
  4015bc:	d02c      	beq.n	401618 <xQueueGenericSend+0x6c>
  4015be:	461e      	mov	r6, r3
  4015c0:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4015c2:	4b69      	ldr	r3, [pc, #420]	; (401768 <xQueueGenericSend+0x1bc>)
  4015c4:	4798      	blx	r3
  4015c6:	2800      	cmp	r0, #0
  4015c8:	d134      	bne.n	401634 <xQueueGenericSend+0x88>
  4015ca:	9b01      	ldr	r3, [sp, #4]
  4015cc:	2b00      	cmp	r3, #0
  4015ce:	d039      	beq.n	401644 <xQueueGenericSend+0x98>
  4015d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015d4:	b672      	cpsid	i
  4015d6:	f383 8811 	msr	BASEPRI, r3
  4015da:	f3bf 8f6f 	isb	sy
  4015de:	f3bf 8f4f 	dsb	sy
  4015e2:	b662      	cpsie	i
  4015e4:	e7fe      	b.n	4015e4 <xQueueGenericSend+0x38>
  4015e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015ea:	b672      	cpsid	i
  4015ec:	f383 8811 	msr	BASEPRI, r3
  4015f0:	f3bf 8f6f 	isb	sy
  4015f4:	f3bf 8f4f 	dsb	sy
  4015f8:	b662      	cpsie	i
  4015fa:	e7fe      	b.n	4015fa <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4015fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4015fe:	2a00      	cmp	r2, #0
  401600:	d0db      	beq.n	4015ba <xQueueGenericSend+0xe>
  401602:	f04f 0380 	mov.w	r3, #128	; 0x80
  401606:	b672      	cpsid	i
  401608:	f383 8811 	msr	BASEPRI, r3
  40160c:	f3bf 8f6f 	isb	sy
  401610:	f3bf 8f4f 	dsb	sy
  401614:	b662      	cpsie	i
  401616:	e7fe      	b.n	401616 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401618:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  40161a:	2a01      	cmp	r2, #1
  40161c:	d0cf      	beq.n	4015be <xQueueGenericSend+0x12>
  40161e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401622:	b672      	cpsid	i
  401624:	f383 8811 	msr	BASEPRI, r3
  401628:	f3bf 8f6f 	isb	sy
  40162c:	f3bf 8f4f 	dsb	sy
  401630:	b662      	cpsie	i
  401632:	e7fe      	b.n	401632 <xQueueGenericSend+0x86>
  401634:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
  401636:	f8df 815c 	ldr.w	r8, [pc, #348]	; 401794 <xQueueGenericSend+0x1e8>
					vTaskInternalSetTimeOutState( &xTimeOut );
  40163a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 401798 <xQueueGenericSend+0x1ec>
					portYIELD_WITHIN_API();
  40163e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 401774 <xQueueGenericSend+0x1c8>
  401642:	e041      	b.n	4016c8 <xQueueGenericSend+0x11c>
  401644:	2500      	movs	r5, #0
  401646:	e7f6      	b.n	401636 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401648:	4632      	mov	r2, r6
  40164a:	4639      	mov	r1, r7
  40164c:	4620      	mov	r0, r4
  40164e:	4b47      	ldr	r3, [pc, #284]	; (40176c <xQueueGenericSend+0x1c0>)
  401650:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401652:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401654:	b193      	cbz	r3, 40167c <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  401656:	4631      	mov	r1, r6
  401658:	4620      	mov	r0, r4
  40165a:	4b45      	ldr	r3, [pc, #276]	; (401770 <xQueueGenericSend+0x1c4>)
  40165c:	4798      	blx	r3
  40165e:	b138      	cbz	r0, 401670 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401664:	4b43      	ldr	r3, [pc, #268]	; (401774 <xQueueGenericSend+0x1c8>)
  401666:	601a      	str	r2, [r3, #0]
  401668:	f3bf 8f4f 	dsb	sy
  40166c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401670:	4b41      	ldr	r3, [pc, #260]	; (401778 <xQueueGenericSend+0x1cc>)
  401672:	4798      	blx	r3
				return pdPASS;
  401674:	2001      	movs	r0, #1
}
  401676:	b005      	add	sp, #20
  401678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40167c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40167e:	b173      	cbz	r3, 40169e <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401680:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401684:	4b3d      	ldr	r3, [pc, #244]	; (40177c <xQueueGenericSend+0x1d0>)
  401686:	4798      	blx	r3
  401688:	2800      	cmp	r0, #0
  40168a:	d0f1      	beq.n	401670 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  40168c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401690:	4b38      	ldr	r3, [pc, #224]	; (401774 <xQueueGenericSend+0x1c8>)
  401692:	601a      	str	r2, [r3, #0]
  401694:	f3bf 8f4f 	dsb	sy
  401698:	f3bf 8f6f 	isb	sy
  40169c:	e7e8      	b.n	401670 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40169e:	2800      	cmp	r0, #0
  4016a0:	d0e6      	beq.n	401670 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4016a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4016a6:	4b33      	ldr	r3, [pc, #204]	; (401774 <xQueueGenericSend+0x1c8>)
  4016a8:	601a      	str	r2, [r3, #0]
  4016aa:	f3bf 8f4f 	dsb	sy
  4016ae:	f3bf 8f6f 	isb	sy
  4016b2:	e7dd      	b.n	401670 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  4016b4:	4b30      	ldr	r3, [pc, #192]	; (401778 <xQueueGenericSend+0x1cc>)
  4016b6:	4798      	blx	r3
					return errQUEUE_FULL;
  4016b8:	2000      	movs	r0, #0
  4016ba:	e7dc      	b.n	401676 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  4016bc:	4620      	mov	r0, r4
  4016be:	4b30      	ldr	r3, [pc, #192]	; (401780 <xQueueGenericSend+0x1d4>)
  4016c0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4016c2:	4b30      	ldr	r3, [pc, #192]	; (401784 <xQueueGenericSend+0x1d8>)
  4016c4:	4798      	blx	r3
  4016c6:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
  4016c8:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4016ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4016cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4016ce:	429a      	cmp	r2, r3
  4016d0:	d3ba      	bcc.n	401648 <xQueueGenericSend+0x9c>
  4016d2:	2e02      	cmp	r6, #2
  4016d4:	d0b8      	beq.n	401648 <xQueueGenericSend+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
  4016d6:	9b01      	ldr	r3, [sp, #4]
  4016d8:	2b00      	cmp	r3, #0
  4016da:	d0eb      	beq.n	4016b4 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  4016dc:	b90d      	cbnz	r5, 4016e2 <xQueueGenericSend+0x136>
					vTaskInternalSetTimeOutState( &xTimeOut );
  4016de:	a802      	add	r0, sp, #8
  4016e0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4016e2:	4b25      	ldr	r3, [pc, #148]	; (401778 <xQueueGenericSend+0x1cc>)
  4016e4:	4798      	blx	r3
		vTaskSuspendAll();
  4016e6:	4b28      	ldr	r3, [pc, #160]	; (401788 <xQueueGenericSend+0x1dc>)
  4016e8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4016ea:	47c0      	blx	r8
  4016ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4016f0:	b25b      	sxtb	r3, r3
  4016f2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4016f6:	d102      	bne.n	4016fe <xQueueGenericSend+0x152>
  4016f8:	2300      	movs	r3, #0
  4016fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  4016fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401702:	b25b      	sxtb	r3, r3
  401704:	f1b3 3fff 	cmp.w	r3, #4294967295
  401708:	d102      	bne.n	401710 <xQueueGenericSend+0x164>
  40170a:	2300      	movs	r3, #0
  40170c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401710:	4b19      	ldr	r3, [pc, #100]	; (401778 <xQueueGenericSend+0x1cc>)
  401712:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401714:	a901      	add	r1, sp, #4
  401716:	a802      	add	r0, sp, #8
  401718:	4b1c      	ldr	r3, [pc, #112]	; (40178c <xQueueGenericSend+0x1e0>)
  40171a:	4798      	blx	r3
  40171c:	b9e0      	cbnz	r0, 401758 <xQueueGenericSend+0x1ac>
	taskENTER_CRITICAL();
  40171e:	47c0      	blx	r8
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401720:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401724:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401726:	4b14      	ldr	r3, [pc, #80]	; (401778 <xQueueGenericSend+0x1cc>)
  401728:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40172a:	45ab      	cmp	fp, r5
  40172c:	d1c6      	bne.n	4016bc <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40172e:	9901      	ldr	r1, [sp, #4]
  401730:	f104 0010 	add.w	r0, r4, #16
  401734:	4b16      	ldr	r3, [pc, #88]	; (401790 <xQueueGenericSend+0x1e4>)
  401736:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401738:	4620      	mov	r0, r4
  40173a:	4b11      	ldr	r3, [pc, #68]	; (401780 <xQueueGenericSend+0x1d4>)
  40173c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40173e:	4b11      	ldr	r3, [pc, #68]	; (401784 <xQueueGenericSend+0x1d8>)
  401740:	4798      	blx	r3
  401742:	2800      	cmp	r0, #0
  401744:	d1bf      	bne.n	4016c6 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401746:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40174a:	f8c9 3000 	str.w	r3, [r9]
  40174e:	f3bf 8f4f 	dsb	sy
  401752:	f3bf 8f6f 	isb	sy
  401756:	e7b6      	b.n	4016c6 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401758:	4620      	mov	r0, r4
  40175a:	4b09      	ldr	r3, [pc, #36]	; (401780 <xQueueGenericSend+0x1d4>)
  40175c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40175e:	4b09      	ldr	r3, [pc, #36]	; (401784 <xQueueGenericSend+0x1d8>)
  401760:	4798      	blx	r3
			return errQUEUE_FULL;
  401762:	2000      	movs	r0, #0
  401764:	e787      	b.n	401676 <xQueueGenericSend+0xca>
  401766:	bf00      	nop
  401768:	00402709 	.word	0x00402709
  40176c:	004012e5 	.word	0x004012e5
  401770:	00401361 	.word	0x00401361
  401774:	e000ed04 	.word	0xe000ed04
  401778:	00401031 	.word	0x00401031
  40177c:	004025b9 	.word	0x004025b9
  401780:	00401415 	.word	0x00401415
  401784:	004022f1 	.word	0x004022f1
  401788:	0040218d 	.word	0x0040218d
  40178c:	00402669 	.word	0x00402669
  401790:	00402535 	.word	0x00402535
  401794:	00400fe5 	.word	0x00400fe5
  401798:	00402651 	.word	0x00402651

0040179c <xQueueGenericSendFromISR>:
{
  40179c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
  4017a0:	2800      	cmp	r0, #0
  4017a2:	d039      	beq.n	401818 <xQueueGenericSendFromISR+0x7c>
  4017a4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4017a6:	2900      	cmp	r1, #0
  4017a8:	d041      	beq.n	40182e <xQueueGenericSendFromISR+0x92>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4017aa:	2b02      	cmp	r3, #2
  4017ac:	d04d      	beq.n	40184a <xQueueGenericSendFromISR+0xae>
  4017ae:	461f      	mov	r7, r3
  4017b0:	4690      	mov	r8, r2
  4017b2:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4017b4:	4b3a      	ldr	r3, [pc, #232]	; (4018a0 <xQueueGenericSendFromISR+0x104>)
  4017b6:	4798      	blx	r3
	__asm volatile
  4017b8:	f3ef 8611 	mrs	r6, BASEPRI
  4017bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017c0:	b672      	cpsid	i
  4017c2:	f383 8811 	msr	BASEPRI, r3
  4017c6:	f3bf 8f6f 	isb	sy
  4017ca:	f3bf 8f4f 	dsb	sy
  4017ce:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4017d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4017d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4017d4:	429a      	cmp	r2, r3
  4017d6:	d301      	bcc.n	4017dc <xQueueGenericSendFromISR+0x40>
  4017d8:	2f02      	cmp	r7, #2
  4017da:	d158      	bne.n	40188e <xQueueGenericSendFromISR+0xf2>
			const int8_t cTxLock = pxQueue->cTxLock;
  4017dc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  4017e0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4017e2:	463a      	mov	r2, r7
  4017e4:	4649      	mov	r1, r9
  4017e6:	4620      	mov	r0, r4
  4017e8:	4b2e      	ldr	r3, [pc, #184]	; (4018a4 <xQueueGenericSendFromISR+0x108>)
  4017ea:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
  4017ec:	f1b5 3fff 	cmp.w	r5, #4294967295
  4017f0:	d147      	bne.n	401882 <xQueueGenericSendFromISR+0xe6>
					if( pxQueue->pxQueueSetContainer != NULL )
  4017f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4017f4:	2b00      	cmp	r3, #0
  4017f6:	d036      	beq.n	401866 <xQueueGenericSendFromISR+0xca>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  4017f8:	4639      	mov	r1, r7
  4017fa:	4620      	mov	r0, r4
  4017fc:	4b2a      	ldr	r3, [pc, #168]	; (4018a8 <xQueueGenericSendFromISR+0x10c>)
  4017fe:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401800:	f1b8 0f00 	cmp.w	r8, #0
  401804:	d045      	beq.n	401892 <xQueueGenericSendFromISR+0xf6>
  401806:	2800      	cmp	r0, #0
  401808:	d043      	beq.n	401892 <xQueueGenericSendFromISR+0xf6>
								*pxHigherPriorityTaskWoken = pdTRUE;
  40180a:	2001      	movs	r0, #1
  40180c:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
  401810:	f386 8811 	msr	BASEPRI, r6
}
  401814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
  401818:	f04f 0380 	mov.w	r3, #128	; 0x80
  40181c:	b672      	cpsid	i
  40181e:	f383 8811 	msr	BASEPRI, r3
  401822:	f3bf 8f6f 	isb	sy
  401826:	f3bf 8f4f 	dsb	sy
  40182a:	b662      	cpsie	i
  40182c:	e7fe      	b.n	40182c <xQueueGenericSendFromISR+0x90>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40182e:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401830:	2800      	cmp	r0, #0
  401832:	d0ba      	beq.n	4017aa <xQueueGenericSendFromISR+0xe>
  401834:	f04f 0380 	mov.w	r3, #128	; 0x80
  401838:	b672      	cpsid	i
  40183a:	f383 8811 	msr	BASEPRI, r3
  40183e:	f3bf 8f6f 	isb	sy
  401842:	f3bf 8f4f 	dsb	sy
  401846:	b662      	cpsie	i
  401848:	e7fe      	b.n	401848 <xQueueGenericSendFromISR+0xac>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40184a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  40184c:	2801      	cmp	r0, #1
  40184e:	d0ae      	beq.n	4017ae <xQueueGenericSendFromISR+0x12>
  401850:	f04f 0380 	mov.w	r3, #128	; 0x80
  401854:	b672      	cpsid	i
  401856:	f383 8811 	msr	BASEPRI, r3
  40185a:	f3bf 8f6f 	isb	sy
  40185e:	f3bf 8f4f 	dsb	sy
  401862:	b662      	cpsie	i
  401864:	e7fe      	b.n	401864 <xQueueGenericSendFromISR+0xc8>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401866:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401868:	b1ab      	cbz	r3, 401896 <xQueueGenericSendFromISR+0xfa>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40186a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40186e:	4b0f      	ldr	r3, [pc, #60]	; (4018ac <xQueueGenericSendFromISR+0x110>)
  401870:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401872:	f1b8 0f00 	cmp.w	r8, #0
  401876:	d010      	beq.n	40189a <xQueueGenericSendFromISR+0xfe>
  401878:	b178      	cbz	r0, 40189a <xQueueGenericSendFromISR+0xfe>
									*pxHigherPriorityTaskWoken = pdTRUE;
  40187a:	2001      	movs	r0, #1
  40187c:	f8c8 0000 	str.w	r0, [r8]
  401880:	e7c6      	b.n	401810 <xQueueGenericSendFromISR+0x74>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  401882:	1c6b      	adds	r3, r5, #1
  401884:	b25b      	sxtb	r3, r3
  401886:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
  40188a:	2001      	movs	r0, #1
  40188c:	e7c0      	b.n	401810 <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
  40188e:	2000      	movs	r0, #0
  401890:	e7be      	b.n	401810 <xQueueGenericSendFromISR+0x74>
			xReturn = pdPASS;
  401892:	2001      	movs	r0, #1
  401894:	e7bc      	b.n	401810 <xQueueGenericSendFromISR+0x74>
  401896:	2001      	movs	r0, #1
  401898:	e7ba      	b.n	401810 <xQueueGenericSendFromISR+0x74>
  40189a:	2001      	movs	r0, #1
  40189c:	e7b8      	b.n	401810 <xQueueGenericSendFromISR+0x74>
  40189e:	bf00      	nop
  4018a0:	0040120d 	.word	0x0040120d
  4018a4:	004012e5 	.word	0x004012e5
  4018a8:	00401361 	.word	0x00401361
  4018ac:	004025b9 	.word	0x004025b9

004018b0 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  4018b0:	b170      	cbz	r0, 4018d0 <xQueueGiveFromISR+0x20>
{
  4018b2:	b570      	push	{r4, r5, r6, lr}
  4018b4:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  4018b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4018b8:	b1ab      	cbz	r3, 4018e6 <xQueueGiveFromISR+0x36>
  4018ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018be:	b672      	cpsid	i
  4018c0:	f383 8811 	msr	BASEPRI, r3
  4018c4:	f3bf 8f6f 	isb	sy
  4018c8:	f3bf 8f4f 	dsb	sy
  4018cc:	b662      	cpsie	i
  4018ce:	e7fe      	b.n	4018ce <xQueueGiveFromISR+0x1e>
  4018d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018d4:	b672      	cpsid	i
  4018d6:	f383 8811 	msr	BASEPRI, r3
  4018da:	f3bf 8f6f 	isb	sy
  4018de:	f3bf 8f4f 	dsb	sy
  4018e2:	b662      	cpsie	i
  4018e4:	e7fe      	b.n	4018e4 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4018e6:	6803      	ldr	r3, [r0, #0]
  4018e8:	b33b      	cbz	r3, 40193a <xQueueGiveFromISR+0x8a>
  4018ea:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4018ec:	4b26      	ldr	r3, [pc, #152]	; (401988 <xQueueGiveFromISR+0xd8>)
  4018ee:	4798      	blx	r3
	__asm volatile
  4018f0:	f3ef 8511 	mrs	r5, BASEPRI
  4018f4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018f8:	b672      	cpsid	i
  4018fa:	f383 8811 	msr	BASEPRI, r3
  4018fe:	f3bf 8f6f 	isb	sy
  401902:	f3bf 8f4f 	dsb	sy
  401906:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  401908:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
  40190a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40190c:	429a      	cmp	r2, r3
  40190e:	d233      	bcs.n	401978 <xQueueGiveFromISR+0xc8>
			const int8_t cTxLock = pxQueue->cTxLock;
  401910:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401914:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  401916:	3201      	adds	r2, #1
  401918:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
  40191a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40191e:	d125      	bne.n	40196c <xQueueGiveFromISR+0xbc>
					if( pxQueue->pxQueueSetContainer != NULL )
  401920:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401922:	b1c3      	cbz	r3, 401956 <xQueueGiveFromISR+0xa6>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  401924:	2100      	movs	r1, #0
  401926:	4620      	mov	r0, r4
  401928:	4b18      	ldr	r3, [pc, #96]	; (40198c <xQueueGiveFromISR+0xdc>)
  40192a:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  40192c:	b336      	cbz	r6, 40197c <xQueueGiveFromISR+0xcc>
  40192e:	b328      	cbz	r0, 40197c <xQueueGiveFromISR+0xcc>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401930:	2001      	movs	r0, #1
  401932:	6030      	str	r0, [r6, #0]
	__asm volatile
  401934:	f385 8811 	msr	BASEPRI, r5
}
  401938:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  40193a:	6843      	ldr	r3, [r0, #4]
  40193c:	2b00      	cmp	r3, #0
  40193e:	d0d4      	beq.n	4018ea <xQueueGiveFromISR+0x3a>
	__asm volatile
  401940:	f04f 0380 	mov.w	r3, #128	; 0x80
  401944:	b672      	cpsid	i
  401946:	f383 8811 	msr	BASEPRI, r3
  40194a:	f3bf 8f6f 	isb	sy
  40194e:	f3bf 8f4f 	dsb	sy
  401952:	b662      	cpsie	i
  401954:	e7fe      	b.n	401954 <xQueueGiveFromISR+0xa4>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401956:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401958:	b193      	cbz	r3, 401980 <xQueueGiveFromISR+0xd0>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40195a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40195e:	4b0c      	ldr	r3, [pc, #48]	; (401990 <xQueueGiveFromISR+0xe0>)
  401960:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401962:	b17e      	cbz	r6, 401984 <xQueueGiveFromISR+0xd4>
  401964:	b170      	cbz	r0, 401984 <xQueueGiveFromISR+0xd4>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401966:	2001      	movs	r0, #1
  401968:	6030      	str	r0, [r6, #0]
  40196a:	e7e3      	b.n	401934 <xQueueGiveFromISR+0x84>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  40196c:	3301      	adds	r3, #1
  40196e:	b25b      	sxtb	r3, r3
  401970:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
  401974:	2001      	movs	r0, #1
  401976:	e7dd      	b.n	401934 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
  401978:	2000      	movs	r0, #0
  40197a:	e7db      	b.n	401934 <xQueueGiveFromISR+0x84>
			xReturn = pdPASS;
  40197c:	2001      	movs	r0, #1
  40197e:	e7d9      	b.n	401934 <xQueueGiveFromISR+0x84>
  401980:	2001      	movs	r0, #1
  401982:	e7d7      	b.n	401934 <xQueueGiveFromISR+0x84>
  401984:	2001      	movs	r0, #1
  401986:	e7d5      	b.n	401934 <xQueueGiveFromISR+0x84>
  401988:	0040120d 	.word	0x0040120d
  40198c:	00401361 	.word	0x00401361
  401990:	004025b9 	.word	0x004025b9

00401994 <xQueueReceive>:
{
  401994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401998:	b084      	sub	sp, #16
  40199a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
  40199c:	b190      	cbz	r0, 4019c4 <xQueueReceive+0x30>
  40199e:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4019a0:	b1d9      	cbz	r1, 4019da <xQueueReceive+0x46>
  4019a2:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4019a4:	4b54      	ldr	r3, [pc, #336]	; (401af8 <xQueueReceive+0x164>)
  4019a6:	4798      	blx	r3
  4019a8:	bb28      	cbnz	r0, 4019f6 <xQueueReceive+0x62>
  4019aa:	9b01      	ldr	r3, [sp, #4]
  4019ac:	b35b      	cbz	r3, 401a06 <xQueueReceive+0x72>
  4019ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019b2:	b672      	cpsid	i
  4019b4:	f383 8811 	msr	BASEPRI, r3
  4019b8:	f3bf 8f6f 	isb	sy
  4019bc:	f3bf 8f4f 	dsb	sy
  4019c0:	b662      	cpsie	i
  4019c2:	e7fe      	b.n	4019c2 <xQueueReceive+0x2e>
  4019c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019c8:	b672      	cpsid	i
  4019ca:	f383 8811 	msr	BASEPRI, r3
  4019ce:	f3bf 8f6f 	isb	sy
  4019d2:	f3bf 8f4f 	dsb	sy
  4019d6:	b662      	cpsie	i
  4019d8:	e7fe      	b.n	4019d8 <xQueueReceive+0x44>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4019da:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4019dc:	2b00      	cmp	r3, #0
  4019de:	d0e0      	beq.n	4019a2 <xQueueReceive+0xe>
  4019e0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019e4:	b672      	cpsid	i
  4019e6:	f383 8811 	msr	BASEPRI, r3
  4019ea:	f3bf 8f6f 	isb	sy
  4019ee:	f3bf 8f4f 	dsb	sy
  4019f2:	b662      	cpsie	i
  4019f4:	e7fe      	b.n	4019f4 <xQueueReceive+0x60>
  4019f6:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  4019f8:	f8df 8128 	ldr.w	r8, [pc, #296]	; 401b24 <xQueueReceive+0x190>
					vTaskInternalSetTimeOutState( &xTimeOut );
  4019fc:	f8df a128 	ldr.w	sl, [pc, #296]	; 401b28 <xQueueReceive+0x194>
					portYIELD_WITHIN_API();
  401a00:	f8df 9100 	ldr.w	r9, [pc, #256]	; 401b04 <xQueueReceive+0x170>
  401a04:	e031      	b.n	401a6a <xQueueReceive+0xd6>
  401a06:	2700      	movs	r7, #0
  401a08:	e7f6      	b.n	4019f8 <xQueueReceive+0x64>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401a0a:	4631      	mov	r1, r6
  401a0c:	4620      	mov	r0, r4
  401a0e:	4b3b      	ldr	r3, [pc, #236]	; (401afc <xQueueReceive+0x168>)
  401a10:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  401a12:	3d01      	subs	r5, #1
  401a14:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401a16:	6923      	ldr	r3, [r4, #16]
  401a18:	b163      	cbz	r3, 401a34 <xQueueReceive+0xa0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401a1a:	f104 0010 	add.w	r0, r4, #16
  401a1e:	4b38      	ldr	r3, [pc, #224]	; (401b00 <xQueueReceive+0x16c>)
  401a20:	4798      	blx	r3
  401a22:	b138      	cbz	r0, 401a34 <xQueueReceive+0xa0>
						queueYIELD_IF_USING_PREEMPTION();
  401a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401a28:	4b36      	ldr	r3, [pc, #216]	; (401b04 <xQueueReceive+0x170>)
  401a2a:	601a      	str	r2, [r3, #0]
  401a2c:	f3bf 8f4f 	dsb	sy
  401a30:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401a34:	4b34      	ldr	r3, [pc, #208]	; (401b08 <xQueueReceive+0x174>)
  401a36:	4798      	blx	r3
				return pdPASS;
  401a38:	2001      	movs	r0, #1
}
  401a3a:	b004      	add	sp, #16
  401a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
  401a40:	4b31      	ldr	r3, [pc, #196]	; (401b08 <xQueueReceive+0x174>)
  401a42:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401a44:	2000      	movs	r0, #0
  401a46:	e7f8      	b.n	401a3a <xQueueReceive+0xa6>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401a48:	a802      	add	r0, sp, #8
  401a4a:	47d0      	blx	sl
  401a4c:	e016      	b.n	401a7c <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
  401a4e:	2300      	movs	r3, #0
  401a50:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401a54:	e01d      	b.n	401a92 <xQueueReceive+0xfe>
  401a56:	2300      	movs	r3, #0
  401a58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401a5c:	e01f      	b.n	401a9e <xQueueReceive+0x10a>
				prvUnlockQueue( pxQueue );
  401a5e:	4620      	mov	r0, r4
  401a60:	4b2a      	ldr	r3, [pc, #168]	; (401b0c <xQueueReceive+0x178>)
  401a62:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401a64:	4b2a      	ldr	r3, [pc, #168]	; (401b10 <xQueueReceive+0x17c>)
  401a66:	4798      	blx	r3
  401a68:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401a6a:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  401a6c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  401a6e:	2d00      	cmp	r5, #0
  401a70:	d1cb      	bne.n	401a0a <xQueueReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  401a72:	9b01      	ldr	r3, [sp, #4]
  401a74:	2b00      	cmp	r3, #0
  401a76:	d0e3      	beq.n	401a40 <xQueueReceive+0xac>
				else if( xEntryTimeSet == pdFALSE )
  401a78:	2f00      	cmp	r7, #0
  401a7a:	d0e5      	beq.n	401a48 <xQueueReceive+0xb4>
		taskEXIT_CRITICAL();
  401a7c:	4b22      	ldr	r3, [pc, #136]	; (401b08 <xQueueReceive+0x174>)
  401a7e:	4798      	blx	r3
		vTaskSuspendAll();
  401a80:	4b24      	ldr	r3, [pc, #144]	; (401b14 <xQueueReceive+0x180>)
  401a82:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401a84:	47c0      	blx	r8
  401a86:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401a8a:	b25b      	sxtb	r3, r3
  401a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401a90:	d0dd      	beq.n	401a4e <xQueueReceive+0xba>
  401a92:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401a96:	b25b      	sxtb	r3, r3
  401a98:	f1b3 3fff 	cmp.w	r3, #4294967295
  401a9c:	d0db      	beq.n	401a56 <xQueueReceive+0xc2>
  401a9e:	4b1a      	ldr	r3, [pc, #104]	; (401b08 <xQueueReceive+0x174>)
  401aa0:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401aa2:	a901      	add	r1, sp, #4
  401aa4:	a802      	add	r0, sp, #8
  401aa6:	4b1c      	ldr	r3, [pc, #112]	; (401b18 <xQueueReceive+0x184>)
  401aa8:	4798      	blx	r3
  401aaa:	b9c8      	cbnz	r0, 401ae0 <xQueueReceive+0x14c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401aac:	4620      	mov	r0, r4
  401aae:	4b1b      	ldr	r3, [pc, #108]	; (401b1c <xQueueReceive+0x188>)
  401ab0:	4798      	blx	r3
  401ab2:	2800      	cmp	r0, #0
  401ab4:	d0d3      	beq.n	401a5e <xQueueReceive+0xca>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401ab6:	9901      	ldr	r1, [sp, #4]
  401ab8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401abc:	4b18      	ldr	r3, [pc, #96]	; (401b20 <xQueueReceive+0x18c>)
  401abe:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401ac0:	4620      	mov	r0, r4
  401ac2:	4b12      	ldr	r3, [pc, #72]	; (401b0c <xQueueReceive+0x178>)
  401ac4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401ac6:	4b12      	ldr	r3, [pc, #72]	; (401b10 <xQueueReceive+0x17c>)
  401ac8:	4798      	blx	r3
  401aca:	2800      	cmp	r0, #0
  401acc:	d1cc      	bne.n	401a68 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
  401ace:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401ad2:	f8c9 3000 	str.w	r3, [r9]
  401ad6:	f3bf 8f4f 	dsb	sy
  401ada:	f3bf 8f6f 	isb	sy
  401ade:	e7c3      	b.n	401a68 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
  401ae0:	4620      	mov	r0, r4
  401ae2:	4b0a      	ldr	r3, [pc, #40]	; (401b0c <xQueueReceive+0x178>)
  401ae4:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401ae6:	4b0a      	ldr	r3, [pc, #40]	; (401b10 <xQueueReceive+0x17c>)
  401ae8:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401aea:	4620      	mov	r0, r4
  401aec:	4b0b      	ldr	r3, [pc, #44]	; (401b1c <xQueueReceive+0x188>)
  401aee:	4798      	blx	r3
  401af0:	2800      	cmp	r0, #0
  401af2:	d0b9      	beq.n	401a68 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
  401af4:	2000      	movs	r0, #0
  401af6:	e7a0      	b.n	401a3a <xQueueReceive+0xa6>
  401af8:	00402709 	.word	0x00402709
  401afc:	004013ed 	.word	0x004013ed
  401b00:	004025b9 	.word	0x004025b9
  401b04:	e000ed04 	.word	0xe000ed04
  401b08:	00401031 	.word	0x00401031
  401b0c:	00401415 	.word	0x00401415
  401b10:	004022f1 	.word	0x004022f1
  401b14:	0040218d 	.word	0x0040218d
  401b18:	00402669 	.word	0x00402669
  401b1c:	004012c5 	.word	0x004012c5
  401b20:	00402535 	.word	0x00402535
  401b24:	00400fe5 	.word	0x00400fe5
  401b28:	00402651 	.word	0x00402651

00401b2c <xQueueSemaphoreTake>:
{
  401b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401b30:	b085      	sub	sp, #20
  401b32:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
  401b34:	b168      	cbz	r0, 401b52 <xQueueSemaphoreTake+0x26>
  401b36:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  401b38:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401b3a:	b1ab      	cbz	r3, 401b68 <xQueueSemaphoreTake+0x3c>
  401b3c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b40:	b672      	cpsid	i
  401b42:	f383 8811 	msr	BASEPRI, r3
  401b46:	f3bf 8f6f 	isb	sy
  401b4a:	f3bf 8f4f 	dsb	sy
  401b4e:	b662      	cpsie	i
  401b50:	e7fe      	b.n	401b50 <xQueueSemaphoreTake+0x24>
  401b52:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b56:	b672      	cpsid	i
  401b58:	f383 8811 	msr	BASEPRI, r3
  401b5c:	f3bf 8f6f 	isb	sy
  401b60:	f3bf 8f4f 	dsb	sy
  401b64:	b662      	cpsie	i
  401b66:	e7fe      	b.n	401b66 <xQueueSemaphoreTake+0x3a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401b68:	4b5e      	ldr	r3, [pc, #376]	; (401ce4 <xQueueSemaphoreTake+0x1b8>)
  401b6a:	4798      	blx	r3
  401b6c:	b960      	cbnz	r0, 401b88 <xQueueSemaphoreTake+0x5c>
  401b6e:	9b01      	ldr	r3, [sp, #4]
  401b70:	b193      	cbz	r3, 401b98 <xQueueSemaphoreTake+0x6c>
  401b72:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b76:	b672      	cpsid	i
  401b78:	f383 8811 	msr	BASEPRI, r3
  401b7c:	f3bf 8f6f 	isb	sy
  401b80:	f3bf 8f4f 	dsb	sy
  401b84:	b662      	cpsie	i
  401b86:	e7fe      	b.n	401b86 <xQueueSemaphoreTake+0x5a>
  401b88:	2500      	movs	r5, #0
  401b8a:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
  401b8c:	4e56      	ldr	r6, [pc, #344]	; (401ce8 <xQueueSemaphoreTake+0x1bc>)
					vTaskInternalSetTimeOutState( &xTimeOut );
  401b8e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 401d1c <xQueueSemaphoreTake+0x1f0>
					portYIELD_WITHIN_API();
  401b92:	f8df 8160 	ldr.w	r8, [pc, #352]	; 401cf4 <xQueueSemaphoreTake+0x1c8>
  401b96:	e052      	b.n	401c3e <xQueueSemaphoreTake+0x112>
  401b98:	2500      	movs	r5, #0
  401b9a:	462f      	mov	r7, r5
  401b9c:	e7f6      	b.n	401b8c <xQueueSemaphoreTake+0x60>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
  401b9e:	3b01      	subs	r3, #1
  401ba0:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401ba2:	6823      	ldr	r3, [r4, #0]
  401ba4:	b913      	cbnz	r3, 401bac <xQueueSemaphoreTake+0x80>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401ba6:	4b51      	ldr	r3, [pc, #324]	; (401cec <xQueueSemaphoreTake+0x1c0>)
  401ba8:	4798      	blx	r3
  401baa:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401bac:	6923      	ldr	r3, [r4, #16]
  401bae:	b163      	cbz	r3, 401bca <xQueueSemaphoreTake+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401bb0:	f104 0010 	add.w	r0, r4, #16
  401bb4:	4b4e      	ldr	r3, [pc, #312]	; (401cf0 <xQueueSemaphoreTake+0x1c4>)
  401bb6:	4798      	blx	r3
  401bb8:	b138      	cbz	r0, 401bca <xQueueSemaphoreTake+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
  401bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401bbe:	4b4d      	ldr	r3, [pc, #308]	; (401cf4 <xQueueSemaphoreTake+0x1c8>)
  401bc0:	601a      	str	r2, [r3, #0]
  401bc2:	f3bf 8f4f 	dsb	sy
  401bc6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401bca:	4b4b      	ldr	r3, [pc, #300]	; (401cf8 <xQueueSemaphoreTake+0x1cc>)
  401bcc:	4798      	blx	r3
				return pdPASS;
  401bce:	2501      	movs	r5, #1
}
  401bd0:	4628      	mov	r0, r5
  401bd2:	b005      	add	sp, #20
  401bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
  401bd8:	b155      	cbz	r5, 401bf0 <xQueueSemaphoreTake+0xc4>
  401bda:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bde:	b672      	cpsid	i
  401be0:	f383 8811 	msr	BASEPRI, r3
  401be4:	f3bf 8f6f 	isb	sy
  401be8:	f3bf 8f4f 	dsb	sy
  401bec:	b662      	cpsie	i
  401bee:	e7fe      	b.n	401bee <xQueueSemaphoreTake+0xc2>
					taskEXIT_CRITICAL();
  401bf0:	4b41      	ldr	r3, [pc, #260]	; (401cf8 <xQueueSemaphoreTake+0x1cc>)
  401bf2:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401bf4:	e7ec      	b.n	401bd0 <xQueueSemaphoreTake+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401bf6:	a802      	add	r0, sp, #8
  401bf8:	47c8      	blx	r9
  401bfa:	e029      	b.n	401c50 <xQueueSemaphoreTake+0x124>
		prvLockQueue( pxQueue );
  401bfc:	2300      	movs	r3, #0
  401bfe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401c02:	e030      	b.n	401c66 <xQueueSemaphoreTake+0x13a>
  401c04:	2300      	movs	r3, #0
  401c06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401c0a:	e032      	b.n	401c72 <xQueueSemaphoreTake+0x146>
						taskENTER_CRITICAL();
  401c0c:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401c0e:	6860      	ldr	r0, [r4, #4]
  401c10:	4b3a      	ldr	r3, [pc, #232]	; (401cfc <xQueueSemaphoreTake+0x1d0>)
  401c12:	4798      	blx	r3
  401c14:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
  401c16:	4b38      	ldr	r3, [pc, #224]	; (401cf8 <xQueueSemaphoreTake+0x1cc>)
  401c18:	4798      	blx	r3
  401c1a:	e03a      	b.n	401c92 <xQueueSemaphoreTake+0x166>
				prvUnlockQueue( pxQueue );
  401c1c:	4620      	mov	r0, r4
  401c1e:	4b38      	ldr	r3, [pc, #224]	; (401d00 <xQueueSemaphoreTake+0x1d4>)
  401c20:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401c22:	4b38      	ldr	r3, [pc, #224]	; (401d04 <xQueueSemaphoreTake+0x1d8>)
  401c24:	4798      	blx	r3
  401c26:	e009      	b.n	401c3c <xQueueSemaphoreTake+0x110>
			prvUnlockQueue( pxQueue );
  401c28:	4620      	mov	r0, r4
  401c2a:	4b35      	ldr	r3, [pc, #212]	; (401d00 <xQueueSemaphoreTake+0x1d4>)
  401c2c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401c2e:	4b35      	ldr	r3, [pc, #212]	; (401d04 <xQueueSemaphoreTake+0x1d8>)
  401c30:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401c32:	4620      	mov	r0, r4
  401c34:	4b34      	ldr	r3, [pc, #208]	; (401d08 <xQueueSemaphoreTake+0x1dc>)
  401c36:	4798      	blx	r3
  401c38:	2800      	cmp	r0, #0
  401c3a:	d13f      	bne.n	401cbc <xQueueSemaphoreTake+0x190>
  401c3c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401c3e:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
  401c40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
  401c42:	2b00      	cmp	r3, #0
  401c44:	d1ab      	bne.n	401b9e <xQueueSemaphoreTake+0x72>
				if( xTicksToWait == ( TickType_t ) 0 )
  401c46:	9b01      	ldr	r3, [sp, #4]
  401c48:	2b00      	cmp	r3, #0
  401c4a:	d0c5      	beq.n	401bd8 <xQueueSemaphoreTake+0xac>
				else if( xEntryTimeSet == pdFALSE )
  401c4c:	2f00      	cmp	r7, #0
  401c4e:	d0d2      	beq.n	401bf6 <xQueueSemaphoreTake+0xca>
		taskEXIT_CRITICAL();
  401c50:	4b29      	ldr	r3, [pc, #164]	; (401cf8 <xQueueSemaphoreTake+0x1cc>)
  401c52:	4798      	blx	r3
		vTaskSuspendAll();
  401c54:	4b2d      	ldr	r3, [pc, #180]	; (401d0c <xQueueSemaphoreTake+0x1e0>)
  401c56:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401c58:	47b0      	blx	r6
  401c5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401c5e:	b25b      	sxtb	r3, r3
  401c60:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c64:	d0ca      	beq.n	401bfc <xQueueSemaphoreTake+0xd0>
  401c66:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401c6a:	b25b      	sxtb	r3, r3
  401c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c70:	d0c8      	beq.n	401c04 <xQueueSemaphoreTake+0xd8>
  401c72:	4b21      	ldr	r3, [pc, #132]	; (401cf8 <xQueueSemaphoreTake+0x1cc>)
  401c74:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401c76:	a901      	add	r1, sp, #4
  401c78:	a802      	add	r0, sp, #8
  401c7a:	4b25      	ldr	r3, [pc, #148]	; (401d10 <xQueueSemaphoreTake+0x1e4>)
  401c7c:	4798      	blx	r3
  401c7e:	2800      	cmp	r0, #0
  401c80:	d1d2      	bne.n	401c28 <xQueueSemaphoreTake+0xfc>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401c82:	4620      	mov	r0, r4
  401c84:	4b20      	ldr	r3, [pc, #128]	; (401d08 <xQueueSemaphoreTake+0x1dc>)
  401c86:	4798      	blx	r3
  401c88:	2800      	cmp	r0, #0
  401c8a:	d0c7      	beq.n	401c1c <xQueueSemaphoreTake+0xf0>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401c8c:	6823      	ldr	r3, [r4, #0]
  401c8e:	2b00      	cmp	r3, #0
  401c90:	d0bc      	beq.n	401c0c <xQueueSemaphoreTake+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401c92:	9901      	ldr	r1, [sp, #4]
  401c94:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c98:	4b1e      	ldr	r3, [pc, #120]	; (401d14 <xQueueSemaphoreTake+0x1e8>)
  401c9a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401c9c:	4620      	mov	r0, r4
  401c9e:	4b18      	ldr	r3, [pc, #96]	; (401d00 <xQueueSemaphoreTake+0x1d4>)
  401ca0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401ca2:	4b18      	ldr	r3, [pc, #96]	; (401d04 <xQueueSemaphoreTake+0x1d8>)
  401ca4:	4798      	blx	r3
  401ca6:	2800      	cmp	r0, #0
  401ca8:	d1c8      	bne.n	401c3c <xQueueSemaphoreTake+0x110>
					portYIELD_WITHIN_API();
  401caa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401cae:	f8c8 3000 	str.w	r3, [r8]
  401cb2:	f3bf 8f4f 	dsb	sy
  401cb6:	f3bf 8f6f 	isb	sy
  401cba:	e7bf      	b.n	401c3c <xQueueSemaphoreTake+0x110>
					if( xInheritanceOccurred != pdFALSE )
  401cbc:	2d00      	cmp	r5, #0
  401cbe:	d087      	beq.n	401bd0 <xQueueSemaphoreTake+0xa4>
						taskENTER_CRITICAL();
  401cc0:	4b09      	ldr	r3, [pc, #36]	; (401ce8 <xQueueSemaphoreTake+0x1bc>)
  401cc2:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
  401cc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401cc6:	b153      	cbz	r3, 401cde <xQueueSemaphoreTake+0x1b2>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
  401cc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401cca:	6819      	ldr	r1, [r3, #0]
  401ccc:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
  401cd0:	6860      	ldr	r0, [r4, #4]
  401cd2:	4b11      	ldr	r3, [pc, #68]	; (401d18 <xQueueSemaphoreTake+0x1ec>)
  401cd4:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401cd6:	4b08      	ldr	r3, [pc, #32]	; (401cf8 <xQueueSemaphoreTake+0x1cc>)
  401cd8:	4798      	blx	r3
				return errQUEUE_EMPTY;
  401cda:	2500      	movs	r5, #0
  401cdc:	e778      	b.n	401bd0 <xQueueSemaphoreTake+0xa4>
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  401cde:	2100      	movs	r1, #0
  401ce0:	e7f6      	b.n	401cd0 <xQueueSemaphoreTake+0x1a4>
  401ce2:	bf00      	nop
  401ce4:	00402709 	.word	0x00402709
  401ce8:	00400fe5 	.word	0x00400fe5
  401cec:	00402971 	.word	0x00402971
  401cf0:	004025b9 	.word	0x004025b9
  401cf4:	e000ed04 	.word	0xe000ed04
  401cf8:	00401031 	.word	0x00401031
  401cfc:	00402729 	.word	0x00402729
  401d00:	00401415 	.word	0x00401415
  401d04:	004022f1 	.word	0x004022f1
  401d08:	004012c5 	.word	0x004012c5
  401d0c:	0040218d 	.word	0x0040218d
  401d10:	00402669 	.word	0x00402669
  401d14:	00402535 	.word	0x00402535
  401d18:	004028a5 	.word	0x004028a5
  401d1c:	00402651 	.word	0x00402651

00401d20 <vQueueAddToRegistry>:
	{
  401d20:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401d22:	4b0b      	ldr	r3, [pc, #44]	; (401d50 <vQueueAddToRegistry+0x30>)
  401d24:	681b      	ldr	r3, [r3, #0]
  401d26:	b153      	cbz	r3, 401d3e <vQueueAddToRegistry+0x1e>
  401d28:	2301      	movs	r3, #1
  401d2a:	4c09      	ldr	r4, [pc, #36]	; (401d50 <vQueueAddToRegistry+0x30>)
  401d2c:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401d30:	b132      	cbz	r2, 401d40 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401d32:	3301      	adds	r3, #1
  401d34:	2b08      	cmp	r3, #8
  401d36:	d1f9      	bne.n	401d2c <vQueueAddToRegistry+0xc>
	}
  401d38:	f85d 4b04 	ldr.w	r4, [sp], #4
  401d3c:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401d3e:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401d40:	4a03      	ldr	r2, [pc, #12]	; (401d50 <vQueueAddToRegistry+0x30>)
  401d42:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401d46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401d4a:	6058      	str	r0, [r3, #4]
				break;
  401d4c:	e7f4      	b.n	401d38 <vQueueAddToRegistry+0x18>
  401d4e:	bf00      	nop
  401d50:	20400c68 	.word	0x20400c68

00401d54 <vQueueWaitForMessageRestricted>:
	{
  401d54:	b570      	push	{r4, r5, r6, lr}
  401d56:	4604      	mov	r4, r0
  401d58:	460d      	mov	r5, r1
  401d5a:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401d5c:	4b12      	ldr	r3, [pc, #72]	; (401da8 <vQueueWaitForMessageRestricted+0x54>)
  401d5e:	4798      	blx	r3
  401d60:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401d64:	b25b      	sxtb	r3, r3
  401d66:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d6a:	d00d      	beq.n	401d88 <vQueueWaitForMessageRestricted+0x34>
  401d6c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401d70:	b25b      	sxtb	r3, r3
  401d72:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d76:	d00b      	beq.n	401d90 <vQueueWaitForMessageRestricted+0x3c>
  401d78:	4b0c      	ldr	r3, [pc, #48]	; (401dac <vQueueWaitForMessageRestricted+0x58>)
  401d7a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401d7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401d7e:	b15b      	cbz	r3, 401d98 <vQueueWaitForMessageRestricted+0x44>
		prvUnlockQueue( pxQueue );
  401d80:	4620      	mov	r0, r4
  401d82:	4b0b      	ldr	r3, [pc, #44]	; (401db0 <vQueueWaitForMessageRestricted+0x5c>)
  401d84:	4798      	blx	r3
  401d86:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401d88:	2300      	movs	r3, #0
  401d8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401d8e:	e7ed      	b.n	401d6c <vQueueWaitForMessageRestricted+0x18>
  401d90:	2300      	movs	r3, #0
  401d92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401d96:	e7ef      	b.n	401d78 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401d98:	4632      	mov	r2, r6
  401d9a:	4629      	mov	r1, r5
  401d9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401da0:	4b04      	ldr	r3, [pc, #16]	; (401db4 <vQueueWaitForMessageRestricted+0x60>)
  401da2:	4798      	blx	r3
  401da4:	e7ec      	b.n	401d80 <vQueueWaitForMessageRestricted+0x2c>
  401da6:	bf00      	nop
  401da8:	00400fe5 	.word	0x00400fe5
  401dac:	00401031 	.word	0x00401031
  401db0:	00401415 	.word	0x00401415
  401db4:	00402571 	.word	0x00402571

00401db8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401db8:	4b08      	ldr	r3, [pc, #32]	; (401ddc <prvResetNextTaskUnblockTime+0x24>)
  401dba:	681b      	ldr	r3, [r3, #0]
  401dbc:	681b      	ldr	r3, [r3, #0]
  401dbe:	b13b      	cbz	r3, 401dd0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401dc0:	4b06      	ldr	r3, [pc, #24]	; (401ddc <prvResetNextTaskUnblockTime+0x24>)
  401dc2:	681b      	ldr	r3, [r3, #0]
  401dc4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  401dc6:	68db      	ldr	r3, [r3, #12]
  401dc8:	685a      	ldr	r2, [r3, #4]
  401dca:	4b05      	ldr	r3, [pc, #20]	; (401de0 <prvResetNextTaskUnblockTime+0x28>)
  401dcc:	601a      	str	r2, [r3, #0]
  401dce:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401dd0:	f04f 32ff 	mov.w	r2, #4294967295
  401dd4:	4b02      	ldr	r3, [pc, #8]	; (401de0 <prvResetNextTaskUnblockTime+0x28>)
  401dd6:	601a      	str	r2, [r3, #0]
  401dd8:	4770      	bx	lr
  401dda:	bf00      	nop
  401ddc:	20400a5c 	.word	0x20400a5c
  401de0:	20400b0c 	.word	0x20400b0c

00401de4 <prvIdleTask>:
{
  401de4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401de6:	4d16      	ldr	r5, [pc, #88]	; (401e40 <prvIdleTask+0x5c>)
			taskENTER_CRITICAL();
  401de8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 401e58 <prvIdleTask+0x74>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401dec:	4f15      	ldr	r7, [pc, #84]	; (401e44 <prvIdleTask+0x60>)
				taskYIELD();
  401dee:	f8df 906c 	ldr.w	r9, [pc, #108]	; 401e5c <prvIdleTask+0x78>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401df2:	682b      	ldr	r3, [r5, #0]
  401df4:	b1bb      	cbz	r3, 401e26 <prvIdleTask+0x42>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401df6:	4e14      	ldr	r6, [pc, #80]	; (401e48 <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
  401df8:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401dfa:	68fb      	ldr	r3, [r7, #12]
  401dfc:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401dfe:	1d20      	adds	r0, r4, #4
  401e00:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
  401e02:	4a12      	ldr	r2, [pc, #72]	; (401e4c <prvIdleTask+0x68>)
  401e04:	6813      	ldr	r3, [r2, #0]
  401e06:	3b01      	subs	r3, #1
  401e08:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
  401e0a:	682b      	ldr	r3, [r5, #0]
  401e0c:	3b01      	subs	r3, #1
  401e0e:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
  401e10:	4b0f      	ldr	r3, [pc, #60]	; (401e50 <prvIdleTask+0x6c>)
  401e12:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
  401e14:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401e16:	f8df a048 	ldr.w	sl, [pc, #72]	; 401e60 <prvIdleTask+0x7c>
  401e1a:	47d0      	blx	sl
			vPortFree( pxTCB );
  401e1c:	4620      	mov	r0, r4
  401e1e:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401e20:	682b      	ldr	r3, [r5, #0]
  401e22:	2b00      	cmp	r3, #0
  401e24:	d1e8      	bne.n	401df8 <prvIdleTask+0x14>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401e26:	4b0b      	ldr	r3, [pc, #44]	; (401e54 <prvIdleTask+0x70>)
  401e28:	681b      	ldr	r3, [r3, #0]
  401e2a:	2b01      	cmp	r3, #1
  401e2c:	d9e1      	bls.n	401df2 <prvIdleTask+0xe>
				taskYIELD();
  401e2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401e32:	f8c9 3000 	str.w	r3, [r9]
  401e36:	f3bf 8f4f 	dsb	sy
  401e3a:	f3bf 8f6f 	isb	sy
  401e3e:	e7d8      	b.n	401df2 <prvIdleTask+0xe>
  401e40:	20400acc 	.word	0x20400acc
  401e44:	20400b40 	.word	0x20400b40
  401e48:	00400ee9 	.word	0x00400ee9
  401e4c:	20400ac8 	.word	0x20400ac8
  401e50:	00401031 	.word	0x00401031
  401e54:	20400a64 	.word	0x20400a64
  401e58:	00400fe5 	.word	0x00400fe5
  401e5c:	e000ed04 	.word	0xe000ed04
  401e60:	004012a1 	.word	0x004012a1

00401e64 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  401e64:	b570      	push	{r4, r5, r6, lr}
  401e66:	4604      	mov	r4, r0
  401e68:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  401e6a:	4b1c      	ldr	r3, [pc, #112]	; (401edc <prvAddCurrentTaskToDelayedList+0x78>)
  401e6c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401e6e:	4b1c      	ldr	r3, [pc, #112]	; (401ee0 <prvAddCurrentTaskToDelayedList+0x7c>)
  401e70:	6818      	ldr	r0, [r3, #0]
  401e72:	3004      	adds	r0, #4
  401e74:	4b1b      	ldr	r3, [pc, #108]	; (401ee4 <prvAddCurrentTaskToDelayedList+0x80>)
  401e76:	4798      	blx	r3
  401e78:	b948      	cbnz	r0, 401e8e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401e7a:	4b19      	ldr	r3, [pc, #100]	; (401ee0 <prvAddCurrentTaskToDelayedList+0x7c>)
  401e7c:	681a      	ldr	r2, [r3, #0]
  401e7e:	491a      	ldr	r1, [pc, #104]	; (401ee8 <prvAddCurrentTaskToDelayedList+0x84>)
  401e80:	680b      	ldr	r3, [r1, #0]
  401e82:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401e84:	2201      	movs	r2, #1
  401e86:	4082      	lsls	r2, r0
  401e88:	ea23 0302 	bic.w	r3, r3, r2
  401e8c:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  401e8e:	f1b4 3fff 	cmp.w	r4, #4294967295
  401e92:	d100      	bne.n	401e96 <prvAddCurrentTaskToDelayedList+0x32>
  401e94:	b99e      	cbnz	r6, 401ebe <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  401e96:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  401e98:	4b11      	ldr	r3, [pc, #68]	; (401ee0 <prvAddCurrentTaskToDelayedList+0x7c>)
  401e9a:	681b      	ldr	r3, [r3, #0]
  401e9c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
  401e9e:	42a5      	cmp	r5, r4
  401ea0:	d814      	bhi.n	401ecc <prvAddCurrentTaskToDelayedList+0x68>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401ea2:	4b12      	ldr	r3, [pc, #72]	; (401eec <prvAddCurrentTaskToDelayedList+0x88>)
  401ea4:	6818      	ldr	r0, [r3, #0]
  401ea6:	4b0e      	ldr	r3, [pc, #56]	; (401ee0 <prvAddCurrentTaskToDelayedList+0x7c>)
  401ea8:	6819      	ldr	r1, [r3, #0]
  401eaa:	3104      	adds	r1, #4
  401eac:	4b10      	ldr	r3, [pc, #64]	; (401ef0 <prvAddCurrentTaskToDelayedList+0x8c>)
  401eae:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  401eb0:	4b10      	ldr	r3, [pc, #64]	; (401ef4 <prvAddCurrentTaskToDelayedList+0x90>)
  401eb2:	681b      	ldr	r3, [r3, #0]
  401eb4:	429c      	cmp	r4, r3
  401eb6:	d201      	bcs.n	401ebc <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
  401eb8:	4b0e      	ldr	r3, [pc, #56]	; (401ef4 <prvAddCurrentTaskToDelayedList+0x90>)
  401eba:	601c      	str	r4, [r3, #0]
  401ebc:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401ebe:	4b08      	ldr	r3, [pc, #32]	; (401ee0 <prvAddCurrentTaskToDelayedList+0x7c>)
  401ec0:	6819      	ldr	r1, [r3, #0]
  401ec2:	3104      	adds	r1, #4
  401ec4:	480c      	ldr	r0, [pc, #48]	; (401ef8 <prvAddCurrentTaskToDelayedList+0x94>)
  401ec6:	4b0d      	ldr	r3, [pc, #52]	; (401efc <prvAddCurrentTaskToDelayedList+0x98>)
  401ec8:	4798      	blx	r3
  401eca:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401ecc:	4b0c      	ldr	r3, [pc, #48]	; (401f00 <prvAddCurrentTaskToDelayedList+0x9c>)
  401ece:	6818      	ldr	r0, [r3, #0]
  401ed0:	4b03      	ldr	r3, [pc, #12]	; (401ee0 <prvAddCurrentTaskToDelayedList+0x7c>)
  401ed2:	6819      	ldr	r1, [r3, #0]
  401ed4:	3104      	adds	r1, #4
  401ed6:	4b06      	ldr	r3, [pc, #24]	; (401ef0 <prvAddCurrentTaskToDelayedList+0x8c>)
  401ed8:	4798      	blx	r3
  401eda:	bd70      	pop	{r4, r5, r6, pc}
  401edc:	20400b54 	.word	0x20400b54
  401ee0:	20400a58 	.word	0x20400a58
  401ee4:	00400ee9 	.word	0x00400ee9
  401ee8:	20400adc 	.word	0x20400adc
  401eec:	20400a5c 	.word	0x20400a5c
  401ef0:	00400eb5 	.word	0x00400eb5
  401ef4:	20400b0c 	.word	0x20400b0c
  401ef8:	20400b2c 	.word	0x20400b2c
  401efc:	00400e9d 	.word	0x00400e9d
  401f00:	20400a60 	.word	0x20400a60

00401f04 <xTaskCreate>:
	{
  401f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f08:	b083      	sub	sp, #12
  401f0a:	4683      	mov	fp, r0
  401f0c:	460d      	mov	r5, r1
  401f0e:	9301      	str	r3, [sp, #4]
  401f10:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401f14:	0096      	lsls	r6, r2, #2
  401f16:	4630      	mov	r0, r6
  401f18:	4b60      	ldr	r3, [pc, #384]	; (40209c <xTaskCreate+0x198>)
  401f1a:	4798      	blx	r3
			if( pxStack != NULL )
  401f1c:	2800      	cmp	r0, #0
  401f1e:	f000 808d 	beq.w	40203c <xTaskCreate+0x138>
  401f22:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
  401f24:	2058      	movs	r0, #88	; 0x58
  401f26:	4b5d      	ldr	r3, [pc, #372]	; (40209c <xTaskCreate+0x198>)
  401f28:	4798      	blx	r3
				if( pxNewTCB != NULL )
  401f2a:	4604      	mov	r4, r0
  401f2c:	2800      	cmp	r0, #0
  401f2e:	f000 8082 	beq.w	402036 <xTaskCreate+0x132>
					pxNewTCB->pxStack = pxStack;
  401f32:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  401f34:	4632      	mov	r2, r6
  401f36:	21a5      	movs	r1, #165	; 0xa5
  401f38:	4638      	mov	r0, r7
  401f3a:	4b59      	ldr	r3, [pc, #356]	; (4020a0 <xTaskCreate+0x19c>)
  401f3c:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
  401f3e:	3e04      	subs	r6, #4
  401f40:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401f42:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401f44:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  401f48:	782b      	ldrb	r3, [r5, #0]
  401f4a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401f4e:	782b      	ldrb	r3, [r5, #0]
  401f50:	b163      	cbz	r3, 401f6c <xTaskCreate+0x68>
  401f52:	462b      	mov	r3, r5
  401f54:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401f58:	f105 0109 	add.w	r1, r5, #9
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  401f5c:	7858      	ldrb	r0, [r3, #1]
  401f5e:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401f62:	f813 0f01 	ldrb.w	r0, [r3, #1]!
  401f66:	b108      	cbz	r0, 401f6c <xTaskCreate+0x68>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401f68:	428b      	cmp	r3, r1
  401f6a:	d1f7      	bne.n	401f5c <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401f6c:	2700      	movs	r7, #0
  401f6e:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  401f72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401f74:	2d04      	cmp	r5, #4
  401f76:	bf28      	it	cs
  401f78:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
  401f7a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
  401f7c:	64a5      	str	r5, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
  401f7e:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  401f80:	f104 0804 	add.w	r8, r4, #4
  401f84:	4640      	mov	r0, r8
  401f86:	f8df 916c 	ldr.w	r9, [pc, #364]	; 4020f4 <xTaskCreate+0x1f0>
  401f8a:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  401f8c:	f104 0018 	add.w	r0, r4, #24
  401f90:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  401f92:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401f94:	f1c5 0505 	rsb	r5, r5, #5
  401f98:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  401f9a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
  401f9c:	6527      	str	r7, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  401f9e:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401fa2:	9a01      	ldr	r2, [sp, #4]
  401fa4:	4659      	mov	r1, fp
  401fa6:	4630      	mov	r0, r6
  401fa8:	4b3e      	ldr	r3, [pc, #248]	; (4020a4 <xTaskCreate+0x1a0>)
  401faa:	4798      	blx	r3
  401fac:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
  401fae:	f1ba 0f00 	cmp.w	sl, #0
  401fb2:	d001      	beq.n	401fb8 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401fb4:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
  401fb8:	4b3b      	ldr	r3, [pc, #236]	; (4020a8 <xTaskCreate+0x1a4>)
  401fba:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
  401fbc:	4a3b      	ldr	r2, [pc, #236]	; (4020ac <xTaskCreate+0x1a8>)
  401fbe:	6813      	ldr	r3, [r2, #0]
  401fc0:	3301      	adds	r3, #1
  401fc2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  401fc4:	4b3a      	ldr	r3, [pc, #232]	; (4020b0 <xTaskCreate+0x1ac>)
  401fc6:	681b      	ldr	r3, [r3, #0]
  401fc8:	2b00      	cmp	r3, #0
  401fca:	d03a      	beq.n	402042 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
  401fcc:	4b39      	ldr	r3, [pc, #228]	; (4020b4 <xTaskCreate+0x1b0>)
  401fce:	681b      	ldr	r3, [r3, #0]
  401fd0:	b93b      	cbnz	r3, 401fe2 <xTaskCreate+0xde>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  401fd2:	4b37      	ldr	r3, [pc, #220]	; (4020b0 <xTaskCreate+0x1ac>)
  401fd4:	681b      	ldr	r3, [r3, #0]
  401fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401fd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401fda:	429a      	cmp	r2, r3
  401fdc:	d801      	bhi.n	401fe2 <xTaskCreate+0xde>
					pxCurrentTCB = pxNewTCB;
  401fde:	4b34      	ldr	r3, [pc, #208]	; (4020b0 <xTaskCreate+0x1ac>)
  401fe0:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
  401fe2:	4a35      	ldr	r2, [pc, #212]	; (4020b8 <xTaskCreate+0x1b4>)
  401fe4:	6813      	ldr	r3, [r2, #0]
  401fe6:	3301      	adds	r3, #1
  401fe8:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
  401fea:	6423      	str	r3, [r4, #64]	; 0x40
		prvAddTaskToReadyList( pxNewTCB );
  401fec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401fee:	4a33      	ldr	r2, [pc, #204]	; (4020bc <xTaskCreate+0x1b8>)
  401ff0:	6811      	ldr	r1, [r2, #0]
  401ff2:	2301      	movs	r3, #1
  401ff4:	4083      	lsls	r3, r0
  401ff6:	430b      	orrs	r3, r1
  401ff8:	6013      	str	r3, [r2, #0]
  401ffa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ffe:	4641      	mov	r1, r8
  402000:	4b2f      	ldr	r3, [pc, #188]	; (4020c0 <xTaskCreate+0x1bc>)
  402002:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402006:	4b2f      	ldr	r3, [pc, #188]	; (4020c4 <xTaskCreate+0x1c0>)
  402008:	4798      	blx	r3
	taskEXIT_CRITICAL();
  40200a:	4b2f      	ldr	r3, [pc, #188]	; (4020c8 <xTaskCreate+0x1c4>)
  40200c:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
  40200e:	4b29      	ldr	r3, [pc, #164]	; (4020b4 <xTaskCreate+0x1b0>)
  402010:	681b      	ldr	r3, [r3, #0]
  402012:	2b00      	cmp	r3, #0
  402014:	d03b      	beq.n	40208e <xTaskCreate+0x18a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  402016:	4b26      	ldr	r3, [pc, #152]	; (4020b0 <xTaskCreate+0x1ac>)
  402018:	681b      	ldr	r3, [r3, #0]
  40201a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40201c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40201e:	429a      	cmp	r2, r3
  402020:	d239      	bcs.n	402096 <xTaskCreate+0x192>
			taskYIELD_IF_USING_PREEMPTION();
  402022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402026:	4b29      	ldr	r3, [pc, #164]	; (4020cc <xTaskCreate+0x1c8>)
  402028:	601a      	str	r2, [r3, #0]
  40202a:	f3bf 8f4f 	dsb	sy
  40202e:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  402032:	2001      	movs	r0, #1
  402034:	e02c      	b.n	402090 <xTaskCreate+0x18c>
					vPortFree( pxStack );
  402036:	4638      	mov	r0, r7
  402038:	4b25      	ldr	r3, [pc, #148]	; (4020d0 <xTaskCreate+0x1cc>)
  40203a:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  40203c:	f04f 30ff 	mov.w	r0, #4294967295
  402040:	e026      	b.n	402090 <xTaskCreate+0x18c>
			pxCurrentTCB = pxNewTCB;
  402042:	4b1b      	ldr	r3, [pc, #108]	; (4020b0 <xTaskCreate+0x1ac>)
  402044:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  402046:	6813      	ldr	r3, [r2, #0]
  402048:	2b01      	cmp	r3, #1
  40204a:	d1ca      	bne.n	401fe2 <xTaskCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  40204c:	4e1c      	ldr	r6, [pc, #112]	; (4020c0 <xTaskCreate+0x1bc>)
  40204e:	4630      	mov	r0, r6
  402050:	4d20      	ldr	r5, [pc, #128]	; (4020d4 <xTaskCreate+0x1d0>)
  402052:	47a8      	blx	r5
  402054:	f106 0014 	add.w	r0, r6, #20
  402058:	47a8      	blx	r5
  40205a:	f106 0028 	add.w	r0, r6, #40	; 0x28
  40205e:	47a8      	blx	r5
  402060:	f106 003c 	add.w	r0, r6, #60	; 0x3c
  402064:	47a8      	blx	r5
  402066:	f106 0050 	add.w	r0, r6, #80	; 0x50
  40206a:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  40206c:	4f1a      	ldr	r7, [pc, #104]	; (4020d8 <xTaskCreate+0x1d4>)
  40206e:	4638      	mov	r0, r7
  402070:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  402072:	4e1a      	ldr	r6, [pc, #104]	; (4020dc <xTaskCreate+0x1d8>)
  402074:	4630      	mov	r0, r6
  402076:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  402078:	4819      	ldr	r0, [pc, #100]	; (4020e0 <xTaskCreate+0x1dc>)
  40207a:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  40207c:	4819      	ldr	r0, [pc, #100]	; (4020e4 <xTaskCreate+0x1e0>)
  40207e:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  402080:	4819      	ldr	r0, [pc, #100]	; (4020e8 <xTaskCreate+0x1e4>)
  402082:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  402084:	4b19      	ldr	r3, [pc, #100]	; (4020ec <xTaskCreate+0x1e8>)
  402086:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402088:	4b19      	ldr	r3, [pc, #100]	; (4020f0 <xTaskCreate+0x1ec>)
  40208a:	601e      	str	r6, [r3, #0]
  40208c:	e7a9      	b.n	401fe2 <xTaskCreate+0xde>
			xReturn = pdPASS;
  40208e:	2001      	movs	r0, #1
	}
  402090:	b003      	add	sp, #12
  402092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  402096:	2001      	movs	r0, #1
		return xReturn;
  402098:	e7fa      	b.n	402090 <xTaskCreate+0x18c>
  40209a:	bf00      	nop
  40209c:	00401271 	.word	0x00401271
  4020a0:	00403e15 	.word	0x00403e15
  4020a4:	00400f95 	.word	0x00400f95
  4020a8:	00400fe5 	.word	0x00400fe5
  4020ac:	20400ac8 	.word	0x20400ac8
  4020b0:	20400a58 	.word	0x20400a58
  4020b4:	20400b28 	.word	0x20400b28
  4020b8:	20400ad8 	.word	0x20400ad8
  4020bc:	20400adc 	.word	0x20400adc
  4020c0:	20400a64 	.word	0x20400a64
  4020c4:	00400e9d 	.word	0x00400e9d
  4020c8:	00401031 	.word	0x00401031
  4020cc:	e000ed04 	.word	0xe000ed04
  4020d0:	004012a1 	.word	0x004012a1
  4020d4:	00400e81 	.word	0x00400e81
  4020d8:	20400ae0 	.word	0x20400ae0
  4020dc:	20400af4 	.word	0x20400af4
  4020e0:	20400b14 	.word	0x20400b14
  4020e4:	20400b40 	.word	0x20400b40
  4020e8:	20400b2c 	.word	0x20400b2c
  4020ec:	20400a5c 	.word	0x20400a5c
  4020f0:	20400a60 	.word	0x20400a60
  4020f4:	00400e97 	.word	0x00400e97

004020f8 <vTaskStartScheduler>:
{
  4020f8:	b510      	push	{r4, lr}
  4020fa:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
  4020fc:	4b1a      	ldr	r3, [pc, #104]	; (402168 <vTaskStartScheduler+0x70>)
  4020fe:	9301      	str	r3, [sp, #4]
  402100:	2300      	movs	r3, #0
  402102:	9300      	str	r3, [sp, #0]
  402104:	2282      	movs	r2, #130	; 0x82
  402106:	4919      	ldr	r1, [pc, #100]	; (40216c <vTaskStartScheduler+0x74>)
  402108:	4819      	ldr	r0, [pc, #100]	; (402170 <vTaskStartScheduler+0x78>)
  40210a:	4c1a      	ldr	r4, [pc, #104]	; (402174 <vTaskStartScheduler+0x7c>)
  40210c:	47a0      	blx	r4
		if( xReturn == pdPASS )
  40210e:	2801      	cmp	r0, #1
  402110:	d004      	beq.n	40211c <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  402112:	f1b0 3fff 	cmp.w	r0, #4294967295
  402116:	d01c      	beq.n	402152 <vTaskStartScheduler+0x5a>
}
  402118:	b002      	add	sp, #8
  40211a:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  40211c:	4b16      	ldr	r3, [pc, #88]	; (402178 <vTaskStartScheduler+0x80>)
  40211e:	4798      	blx	r3
	if( xReturn == pdPASS )
  402120:	2801      	cmp	r0, #1
  402122:	d1f6      	bne.n	402112 <vTaskStartScheduler+0x1a>
  402124:	f04f 0380 	mov.w	r3, #128	; 0x80
  402128:	b672      	cpsid	i
  40212a:	f383 8811 	msr	BASEPRI, r3
  40212e:	f3bf 8f6f 	isb	sy
  402132:	f3bf 8f4f 	dsb	sy
  402136:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402138:	f04f 32ff 	mov.w	r2, #4294967295
  40213c:	4b0f      	ldr	r3, [pc, #60]	; (40217c <vTaskStartScheduler+0x84>)
  40213e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402140:	2201      	movs	r2, #1
  402142:	4b0f      	ldr	r3, [pc, #60]	; (402180 <vTaskStartScheduler+0x88>)
  402144:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402146:	2200      	movs	r2, #0
  402148:	4b0e      	ldr	r3, [pc, #56]	; (402184 <vTaskStartScheduler+0x8c>)
  40214a:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40214c:	4b0e      	ldr	r3, [pc, #56]	; (402188 <vTaskStartScheduler+0x90>)
  40214e:	4798      	blx	r3
  402150:	e7e2      	b.n	402118 <vTaskStartScheduler+0x20>
  402152:	f04f 0380 	mov.w	r3, #128	; 0x80
  402156:	b672      	cpsid	i
  402158:	f383 8811 	msr	BASEPRI, r3
  40215c:	f3bf 8f6f 	isb	sy
  402160:	f3bf 8f4f 	dsb	sy
  402164:	b662      	cpsie	i
  402166:	e7fe      	b.n	402166 <vTaskStartScheduler+0x6e>
  402168:	20400b08 	.word	0x20400b08
  40216c:	00406698 	.word	0x00406698
  402170:	00401de5 	.word	0x00401de5
  402174:	00401f05 	.word	0x00401f05
  402178:	00402a49 	.word	0x00402a49
  40217c:	20400b0c 	.word	0x20400b0c
  402180:	20400b28 	.word	0x20400b28
  402184:	20400b54 	.word	0x20400b54
  402188:	00401121 	.word	0x00401121

0040218c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  40218c:	4a02      	ldr	r2, [pc, #8]	; (402198 <vTaskSuspendAll+0xc>)
  40218e:	6813      	ldr	r3, [r2, #0]
  402190:	3301      	adds	r3, #1
  402192:	6013      	str	r3, [r2, #0]
  402194:	4770      	bx	lr
  402196:	bf00      	nop
  402198:	20400ad4 	.word	0x20400ad4

0040219c <xTaskGetTickCount>:
		xTicks = xTickCount;
  40219c:	4b01      	ldr	r3, [pc, #4]	; (4021a4 <xTaskGetTickCount+0x8>)
  40219e:	6818      	ldr	r0, [r3, #0]
}
  4021a0:	4770      	bx	lr
  4021a2:	bf00      	nop
  4021a4:	20400b54 	.word	0x20400b54

004021a8 <xTaskIncrementTick>:
{
  4021a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4021ac:	4b41      	ldr	r3, [pc, #260]	; (4022b4 <xTaskIncrementTick+0x10c>)
  4021ae:	681b      	ldr	r3, [r3, #0]
  4021b0:	2b00      	cmp	r3, #0
  4021b2:	d177      	bne.n	4022a4 <xTaskIncrementTick+0xfc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  4021b4:	4b40      	ldr	r3, [pc, #256]	; (4022b8 <xTaskIncrementTick+0x110>)
  4021b6:	681d      	ldr	r5, [r3, #0]
  4021b8:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
  4021ba:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  4021bc:	b9d5      	cbnz	r5, 4021f4 <xTaskIncrementTick+0x4c>
			taskSWITCH_DELAYED_LISTS();
  4021be:	4b3f      	ldr	r3, [pc, #252]	; (4022bc <xTaskIncrementTick+0x114>)
  4021c0:	681b      	ldr	r3, [r3, #0]
  4021c2:	681b      	ldr	r3, [r3, #0]
  4021c4:	b153      	cbz	r3, 4021dc <xTaskIncrementTick+0x34>
  4021c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021ca:	b672      	cpsid	i
  4021cc:	f383 8811 	msr	BASEPRI, r3
  4021d0:	f3bf 8f6f 	isb	sy
  4021d4:	f3bf 8f4f 	dsb	sy
  4021d8:	b662      	cpsie	i
  4021da:	e7fe      	b.n	4021da <xTaskIncrementTick+0x32>
  4021dc:	4a37      	ldr	r2, [pc, #220]	; (4022bc <xTaskIncrementTick+0x114>)
  4021de:	6811      	ldr	r1, [r2, #0]
  4021e0:	4b37      	ldr	r3, [pc, #220]	; (4022c0 <xTaskIncrementTick+0x118>)
  4021e2:	6818      	ldr	r0, [r3, #0]
  4021e4:	6010      	str	r0, [r2, #0]
  4021e6:	6019      	str	r1, [r3, #0]
  4021e8:	4a36      	ldr	r2, [pc, #216]	; (4022c4 <xTaskIncrementTick+0x11c>)
  4021ea:	6813      	ldr	r3, [r2, #0]
  4021ec:	3301      	adds	r3, #1
  4021ee:	6013      	str	r3, [r2, #0]
  4021f0:	4b35      	ldr	r3, [pc, #212]	; (4022c8 <xTaskIncrementTick+0x120>)
  4021f2:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
  4021f4:	4b35      	ldr	r3, [pc, #212]	; (4022cc <xTaskIncrementTick+0x124>)
  4021f6:	681b      	ldr	r3, [r3, #0]
  4021f8:	429d      	cmp	r5, r3
  4021fa:	d218      	bcs.n	40222e <xTaskIncrementTick+0x86>
BaseType_t xSwitchRequired = pdFALSE;
  4021fc:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4021fe:	4b34      	ldr	r3, [pc, #208]	; (4022d0 <xTaskIncrementTick+0x128>)
  402200:	681b      	ldr	r3, [r3, #0]
  402202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402204:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402208:	009b      	lsls	r3, r3, #2
  40220a:	4a32      	ldr	r2, [pc, #200]	; (4022d4 <xTaskIncrementTick+0x12c>)
  40220c:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
  40220e:	2b02      	cmp	r3, #2
  402210:	bf28      	it	cs
  402212:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402214:	4b30      	ldr	r3, [pc, #192]	; (4022d8 <xTaskIncrementTick+0x130>)
  402216:	681b      	ldr	r3, [r3, #0]
  402218:	b90b      	cbnz	r3, 40221e <xTaskIncrementTick+0x76>
				vApplicationTickHook();
  40221a:	4b30      	ldr	r3, [pc, #192]	; (4022dc <xTaskIncrementTick+0x134>)
  40221c:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  40221e:	4b30      	ldr	r3, [pc, #192]	; (4022e0 <xTaskIncrementTick+0x138>)
  402220:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402222:	2b00      	cmp	r3, #0
}
  402224:	bf0c      	ite	eq
  402226:	4620      	moveq	r0, r4
  402228:	2001      	movne	r0, #1
  40222a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40222e:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402230:	f8df 9088 	ldr.w	r9, [pc, #136]	; 4022bc <xTaskIncrementTick+0x114>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  402234:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 4022ec <xTaskIncrementTick+0x144>
					prvAddTaskToReadyList( pxTCB );
  402238:	4f2a      	ldr	r7, [pc, #168]	; (4022e4 <xTaskIncrementTick+0x13c>)
  40223a:	e01f      	b.n	40227c <xTaskIncrementTick+0xd4>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40223c:	f04f 32ff 	mov.w	r2, #4294967295
  402240:	4b22      	ldr	r3, [pc, #136]	; (4022cc <xTaskIncrementTick+0x124>)
  402242:	601a      	str	r2, [r3, #0]
					break;
  402244:	e7db      	b.n	4021fe <xTaskIncrementTick+0x56>
						xNextTaskUnblockTime = xItemValue;
  402246:	4a21      	ldr	r2, [pc, #132]	; (4022cc <xTaskIncrementTick+0x124>)
  402248:	6013      	str	r3, [r2, #0]
						break;
  40224a:	e7d8      	b.n	4021fe <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40224c:	f106 0018 	add.w	r0, r6, #24
  402250:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  402252:	6af0      	ldr	r0, [r6, #44]	; 0x2c
  402254:	683a      	ldr	r2, [r7, #0]
  402256:	2301      	movs	r3, #1
  402258:	4083      	lsls	r3, r0
  40225a:	4313      	orrs	r3, r2
  40225c:	603b      	str	r3, [r7, #0]
  40225e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402262:	4651      	mov	r1, sl
  402264:	4b1b      	ldr	r3, [pc, #108]	; (4022d4 <xTaskIncrementTick+0x12c>)
  402266:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40226a:	4b1f      	ldr	r3, [pc, #124]	; (4022e8 <xTaskIncrementTick+0x140>)
  40226c:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40226e:	4b18      	ldr	r3, [pc, #96]	; (4022d0 <xTaskIncrementTick+0x128>)
  402270:	681b      	ldr	r3, [r3, #0]
  402272:	6af2      	ldr	r2, [r6, #44]	; 0x2c
  402274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
  402276:	429a      	cmp	r2, r3
  402278:	bf28      	it	cs
  40227a:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40227c:	f8d9 3000 	ldr.w	r3, [r9]
  402280:	681b      	ldr	r3, [r3, #0]
  402282:	2b00      	cmp	r3, #0
  402284:	d0da      	beq.n	40223c <xTaskIncrementTick+0x94>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402286:	f8d9 3000 	ldr.w	r3, [r9]
  40228a:	68db      	ldr	r3, [r3, #12]
  40228c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  40228e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
  402290:	429d      	cmp	r5, r3
  402292:	d3d8      	bcc.n	402246 <xTaskIncrementTick+0x9e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  402294:	f106 0a04 	add.w	sl, r6, #4
  402298:	4650      	mov	r0, sl
  40229a:	47c0      	blx	r8
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40229c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  40229e:	2b00      	cmp	r3, #0
  4022a0:	d1d4      	bne.n	40224c <xTaskIncrementTick+0xa4>
  4022a2:	e7d6      	b.n	402252 <xTaskIncrementTick+0xaa>
		++uxPendedTicks;
  4022a4:	4a0c      	ldr	r2, [pc, #48]	; (4022d8 <xTaskIncrementTick+0x130>)
  4022a6:	6813      	ldr	r3, [r2, #0]
  4022a8:	3301      	adds	r3, #1
  4022aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  4022ac:	4b0b      	ldr	r3, [pc, #44]	; (4022dc <xTaskIncrementTick+0x134>)
  4022ae:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  4022b0:	2400      	movs	r4, #0
  4022b2:	e7b4      	b.n	40221e <xTaskIncrementTick+0x76>
  4022b4:	20400ad4 	.word	0x20400ad4
  4022b8:	20400b54 	.word	0x20400b54
  4022bc:	20400a5c 	.word	0x20400a5c
  4022c0:	20400a60 	.word	0x20400a60
  4022c4:	20400b10 	.word	0x20400b10
  4022c8:	00401db9 	.word	0x00401db9
  4022cc:	20400b0c 	.word	0x20400b0c
  4022d0:	20400a58 	.word	0x20400a58
  4022d4:	20400a64 	.word	0x20400a64
  4022d8:	20400ad0 	.word	0x20400ad0
  4022dc:	00403549 	.word	0x00403549
  4022e0:	20400b58 	.word	0x20400b58
  4022e4:	20400adc 	.word	0x20400adc
  4022e8:	00400e9d 	.word	0x00400e9d
  4022ec:	00400ee9 	.word	0x00400ee9

004022f0 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
  4022f0:	4b36      	ldr	r3, [pc, #216]	; (4023cc <xTaskResumeAll+0xdc>)
  4022f2:	681b      	ldr	r3, [r3, #0]
  4022f4:	b953      	cbnz	r3, 40230c <xTaskResumeAll+0x1c>
  4022f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022fa:	b672      	cpsid	i
  4022fc:	f383 8811 	msr	BASEPRI, r3
  402300:	f3bf 8f6f 	isb	sy
  402304:	f3bf 8f4f 	dsb	sy
  402308:	b662      	cpsie	i
  40230a:	e7fe      	b.n	40230a <xTaskResumeAll+0x1a>
{
  40230c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
  402310:	4b2f      	ldr	r3, [pc, #188]	; (4023d0 <xTaskResumeAll+0xe0>)
  402312:	4798      	blx	r3
		--uxSchedulerSuspended;
  402314:	4b2d      	ldr	r3, [pc, #180]	; (4023cc <xTaskResumeAll+0xdc>)
  402316:	681a      	ldr	r2, [r3, #0]
  402318:	3a01      	subs	r2, #1
  40231a:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40231c:	681b      	ldr	r3, [r3, #0]
  40231e:	2b00      	cmp	r3, #0
  402320:	d150      	bne.n	4023c4 <xTaskResumeAll+0xd4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402322:	4b2c      	ldr	r3, [pc, #176]	; (4023d4 <xTaskResumeAll+0xe4>)
  402324:	681b      	ldr	r3, [r3, #0]
  402326:	b92b      	cbnz	r3, 402334 <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
  402328:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  40232a:	4b2b      	ldr	r3, [pc, #172]	; (4023d8 <xTaskResumeAll+0xe8>)
  40232c:	4798      	blx	r3
}
  40232e:	4620      	mov	r0, r4
  402330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402334:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402336:	4f29      	ldr	r7, [pc, #164]	; (4023dc <xTaskResumeAll+0xec>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402338:	4e29      	ldr	r6, [pc, #164]	; (4023e0 <xTaskResumeAll+0xf0>)
					prvAddTaskToReadyList( pxTCB );
  40233a:	4d2a      	ldr	r5, [pc, #168]	; (4023e4 <xTaskResumeAll+0xf4>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40233c:	683b      	ldr	r3, [r7, #0]
  40233e:	b303      	cbz	r3, 402382 <xTaskResumeAll+0x92>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  402340:	68fb      	ldr	r3, [r7, #12]
  402342:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402344:	f104 0018 	add.w	r0, r4, #24
  402348:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  40234a:	f104 0804 	add.w	r8, r4, #4
  40234e:	4640      	mov	r0, r8
  402350:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402352:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402354:	682a      	ldr	r2, [r5, #0]
  402356:	2301      	movs	r3, #1
  402358:	4083      	lsls	r3, r0
  40235a:	4313      	orrs	r3, r2
  40235c:	602b      	str	r3, [r5, #0]
  40235e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402362:	4641      	mov	r1, r8
  402364:	4b20      	ldr	r3, [pc, #128]	; (4023e8 <xTaskResumeAll+0xf8>)
  402366:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40236a:	4b20      	ldr	r3, [pc, #128]	; (4023ec <xTaskResumeAll+0xfc>)
  40236c:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40236e:	4b20      	ldr	r3, [pc, #128]	; (4023f0 <xTaskResumeAll+0x100>)
  402370:	681b      	ldr	r3, [r3, #0]
  402372:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402376:	429a      	cmp	r2, r3
  402378:	d3e0      	bcc.n	40233c <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
  40237a:	2201      	movs	r2, #1
  40237c:	4b1d      	ldr	r3, [pc, #116]	; (4023f4 <xTaskResumeAll+0x104>)
  40237e:	601a      	str	r2, [r3, #0]
  402380:	e7dc      	b.n	40233c <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
  402382:	b10c      	cbz	r4, 402388 <xTaskResumeAll+0x98>
					prvResetNextTaskUnblockTime();
  402384:	4b1c      	ldr	r3, [pc, #112]	; (4023f8 <xTaskResumeAll+0x108>)
  402386:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  402388:	4b1c      	ldr	r3, [pc, #112]	; (4023fc <xTaskResumeAll+0x10c>)
  40238a:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  40238c:	b16c      	cbz	r4, 4023aa <xTaskResumeAll+0xba>
							if( xTaskIncrementTick() != pdFALSE )
  40238e:	4f1c      	ldr	r7, [pc, #112]	; (402400 <xTaskResumeAll+0x110>)
								xYieldPending = pdTRUE;
  402390:	4e18      	ldr	r6, [pc, #96]	; (4023f4 <xTaskResumeAll+0x104>)
  402392:	2501      	movs	r5, #1
  402394:	e001      	b.n	40239a <xTaskResumeAll+0xaa>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  402396:	3c01      	subs	r4, #1
  402398:	d004      	beq.n	4023a4 <xTaskResumeAll+0xb4>
							if( xTaskIncrementTick() != pdFALSE )
  40239a:	47b8      	blx	r7
  40239c:	2800      	cmp	r0, #0
  40239e:	d0fa      	beq.n	402396 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
  4023a0:	6035      	str	r5, [r6, #0]
  4023a2:	e7f8      	b.n	402396 <xTaskResumeAll+0xa6>
						uxPendedTicks = 0;
  4023a4:	2200      	movs	r2, #0
  4023a6:	4b15      	ldr	r3, [pc, #84]	; (4023fc <xTaskResumeAll+0x10c>)
  4023a8:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
  4023aa:	4b12      	ldr	r3, [pc, #72]	; (4023f4 <xTaskResumeAll+0x104>)
  4023ac:	681b      	ldr	r3, [r3, #0]
  4023ae:	b15b      	cbz	r3, 4023c8 <xTaskResumeAll+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
  4023b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4023b4:	4b13      	ldr	r3, [pc, #76]	; (402404 <xTaskResumeAll+0x114>)
  4023b6:	601a      	str	r2, [r3, #0]
  4023b8:	f3bf 8f4f 	dsb	sy
  4023bc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4023c0:	2401      	movs	r4, #1
  4023c2:	e7b2      	b.n	40232a <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
  4023c4:	2400      	movs	r4, #0
  4023c6:	e7b0      	b.n	40232a <xTaskResumeAll+0x3a>
  4023c8:	2400      	movs	r4, #0
  4023ca:	e7ae      	b.n	40232a <xTaskResumeAll+0x3a>
  4023cc:	20400ad4 	.word	0x20400ad4
  4023d0:	00400fe5 	.word	0x00400fe5
  4023d4:	20400ac8 	.word	0x20400ac8
  4023d8:	00401031 	.word	0x00401031
  4023dc:	20400b14 	.word	0x20400b14
  4023e0:	00400ee9 	.word	0x00400ee9
  4023e4:	20400adc 	.word	0x20400adc
  4023e8:	20400a64 	.word	0x20400a64
  4023ec:	00400e9d 	.word	0x00400e9d
  4023f0:	20400a58 	.word	0x20400a58
  4023f4:	20400b58 	.word	0x20400b58
  4023f8:	00401db9 	.word	0x00401db9
  4023fc:	20400ad0 	.word	0x20400ad0
  402400:	004021a9 	.word	0x004021a9
  402404:	e000ed04 	.word	0xe000ed04

00402408 <vTaskDelay>:
	{
  402408:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  40240a:	b1b8      	cbz	r0, 40243c <vTaskDelay+0x34>
  40240c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  40240e:	4b10      	ldr	r3, [pc, #64]	; (402450 <vTaskDelay+0x48>)
  402410:	681b      	ldr	r3, [r3, #0]
  402412:	b153      	cbz	r3, 40242a <vTaskDelay+0x22>
  402414:	f04f 0380 	mov.w	r3, #128	; 0x80
  402418:	b672      	cpsid	i
  40241a:	f383 8811 	msr	BASEPRI, r3
  40241e:	f3bf 8f6f 	isb	sy
  402422:	f3bf 8f4f 	dsb	sy
  402426:	b662      	cpsie	i
  402428:	e7fe      	b.n	402428 <vTaskDelay+0x20>
			vTaskSuspendAll();
  40242a:	4b0a      	ldr	r3, [pc, #40]	; (402454 <vTaskDelay+0x4c>)
  40242c:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  40242e:	2100      	movs	r1, #0
  402430:	4620      	mov	r0, r4
  402432:	4b09      	ldr	r3, [pc, #36]	; (402458 <vTaskDelay+0x50>)
  402434:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  402436:	4b09      	ldr	r3, [pc, #36]	; (40245c <vTaskDelay+0x54>)
  402438:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  40243a:	b938      	cbnz	r0, 40244c <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
  40243c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402440:	4b07      	ldr	r3, [pc, #28]	; (402460 <vTaskDelay+0x58>)
  402442:	601a      	str	r2, [r3, #0]
  402444:	f3bf 8f4f 	dsb	sy
  402448:	f3bf 8f6f 	isb	sy
  40244c:	bd10      	pop	{r4, pc}
  40244e:	bf00      	nop
  402450:	20400ad4 	.word	0x20400ad4
  402454:	0040218d 	.word	0x0040218d
  402458:	00401e65 	.word	0x00401e65
  40245c:	004022f1 	.word	0x004022f1
  402460:	e000ed04 	.word	0xe000ed04

00402464 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402464:	4b2d      	ldr	r3, [pc, #180]	; (40251c <vTaskSwitchContext+0xb8>)
  402466:	681b      	ldr	r3, [r3, #0]
  402468:	2b00      	cmp	r3, #0
  40246a:	d12c      	bne.n	4024c6 <vTaskSwitchContext+0x62>
{
  40246c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40246e:	2200      	movs	r2, #0
  402470:	4b2b      	ldr	r3, [pc, #172]	; (402520 <vTaskSwitchContext+0xbc>)
  402472:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402474:	4b2b      	ldr	r3, [pc, #172]	; (402524 <vTaskSwitchContext+0xc0>)
  402476:	681b      	ldr	r3, [r3, #0]
  402478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40247a:	681a      	ldr	r2, [r3, #0]
  40247c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402480:	d103      	bne.n	40248a <vTaskSwitchContext+0x26>
  402482:	685a      	ldr	r2, [r3, #4]
  402484:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402488:	d021      	beq.n	4024ce <vTaskSwitchContext+0x6a>
  40248a:	4b26      	ldr	r3, [pc, #152]	; (402524 <vTaskSwitchContext+0xc0>)
  40248c:	6818      	ldr	r0, [r3, #0]
  40248e:	6819      	ldr	r1, [r3, #0]
  402490:	3134      	adds	r1, #52	; 0x34
  402492:	4b25      	ldr	r3, [pc, #148]	; (402528 <vTaskSwitchContext+0xc4>)
  402494:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402496:	4b25      	ldr	r3, [pc, #148]	; (40252c <vTaskSwitchContext+0xc8>)
  402498:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  40249a:	fab3 f383 	clz	r3, r3
  40249e:	b2db      	uxtb	r3, r3
  4024a0:	f1c3 031f 	rsb	r3, r3, #31
  4024a4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4024a8:	0092      	lsls	r2, r2, #2
  4024aa:	4921      	ldr	r1, [pc, #132]	; (402530 <vTaskSwitchContext+0xcc>)
  4024ac:	588a      	ldr	r2, [r1, r2]
  4024ae:	b9ba      	cbnz	r2, 4024e0 <vTaskSwitchContext+0x7c>
	__asm volatile
  4024b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024b4:	b672      	cpsid	i
  4024b6:	f383 8811 	msr	BASEPRI, r3
  4024ba:	f3bf 8f6f 	isb	sy
  4024be:	f3bf 8f4f 	dsb	sy
  4024c2:	b662      	cpsie	i
  4024c4:	e7fe      	b.n	4024c4 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  4024c6:	2201      	movs	r2, #1
  4024c8:	4b15      	ldr	r3, [pc, #84]	; (402520 <vTaskSwitchContext+0xbc>)
  4024ca:	601a      	str	r2, [r3, #0]
  4024cc:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4024ce:	689a      	ldr	r2, [r3, #8]
  4024d0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4024d4:	d1d9      	bne.n	40248a <vTaskSwitchContext+0x26>
  4024d6:	68db      	ldr	r3, [r3, #12]
  4024d8:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4024dc:	d1d5      	bne.n	40248a <vTaskSwitchContext+0x26>
  4024de:	e7da      	b.n	402496 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4024e0:	4a13      	ldr	r2, [pc, #76]	; (402530 <vTaskSwitchContext+0xcc>)
  4024e2:	0099      	lsls	r1, r3, #2
  4024e4:	18c8      	adds	r0, r1, r3
  4024e6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4024ea:	6844      	ldr	r4, [r0, #4]
  4024ec:	6864      	ldr	r4, [r4, #4]
  4024ee:	6044      	str	r4, [r0, #4]
  4024f0:	4419      	add	r1, r3
  4024f2:	4602      	mov	r2, r0
  4024f4:	3208      	adds	r2, #8
  4024f6:	4294      	cmp	r4, r2
  4024f8:	d009      	beq.n	40250e <vTaskSwitchContext+0xaa>
  4024fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4024fe:	4a0c      	ldr	r2, [pc, #48]	; (402530 <vTaskSwitchContext+0xcc>)
  402500:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402504:	685b      	ldr	r3, [r3, #4]
  402506:	68da      	ldr	r2, [r3, #12]
  402508:	4b06      	ldr	r3, [pc, #24]	; (402524 <vTaskSwitchContext+0xc0>)
  40250a:	601a      	str	r2, [r3, #0]
  40250c:	bd10      	pop	{r4, pc}
  40250e:	6860      	ldr	r0, [r4, #4]
  402510:	4a07      	ldr	r2, [pc, #28]	; (402530 <vTaskSwitchContext+0xcc>)
  402512:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  402516:	6050      	str	r0, [r2, #4]
  402518:	e7ef      	b.n	4024fa <vTaskSwitchContext+0x96>
  40251a:	bf00      	nop
  40251c:	20400ad4 	.word	0x20400ad4
  402520:	20400b58 	.word	0x20400b58
  402524:	20400a58 	.word	0x20400a58
  402528:	00403531 	.word	0x00403531
  40252c:	20400adc 	.word	0x20400adc
  402530:	20400a64 	.word	0x20400a64

00402534 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
  402534:	b950      	cbnz	r0, 40254c <vTaskPlaceOnEventList+0x18>
  402536:	f04f 0380 	mov.w	r3, #128	; 0x80
  40253a:	b672      	cpsid	i
  40253c:	f383 8811 	msr	BASEPRI, r3
  402540:	f3bf 8f6f 	isb	sy
  402544:	f3bf 8f4f 	dsb	sy
  402548:	b662      	cpsie	i
  40254a:	e7fe      	b.n	40254a <vTaskPlaceOnEventList+0x16>
{
  40254c:	b510      	push	{r4, lr}
  40254e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402550:	4b04      	ldr	r3, [pc, #16]	; (402564 <vTaskPlaceOnEventList+0x30>)
  402552:	6819      	ldr	r1, [r3, #0]
  402554:	3118      	adds	r1, #24
  402556:	4b04      	ldr	r3, [pc, #16]	; (402568 <vTaskPlaceOnEventList+0x34>)
  402558:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  40255a:	2101      	movs	r1, #1
  40255c:	4620      	mov	r0, r4
  40255e:	4b03      	ldr	r3, [pc, #12]	; (40256c <vTaskPlaceOnEventList+0x38>)
  402560:	4798      	blx	r3
  402562:	bd10      	pop	{r4, pc}
  402564:	20400a58 	.word	0x20400a58
  402568:	00400eb5 	.word	0x00400eb5
  40256c:	00401e65 	.word	0x00401e65

00402570 <vTaskPlaceOnEventListRestricted>:
	{
  402570:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
  402572:	b178      	cbz	r0, 402594 <vTaskPlaceOnEventListRestricted+0x24>
  402574:	4614      	mov	r4, r2
  402576:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402578:	4b0c      	ldr	r3, [pc, #48]	; (4025ac <vTaskPlaceOnEventListRestricted+0x3c>)
  40257a:	6819      	ldr	r1, [r3, #0]
  40257c:	3118      	adds	r1, #24
  40257e:	4b0c      	ldr	r3, [pc, #48]	; (4025b0 <vTaskPlaceOnEventListRestricted+0x40>)
  402580:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
  402582:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  402584:	4621      	mov	r1, r4
  402586:	bf0c      	ite	eq
  402588:	4628      	moveq	r0, r5
  40258a:	f04f 30ff 	movne.w	r0, #4294967295
  40258e:	4b09      	ldr	r3, [pc, #36]	; (4025b4 <vTaskPlaceOnEventListRestricted+0x44>)
  402590:	4798      	blx	r3
  402592:	bd38      	pop	{r3, r4, r5, pc}
  402594:	f04f 0380 	mov.w	r3, #128	; 0x80
  402598:	b672      	cpsid	i
  40259a:	f383 8811 	msr	BASEPRI, r3
  40259e:	f3bf 8f6f 	isb	sy
  4025a2:	f3bf 8f4f 	dsb	sy
  4025a6:	b662      	cpsie	i
  4025a8:	e7fe      	b.n	4025a8 <vTaskPlaceOnEventListRestricted+0x38>
  4025aa:	bf00      	nop
  4025ac:	20400a58 	.word	0x20400a58
  4025b0:	00400e9d 	.word	0x00400e9d
  4025b4:	00401e65 	.word	0x00401e65

004025b8 <xTaskRemoveFromEventList>:
{
  4025b8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4025ba:	68c3      	ldr	r3, [r0, #12]
  4025bc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4025be:	b324      	cbz	r4, 40260a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4025c0:	f104 0518 	add.w	r5, r4, #24
  4025c4:	4628      	mov	r0, r5
  4025c6:	4b1a      	ldr	r3, [pc, #104]	; (402630 <xTaskRemoveFromEventList+0x78>)
  4025c8:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4025ca:	4b1a      	ldr	r3, [pc, #104]	; (402634 <xTaskRemoveFromEventList+0x7c>)
  4025cc:	681b      	ldr	r3, [r3, #0]
  4025ce:	bb3b      	cbnz	r3, 402620 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  4025d0:	1d25      	adds	r5, r4, #4
  4025d2:	4628      	mov	r0, r5
  4025d4:	4b16      	ldr	r3, [pc, #88]	; (402630 <xTaskRemoveFromEventList+0x78>)
  4025d6:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4025d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4025da:	4a17      	ldr	r2, [pc, #92]	; (402638 <xTaskRemoveFromEventList+0x80>)
  4025dc:	6811      	ldr	r1, [r2, #0]
  4025de:	2301      	movs	r3, #1
  4025e0:	4083      	lsls	r3, r0
  4025e2:	430b      	orrs	r3, r1
  4025e4:	6013      	str	r3, [r2, #0]
  4025e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4025ea:	4629      	mov	r1, r5
  4025ec:	4b13      	ldr	r3, [pc, #76]	; (40263c <xTaskRemoveFromEventList+0x84>)
  4025ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4025f2:	4b13      	ldr	r3, [pc, #76]	; (402640 <xTaskRemoveFromEventList+0x88>)
  4025f4:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4025f6:	4b13      	ldr	r3, [pc, #76]	; (402644 <xTaskRemoveFromEventList+0x8c>)
  4025f8:	681b      	ldr	r3, [r3, #0]
  4025fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4025fe:	429a      	cmp	r2, r3
  402600:	d913      	bls.n	40262a <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402602:	2001      	movs	r0, #1
  402604:	4b10      	ldr	r3, [pc, #64]	; (402648 <xTaskRemoveFromEventList+0x90>)
  402606:	6018      	str	r0, [r3, #0]
  402608:	bd38      	pop	{r3, r4, r5, pc}
  40260a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40260e:	b672      	cpsid	i
  402610:	f383 8811 	msr	BASEPRI, r3
  402614:	f3bf 8f6f 	isb	sy
  402618:	f3bf 8f4f 	dsb	sy
  40261c:	b662      	cpsie	i
  40261e:	e7fe      	b.n	40261e <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402620:	4629      	mov	r1, r5
  402622:	480a      	ldr	r0, [pc, #40]	; (40264c <xTaskRemoveFromEventList+0x94>)
  402624:	4b06      	ldr	r3, [pc, #24]	; (402640 <xTaskRemoveFromEventList+0x88>)
  402626:	4798      	blx	r3
  402628:	e7e5      	b.n	4025f6 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  40262a:	2000      	movs	r0, #0
}
  40262c:	bd38      	pop	{r3, r4, r5, pc}
  40262e:	bf00      	nop
  402630:	00400ee9 	.word	0x00400ee9
  402634:	20400ad4 	.word	0x20400ad4
  402638:	20400adc 	.word	0x20400adc
  40263c:	20400a64 	.word	0x20400a64
  402640:	00400e9d 	.word	0x00400e9d
  402644:	20400a58 	.word	0x20400a58
  402648:	20400b58 	.word	0x20400b58
  40264c:	20400b14 	.word	0x20400b14

00402650 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402650:	4b03      	ldr	r3, [pc, #12]	; (402660 <vTaskInternalSetTimeOutState+0x10>)
  402652:	681b      	ldr	r3, [r3, #0]
  402654:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402656:	4b03      	ldr	r3, [pc, #12]	; (402664 <vTaskInternalSetTimeOutState+0x14>)
  402658:	681b      	ldr	r3, [r3, #0]
  40265a:	6043      	str	r3, [r0, #4]
  40265c:	4770      	bx	lr
  40265e:	bf00      	nop
  402660:	20400b10 	.word	0x20400b10
  402664:	20400b54 	.word	0x20400b54

00402668 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
  402668:	b1a8      	cbz	r0, 402696 <xTaskCheckForTimeOut+0x2e>
{
  40266a:	b570      	push	{r4, r5, r6, lr}
  40266c:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
  40266e:	b1e9      	cbz	r1, 4026ac <xTaskCheckForTimeOut+0x44>
  402670:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
  402672:	4b1d      	ldr	r3, [pc, #116]	; (4026e8 <xTaskCheckForTimeOut+0x80>)
  402674:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402676:	4b1d      	ldr	r3, [pc, #116]	; (4026ec <xTaskCheckForTimeOut+0x84>)
  402678:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  40267a:	6869      	ldr	r1, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
  40267c:	6823      	ldr	r3, [r4, #0]
  40267e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402682:	d02f      	beq.n	4026e4 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402684:	481a      	ldr	r0, [pc, #104]	; (4026f0 <xTaskCheckForTimeOut+0x88>)
  402686:	6800      	ldr	r0, [r0, #0]
  402688:	682e      	ldr	r6, [r5, #0]
  40268a:	4286      	cmp	r6, r0
  40268c:	d019      	beq.n	4026c2 <xTaskCheckForTimeOut+0x5a>
  40268e:	428a      	cmp	r2, r1
  402690:	d317      	bcc.n	4026c2 <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
  402692:	2401      	movs	r4, #1
  402694:	e01b      	b.n	4026ce <xTaskCheckForTimeOut+0x66>
  402696:	f04f 0380 	mov.w	r3, #128	; 0x80
  40269a:	b672      	cpsid	i
  40269c:	f383 8811 	msr	BASEPRI, r3
  4026a0:	f3bf 8f6f 	isb	sy
  4026a4:	f3bf 8f4f 	dsb	sy
  4026a8:	b662      	cpsie	i
  4026aa:	e7fe      	b.n	4026aa <xTaskCheckForTimeOut+0x42>
  4026ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026b0:	b672      	cpsid	i
  4026b2:	f383 8811 	msr	BASEPRI, r3
  4026b6:	f3bf 8f6f 	isb	sy
  4026ba:	f3bf 8f4f 	dsb	sy
  4026be:	b662      	cpsie	i
  4026c0:	e7fe      	b.n	4026c0 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  4026c2:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  4026c4:	429a      	cmp	r2, r3
  4026c6:	d306      	bcc.n	4026d6 <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait = 0;
  4026c8:	2300      	movs	r3, #0
  4026ca:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
  4026cc:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  4026ce:	4b09      	ldr	r3, [pc, #36]	; (4026f4 <xTaskCheckForTimeOut+0x8c>)
  4026d0:	4798      	blx	r3
}
  4026d2:	4620      	mov	r0, r4
  4026d4:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= xElapsedTime;
  4026d6:	1a9b      	subs	r3, r3, r2
  4026d8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  4026da:	4628      	mov	r0, r5
  4026dc:	4b06      	ldr	r3, [pc, #24]	; (4026f8 <xTaskCheckForTimeOut+0x90>)
  4026de:	4798      	blx	r3
			xReturn = pdFALSE;
  4026e0:	2400      	movs	r4, #0
  4026e2:	e7f4      	b.n	4026ce <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
  4026e4:	2400      	movs	r4, #0
  4026e6:	e7f2      	b.n	4026ce <xTaskCheckForTimeOut+0x66>
  4026e8:	00400fe5 	.word	0x00400fe5
  4026ec:	20400b54 	.word	0x20400b54
  4026f0:	20400b10 	.word	0x20400b10
  4026f4:	00401031 	.word	0x00401031
  4026f8:	00402651 	.word	0x00402651

004026fc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4026fc:	2201      	movs	r2, #1
  4026fe:	4b01      	ldr	r3, [pc, #4]	; (402704 <vTaskMissedYield+0x8>)
  402700:	601a      	str	r2, [r3, #0]
  402702:	4770      	bx	lr
  402704:	20400b58 	.word	0x20400b58

00402708 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
  402708:	4b05      	ldr	r3, [pc, #20]	; (402720 <xTaskGetSchedulerState+0x18>)
  40270a:	681b      	ldr	r3, [r3, #0]
  40270c:	b133      	cbz	r3, 40271c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40270e:	4b05      	ldr	r3, [pc, #20]	; (402724 <xTaskGetSchedulerState+0x1c>)
  402710:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
  402712:	2b00      	cmp	r3, #0
  402714:	bf0c      	ite	eq
  402716:	2002      	moveq	r0, #2
  402718:	2000      	movne	r0, #0
  40271a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  40271c:	2001      	movs	r0, #1
	}
  40271e:	4770      	bx	lr
  402720:	20400b28 	.word	0x20400b28
  402724:	20400ad4 	.word	0x20400ad4

00402728 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
  402728:	2800      	cmp	r0, #0
  40272a:	d050      	beq.n	4027ce <xTaskPriorityInherit+0xa6>
	{
  40272c:	b538      	push	{r3, r4, r5, lr}
  40272e:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
  402730:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402732:	4928      	ldr	r1, [pc, #160]	; (4027d4 <xTaskPriorityInherit+0xac>)
  402734:	6809      	ldr	r1, [r1, #0]
  402736:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402738:	428a      	cmp	r2, r1
  40273a:	d23f      	bcs.n	4027bc <xTaskPriorityInherit+0x94>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  40273c:	6981      	ldr	r1, [r0, #24]
  40273e:	2900      	cmp	r1, #0
  402740:	db05      	blt.n	40274e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402742:	4924      	ldr	r1, [pc, #144]	; (4027d4 <xTaskPriorityInherit+0xac>)
  402744:	6809      	ldr	r1, [r1, #0]
  402746:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402748:	f1c1 0105 	rsb	r1, r1, #5
  40274c:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
  40274e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402752:	4921      	ldr	r1, [pc, #132]	; (4027d8 <xTaskPriorityInherit+0xb0>)
  402754:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402758:	6961      	ldr	r1, [r4, #20]
  40275a:	4291      	cmp	r1, r2
  40275c:	d005      	beq.n	40276a <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  40275e:	4a1d      	ldr	r2, [pc, #116]	; (4027d4 <xTaskPriorityInherit+0xac>)
  402760:	6812      	ldr	r2, [r2, #0]
  402762:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402764:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
  402766:	2001      	movs	r0, #1
  402768:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  40276a:	1d25      	adds	r5, r4, #4
  40276c:	4628      	mov	r0, r5
  40276e:	4b1b      	ldr	r3, [pc, #108]	; (4027dc <xTaskPriorityInherit+0xb4>)
  402770:	4798      	blx	r3
  402772:	b970      	cbnz	r0, 402792 <xTaskPriorityInherit+0x6a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
  402774:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402776:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  40277a:	009b      	lsls	r3, r3, #2
  40277c:	4916      	ldr	r1, [pc, #88]	; (4027d8 <xTaskPriorityInherit+0xb0>)
  40277e:	58cb      	ldr	r3, [r1, r3]
  402780:	b93b      	cbnz	r3, 402792 <xTaskPriorityInherit+0x6a>
  402782:	4817      	ldr	r0, [pc, #92]	; (4027e0 <xTaskPriorityInherit+0xb8>)
  402784:	6803      	ldr	r3, [r0, #0]
  402786:	2101      	movs	r1, #1
  402788:	fa01 f202 	lsl.w	r2, r1, r2
  40278c:	ea23 0202 	bic.w	r2, r3, r2
  402790:	6002      	str	r2, [r0, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  402792:	4b10      	ldr	r3, [pc, #64]	; (4027d4 <xTaskPriorityInherit+0xac>)
  402794:	681b      	ldr	r3, [r3, #0]
  402796:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402798:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
  40279a:	4a11      	ldr	r2, [pc, #68]	; (4027e0 <xTaskPriorityInherit+0xb8>)
  40279c:	6811      	ldr	r1, [r2, #0]
  40279e:	2401      	movs	r4, #1
  4027a0:	fa04 f300 	lsl.w	r3, r4, r0
  4027a4:	430b      	orrs	r3, r1
  4027a6:	6013      	str	r3, [r2, #0]
  4027a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4027ac:	4629      	mov	r1, r5
  4027ae:	4b0a      	ldr	r3, [pc, #40]	; (4027d8 <xTaskPriorityInherit+0xb0>)
  4027b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4027b4:	4b0b      	ldr	r3, [pc, #44]	; (4027e4 <xTaskPriorityInherit+0xbc>)
  4027b6:	4798      	blx	r3
				xReturn = pdTRUE;
  4027b8:	4620      	mov	r0, r4
  4027ba:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
  4027bc:	4a05      	ldr	r2, [pc, #20]	; (4027d4 <xTaskPriorityInherit+0xac>)
  4027be:	6812      	ldr	r2, [r2, #0]
  4027c0:	6c80      	ldr	r0, [r0, #72]	; 0x48
  4027c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  4027c4:	4298      	cmp	r0, r3
  4027c6:	bf2c      	ite	cs
  4027c8:	2000      	movcs	r0, #0
  4027ca:	2001      	movcc	r0, #1
  4027cc:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  4027ce:	2000      	movs	r0, #0
		return xReturn;
  4027d0:	4770      	bx	lr
  4027d2:	bf00      	nop
  4027d4:	20400a58 	.word	0x20400a58
  4027d8:	20400a64 	.word	0x20400a64
  4027dc:	00400ee9 	.word	0x00400ee9
  4027e0:	20400adc 	.word	0x20400adc
  4027e4:	00400e9d 	.word	0x00400e9d

004027e8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  4027e8:	2800      	cmp	r0, #0
  4027ea:	d04d      	beq.n	402888 <xTaskPriorityDisinherit+0xa0>
	{
  4027ec:	b538      	push	{r3, r4, r5, lr}
  4027ee:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
  4027f0:	4a27      	ldr	r2, [pc, #156]	; (402890 <xTaskPriorityDisinherit+0xa8>)
  4027f2:	6812      	ldr	r2, [r2, #0]
  4027f4:	4290      	cmp	r0, r2
  4027f6:	d00a      	beq.n	40280e <xTaskPriorityDisinherit+0x26>
  4027f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027fc:	b672      	cpsid	i
  4027fe:	f383 8811 	msr	BASEPRI, r3
  402802:	f3bf 8f6f 	isb	sy
  402806:	f3bf 8f4f 	dsb	sy
  40280a:	b662      	cpsie	i
  40280c:	e7fe      	b.n	40280c <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
  40280e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402810:	b952      	cbnz	r2, 402828 <xTaskPriorityDisinherit+0x40>
  402812:	f04f 0380 	mov.w	r3, #128	; 0x80
  402816:	b672      	cpsid	i
  402818:	f383 8811 	msr	BASEPRI, r3
  40281c:	f3bf 8f6f 	isb	sy
  402820:	f3bf 8f4f 	dsb	sy
  402824:	b662      	cpsie	i
  402826:	e7fe      	b.n	402826 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402828:	3a01      	subs	r2, #1
  40282a:	64c2      	str	r2, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40282c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  40282e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402830:	4288      	cmp	r0, r1
  402832:	d02b      	beq.n	40288c <xTaskPriorityDisinherit+0xa4>
  402834:	bb52      	cbnz	r2, 40288c <xTaskPriorityDisinherit+0xa4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  402836:	1d25      	adds	r5, r4, #4
  402838:	4628      	mov	r0, r5
  40283a:	4b16      	ldr	r3, [pc, #88]	; (402894 <xTaskPriorityDisinherit+0xac>)
  40283c:	4798      	blx	r3
  40283e:	b968      	cbnz	r0, 40285c <xTaskPriorityDisinherit+0x74>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402840:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402842:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  402846:	009b      	lsls	r3, r3, #2
  402848:	4a13      	ldr	r2, [pc, #76]	; (402898 <xTaskPriorityDisinherit+0xb0>)
  40284a:	58d3      	ldr	r3, [r2, r3]
  40284c:	b933      	cbnz	r3, 40285c <xTaskPriorityDisinherit+0x74>
  40284e:	4813      	ldr	r0, [pc, #76]	; (40289c <xTaskPriorityDisinherit+0xb4>)
  402850:	6803      	ldr	r3, [r0, #0]
  402852:	2201      	movs	r2, #1
  402854:	408a      	lsls	r2, r1
  402856:	ea23 0302 	bic.w	r3, r3, r2
  40285a:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  40285c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  40285e:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402860:	f1c0 0305 	rsb	r3, r0, #5
  402864:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402866:	4a0d      	ldr	r2, [pc, #52]	; (40289c <xTaskPriorityDisinherit+0xb4>)
  402868:	6811      	ldr	r1, [r2, #0]
  40286a:	2401      	movs	r4, #1
  40286c:	fa04 f300 	lsl.w	r3, r4, r0
  402870:	430b      	orrs	r3, r1
  402872:	6013      	str	r3, [r2, #0]
  402874:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402878:	4629      	mov	r1, r5
  40287a:	4b07      	ldr	r3, [pc, #28]	; (402898 <xTaskPriorityDisinherit+0xb0>)
  40287c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402880:	4b07      	ldr	r3, [pc, #28]	; (4028a0 <xTaskPriorityDisinherit+0xb8>)
  402882:	4798      	blx	r3
					xReturn = pdTRUE;
  402884:	4620      	mov	r0, r4
  402886:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402888:	2000      	movs	r0, #0
  40288a:	4770      	bx	lr
  40288c:	2000      	movs	r0, #0
	}
  40288e:	bd38      	pop	{r3, r4, r5, pc}
  402890:	20400a58 	.word	0x20400a58
  402894:	00400ee9 	.word	0x00400ee9
  402898:	20400a64 	.word	0x20400a64
  40289c:	20400adc 	.word	0x20400adc
  4028a0:	00400e9d 	.word	0x00400e9d

004028a4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
  4028a4:	2800      	cmp	r0, #0
  4028a6:	d058      	beq.n	40295a <vTaskPriorityDisinheritAfterTimeout+0xb6>
	{
  4028a8:	b538      	push	{r3, r4, r5, lr}
  4028aa:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
  4028ac:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  4028ae:	b950      	cbnz	r0, 4028c6 <vTaskPriorityDisinheritAfterTimeout+0x22>
  4028b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028b4:	b672      	cpsid	i
  4028b6:	f383 8811 	msr	BASEPRI, r3
  4028ba:	f3bf 8f6f 	isb	sy
  4028be:	f3bf 8f4f 	dsb	sy
  4028c2:	b662      	cpsie	i
  4028c4:	e7fe      	b.n	4028c4 <vTaskPriorityDisinheritAfterTimeout+0x20>
  4028c6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  4028c8:	428a      	cmp	r2, r1
  4028ca:	bf38      	it	cc
  4028cc:	460a      	movcc	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
  4028ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
  4028d0:	2801      	cmp	r0, #1
  4028d2:	d141      	bne.n	402958 <vTaskPriorityDisinheritAfterTimeout+0xb4>
  4028d4:	4291      	cmp	r1, r2
  4028d6:	d03f      	beq.n	402958 <vTaskPriorityDisinheritAfterTimeout+0xb4>
					configASSERT( pxTCB != pxCurrentTCB );
  4028d8:	4820      	ldr	r0, [pc, #128]	; (40295c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
  4028da:	6800      	ldr	r0, [r0, #0]
  4028dc:	4284      	cmp	r4, r0
  4028de:	d10a      	bne.n	4028f6 <vTaskPriorityDisinheritAfterTimeout+0x52>
  4028e0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028e4:	b672      	cpsid	i
  4028e6:	f383 8811 	msr	BASEPRI, r3
  4028ea:	f3bf 8f6f 	isb	sy
  4028ee:	f3bf 8f4f 	dsb	sy
  4028f2:	b662      	cpsie	i
  4028f4:	e7fe      	b.n	4028f4 <vTaskPriorityDisinheritAfterTimeout+0x50>
					pxTCB->uxPriority = uxPriorityToUse;
  4028f6:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4028f8:	69a0      	ldr	r0, [r4, #24]
  4028fa:	2800      	cmp	r0, #0
  4028fc:	db02      	blt.n	402904 <vTaskPriorityDisinheritAfterTimeout+0x60>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4028fe:	f1c2 0205 	rsb	r2, r2, #5
  402902:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
  402904:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  402908:	4a15      	ldr	r2, [pc, #84]	; (402960 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  40290a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  40290e:	6962      	ldr	r2, [r4, #20]
  402910:	428a      	cmp	r2, r1
  402912:	d121      	bne.n	402958 <vTaskPriorityDisinheritAfterTimeout+0xb4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  402914:	1d25      	adds	r5, r4, #4
  402916:	4628      	mov	r0, r5
  402918:	4b12      	ldr	r3, [pc, #72]	; (402964 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
  40291a:	4798      	blx	r3
  40291c:	b968      	cbnz	r0, 40293a <vTaskPriorityDisinheritAfterTimeout+0x96>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40291e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402920:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  402924:	009b      	lsls	r3, r3, #2
  402926:	4a0e      	ldr	r2, [pc, #56]	; (402960 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  402928:	58d3      	ldr	r3, [r2, r3]
  40292a:	b933      	cbnz	r3, 40293a <vTaskPriorityDisinheritAfterTimeout+0x96>
  40292c:	480e      	ldr	r0, [pc, #56]	; (402968 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
  40292e:	6803      	ldr	r3, [r0, #0]
  402930:	2201      	movs	r2, #1
  402932:	408a      	lsls	r2, r1
  402934:	ea23 0302 	bic.w	r3, r3, r2
  402938:	6003      	str	r3, [r0, #0]
						prvAddTaskToReadyList( pxTCB );
  40293a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40293c:	4a0a      	ldr	r2, [pc, #40]	; (402968 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
  40293e:	6811      	ldr	r1, [r2, #0]
  402940:	2301      	movs	r3, #1
  402942:	4083      	lsls	r3, r0
  402944:	430b      	orrs	r3, r1
  402946:	6013      	str	r3, [r2, #0]
  402948:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40294c:	4629      	mov	r1, r5
  40294e:	4b04      	ldr	r3, [pc, #16]	; (402960 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  402950:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402954:	4b05      	ldr	r3, [pc, #20]	; (40296c <vTaskPriorityDisinheritAfterTimeout+0xc8>)
  402956:	4798      	blx	r3
  402958:	bd38      	pop	{r3, r4, r5, pc}
  40295a:	4770      	bx	lr
  40295c:	20400a58 	.word	0x20400a58
  402960:	20400a64 	.word	0x20400a64
  402964:	00400ee9 	.word	0x00400ee9
  402968:	20400adc 	.word	0x20400adc
  40296c:	00400e9d 	.word	0x00400e9d

00402970 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
  402970:	4b05      	ldr	r3, [pc, #20]	; (402988 <pvTaskIncrementMutexHeldCount+0x18>)
  402972:	681b      	ldr	r3, [r3, #0]
  402974:	b123      	cbz	r3, 402980 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
  402976:	4b04      	ldr	r3, [pc, #16]	; (402988 <pvTaskIncrementMutexHeldCount+0x18>)
  402978:	681a      	ldr	r2, [r3, #0]
  40297a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  40297c:	3301      	adds	r3, #1
  40297e:	64d3      	str	r3, [r2, #76]	; 0x4c
		return pxCurrentTCB;
  402980:	4b01      	ldr	r3, [pc, #4]	; (402988 <pvTaskIncrementMutexHeldCount+0x18>)
  402982:	6818      	ldr	r0, [r3, #0]
	}
  402984:	4770      	bx	lr
  402986:	bf00      	nop
  402988:	20400a58 	.word	0x20400a58

0040298c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  40298c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40298e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402990:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402992:	4291      	cmp	r1, r2
  402994:	d80c      	bhi.n	4029b0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402996:	1ad2      	subs	r2, r2, r3
  402998:	6983      	ldr	r3, [r0, #24]
  40299a:	429a      	cmp	r2, r3
  40299c:	d301      	bcc.n	4029a2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40299e:	2001      	movs	r0, #1
  4029a0:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4029a2:	1d01      	adds	r1, r0, #4
  4029a4:	4b09      	ldr	r3, [pc, #36]	; (4029cc <prvInsertTimerInActiveList+0x40>)
  4029a6:	6818      	ldr	r0, [r3, #0]
  4029a8:	4b09      	ldr	r3, [pc, #36]	; (4029d0 <prvInsertTimerInActiveList+0x44>)
  4029aa:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4029ac:	2000      	movs	r0, #0
  4029ae:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4029b0:	429a      	cmp	r2, r3
  4029b2:	d203      	bcs.n	4029bc <prvInsertTimerInActiveList+0x30>
  4029b4:	4299      	cmp	r1, r3
  4029b6:	d301      	bcc.n	4029bc <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4029b8:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4029ba:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4029bc:	1d01      	adds	r1, r0, #4
  4029be:	4b05      	ldr	r3, [pc, #20]	; (4029d4 <prvInsertTimerInActiveList+0x48>)
  4029c0:	6818      	ldr	r0, [r3, #0]
  4029c2:	4b03      	ldr	r3, [pc, #12]	; (4029d0 <prvInsertTimerInActiveList+0x44>)
  4029c4:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4029c6:	2000      	movs	r0, #0
  4029c8:	bd08      	pop	{r3, pc}
  4029ca:	bf00      	nop
  4029cc:	20400b60 	.word	0x20400b60
  4029d0:	00400eb5 	.word	0x00400eb5
  4029d4:	20400b5c 	.word	0x20400b5c

004029d8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4029d8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4029da:	4b10      	ldr	r3, [pc, #64]	; (402a1c <prvCheckForValidListAndQueue+0x44>)
  4029dc:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4029de:	4b10      	ldr	r3, [pc, #64]	; (402a20 <prvCheckForValidListAndQueue+0x48>)
  4029e0:	681b      	ldr	r3, [r3, #0]
  4029e2:	b113      	cbz	r3, 4029ea <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4029e4:	4b0f      	ldr	r3, [pc, #60]	; (402a24 <prvCheckForValidListAndQueue+0x4c>)
  4029e6:	4798      	blx	r3
  4029e8:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4029ea:	4d0f      	ldr	r5, [pc, #60]	; (402a28 <prvCheckForValidListAndQueue+0x50>)
  4029ec:	4628      	mov	r0, r5
  4029ee:	4e0f      	ldr	r6, [pc, #60]	; (402a2c <prvCheckForValidListAndQueue+0x54>)
  4029f0:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4029f2:	4c0f      	ldr	r4, [pc, #60]	; (402a30 <prvCheckForValidListAndQueue+0x58>)
  4029f4:	4620      	mov	r0, r4
  4029f6:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4029f8:	4b0e      	ldr	r3, [pc, #56]	; (402a34 <prvCheckForValidListAndQueue+0x5c>)
  4029fa:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4029fc:	4b0e      	ldr	r3, [pc, #56]	; (402a38 <prvCheckForValidListAndQueue+0x60>)
  4029fe:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402a00:	2200      	movs	r2, #0
  402a02:	2110      	movs	r1, #16
  402a04:	2005      	movs	r0, #5
  402a06:	4b0d      	ldr	r3, [pc, #52]	; (402a3c <prvCheckForValidListAndQueue+0x64>)
  402a08:	4798      	blx	r3
  402a0a:	4b05      	ldr	r3, [pc, #20]	; (402a20 <prvCheckForValidListAndQueue+0x48>)
  402a0c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  402a0e:	2800      	cmp	r0, #0
  402a10:	d0e8      	beq.n	4029e4 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402a12:	490b      	ldr	r1, [pc, #44]	; (402a40 <prvCheckForValidListAndQueue+0x68>)
  402a14:	4b0b      	ldr	r3, [pc, #44]	; (402a44 <prvCheckForValidListAndQueue+0x6c>)
  402a16:	4798      	blx	r3
  402a18:	e7e4      	b.n	4029e4 <prvCheckForValidListAndQueue+0xc>
  402a1a:	bf00      	nop
  402a1c:	00400fe5 	.word	0x00400fe5
  402a20:	20400b90 	.word	0x20400b90
  402a24:	00401031 	.word	0x00401031
  402a28:	20400b64 	.word	0x20400b64
  402a2c:	00400e81 	.word	0x00400e81
  402a30:	20400b78 	.word	0x20400b78
  402a34:	20400b5c 	.word	0x20400b5c
  402a38:	20400b60 	.word	0x20400b60
  402a3c:	00401551 	.word	0x00401551
  402a40:	004066a0 	.word	0x004066a0
  402a44:	00401d21 	.word	0x00401d21

00402a48 <xTimerCreateTimerTask>:
{
  402a48:	b510      	push	{r4, lr}
  402a4a:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
  402a4c:	4b0e      	ldr	r3, [pc, #56]	; (402a88 <xTimerCreateTimerTask+0x40>)
  402a4e:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402a50:	4b0e      	ldr	r3, [pc, #56]	; (402a8c <xTimerCreateTimerTask+0x44>)
  402a52:	681b      	ldr	r3, [r3, #0]
  402a54:	b16b      	cbz	r3, 402a72 <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate(	prvTimerTask,
  402a56:	4b0e      	ldr	r3, [pc, #56]	; (402a90 <xTimerCreateTimerTask+0x48>)
  402a58:	9301      	str	r3, [sp, #4]
  402a5a:	2304      	movs	r3, #4
  402a5c:	9300      	str	r3, [sp, #0]
  402a5e:	2300      	movs	r3, #0
  402a60:	f44f 7282 	mov.w	r2, #260	; 0x104
  402a64:	490b      	ldr	r1, [pc, #44]	; (402a94 <xTimerCreateTimerTask+0x4c>)
  402a66:	480c      	ldr	r0, [pc, #48]	; (402a98 <xTimerCreateTimerTask+0x50>)
  402a68:	4c0c      	ldr	r4, [pc, #48]	; (402a9c <xTimerCreateTimerTask+0x54>)
  402a6a:	47a0      	blx	r4
	configASSERT( xReturn );
  402a6c:	b108      	cbz	r0, 402a72 <xTimerCreateTimerTask+0x2a>
}
  402a6e:	b002      	add	sp, #8
  402a70:	bd10      	pop	{r4, pc}
  402a72:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a76:	b672      	cpsid	i
  402a78:	f383 8811 	msr	BASEPRI, r3
  402a7c:	f3bf 8f6f 	isb	sy
  402a80:	f3bf 8f4f 	dsb	sy
  402a84:	b662      	cpsie	i
  402a86:	e7fe      	b.n	402a86 <xTimerCreateTimerTask+0x3e>
  402a88:	004029d9 	.word	0x004029d9
  402a8c:	20400b90 	.word	0x20400b90
  402a90:	20400b94 	.word	0x20400b94
  402a94:	004066a8 	.word	0x004066a8
  402a98:	00402bc9 	.word	0x00402bc9
  402a9c:	00401f05 	.word	0x00401f05

00402aa0 <xTimerGenericCommand>:
	configASSERT( xTimer );
  402aa0:	b1d8      	cbz	r0, 402ada <xTimerGenericCommand+0x3a>
{
  402aa2:	b530      	push	{r4, r5, lr}
  402aa4:	b085      	sub	sp, #20
  402aa6:	4615      	mov	r5, r2
  402aa8:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402aaa:	4a15      	ldr	r2, [pc, #84]	; (402b00 <xTimerGenericCommand+0x60>)
  402aac:	6810      	ldr	r0, [r2, #0]
  402aae:	b320      	cbz	r0, 402afa <xTimerGenericCommand+0x5a>
  402ab0:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402ab2:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402ab4:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402ab6:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402ab8:	2905      	cmp	r1, #5
  402aba:	dc19      	bgt.n	402af0 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402abc:	4b11      	ldr	r3, [pc, #68]	; (402b04 <xTimerGenericCommand+0x64>)
  402abe:	4798      	blx	r3
  402ac0:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402ac2:	f04f 0300 	mov.w	r3, #0
  402ac6:	bf0c      	ite	eq
  402ac8:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402aca:	461a      	movne	r2, r3
  402acc:	4669      	mov	r1, sp
  402ace:	480c      	ldr	r0, [pc, #48]	; (402b00 <xTimerGenericCommand+0x60>)
  402ad0:	6800      	ldr	r0, [r0, #0]
  402ad2:	4c0d      	ldr	r4, [pc, #52]	; (402b08 <xTimerGenericCommand+0x68>)
  402ad4:	47a0      	blx	r4
}
  402ad6:	b005      	add	sp, #20
  402ad8:	bd30      	pop	{r4, r5, pc}
  402ada:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ade:	b672      	cpsid	i
  402ae0:	f383 8811 	msr	BASEPRI, r3
  402ae4:	f3bf 8f6f 	isb	sy
  402ae8:	f3bf 8f4f 	dsb	sy
  402aec:	b662      	cpsie	i
  402aee:	e7fe      	b.n	402aee <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402af0:	2300      	movs	r3, #0
  402af2:	4669      	mov	r1, sp
  402af4:	4c05      	ldr	r4, [pc, #20]	; (402b0c <xTimerGenericCommand+0x6c>)
  402af6:	47a0      	blx	r4
  402af8:	e7ed      	b.n	402ad6 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402afa:	2000      	movs	r0, #0
	return xReturn;
  402afc:	e7eb      	b.n	402ad6 <xTimerGenericCommand+0x36>
  402afe:	bf00      	nop
  402b00:	20400b90 	.word	0x20400b90
  402b04:	00402709 	.word	0x00402709
  402b08:	004015ad 	.word	0x004015ad
  402b0c:	0040179d 	.word	0x0040179d

00402b10 <prvSampleTimeNow>:
{
  402b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402b14:	b082      	sub	sp, #8
  402b16:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402b18:	4b24      	ldr	r3, [pc, #144]	; (402bac <prvSampleTimeNow+0x9c>)
  402b1a:	4798      	blx	r3
  402b1c:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402b1e:	4b24      	ldr	r3, [pc, #144]	; (402bb0 <prvSampleTimeNow+0xa0>)
  402b20:	681b      	ldr	r3, [r3, #0]
  402b22:	4298      	cmp	r0, r3
  402b24:	d31b      	bcc.n	402b5e <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402b26:	2300      	movs	r3, #0
  402b28:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402b2c:	4b20      	ldr	r3, [pc, #128]	; (402bb0 <prvSampleTimeNow+0xa0>)
  402b2e:	601f      	str	r7, [r3, #0]
}
  402b30:	4638      	mov	r0, r7
  402b32:	b002      	add	sp, #8
  402b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402b38:	2100      	movs	r1, #0
  402b3a:	9100      	str	r1, [sp, #0]
  402b3c:	460b      	mov	r3, r1
  402b3e:	4652      	mov	r2, sl
  402b40:	4620      	mov	r0, r4
  402b42:	4c1c      	ldr	r4, [pc, #112]	; (402bb4 <prvSampleTimeNow+0xa4>)
  402b44:	47a0      	blx	r4
				configASSERT( xResult );
  402b46:	b960      	cbnz	r0, 402b62 <prvSampleTimeNow+0x52>
  402b48:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b4c:	b672      	cpsid	i
  402b4e:	f383 8811 	msr	BASEPRI, r3
  402b52:	f3bf 8f6f 	isb	sy
  402b56:	f3bf 8f4f 	dsb	sy
  402b5a:	b662      	cpsie	i
  402b5c:	e7fe      	b.n	402b5c <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402b5e:	4d16      	ldr	r5, [pc, #88]	; (402bb8 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b60:	4e16      	ldr	r6, [pc, #88]	; (402bbc <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402b62:	682b      	ldr	r3, [r5, #0]
  402b64:	681a      	ldr	r2, [r3, #0]
  402b66:	b1c2      	cbz	r2, 402b9a <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402b68:	68db      	ldr	r3, [r3, #12]
  402b6a:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402b6e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b70:	f104 0904 	add.w	r9, r4, #4
  402b74:	4648      	mov	r0, r9
  402b76:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402b7a:	4620      	mov	r0, r4
  402b7c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402b7e:	69e3      	ldr	r3, [r4, #28]
  402b80:	2b01      	cmp	r3, #1
  402b82:	d1ee      	bne.n	402b62 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402b84:	69a3      	ldr	r3, [r4, #24]
  402b86:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402b88:	459a      	cmp	sl, r3
  402b8a:	d2d5      	bcs.n	402b38 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402b8c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402b8e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402b90:	4649      	mov	r1, r9
  402b92:	6828      	ldr	r0, [r5, #0]
  402b94:	4b0a      	ldr	r3, [pc, #40]	; (402bc0 <prvSampleTimeNow+0xb0>)
  402b96:	4798      	blx	r3
  402b98:	e7e3      	b.n	402b62 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402b9a:	4a0a      	ldr	r2, [pc, #40]	; (402bc4 <prvSampleTimeNow+0xb4>)
  402b9c:	6810      	ldr	r0, [r2, #0]
  402b9e:	4906      	ldr	r1, [pc, #24]	; (402bb8 <prvSampleTimeNow+0xa8>)
  402ba0:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402ba2:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402ba4:	2301      	movs	r3, #1
  402ba6:	f8c8 3000 	str.w	r3, [r8]
  402baa:	e7bf      	b.n	402b2c <prvSampleTimeNow+0x1c>
  402bac:	0040219d 	.word	0x0040219d
  402bb0:	20400b8c 	.word	0x20400b8c
  402bb4:	00402aa1 	.word	0x00402aa1
  402bb8:	20400b5c 	.word	0x20400b5c
  402bbc:	00400ee9 	.word	0x00400ee9
  402bc0:	00400eb5 	.word	0x00400eb5
  402bc4:	20400b60 	.word	0x20400b60

00402bc8 <prvTimerTask>:
{
  402bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402bcc:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402bce:	4e75      	ldr	r6, [pc, #468]	; (402da4 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402bd0:	4f75      	ldr	r7, [pc, #468]	; (402da8 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402bd2:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402dd0 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402bd6:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402dd4 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402bda:	6833      	ldr	r3, [r6, #0]
  402bdc:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  402bde:	2a00      	cmp	r2, #0
  402be0:	f000 80ce 	beq.w	402d80 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402be4:	68db      	ldr	r3, [r3, #12]
  402be6:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402be8:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402bea:	a804      	add	r0, sp, #16
  402bec:	4b6f      	ldr	r3, [pc, #444]	; (402dac <prvTimerTask+0x1e4>)
  402bee:	4798      	blx	r3
  402bf0:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402bf2:	9b04      	ldr	r3, [sp, #16]
  402bf4:	2b00      	cmp	r3, #0
  402bf6:	d144      	bne.n	402c82 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402bf8:	42a0      	cmp	r0, r4
  402bfa:	d212      	bcs.n	402c22 <prvTimerTask+0x5a>
  402bfc:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402bfe:	1b61      	subs	r1, r4, r5
  402c00:	4b6b      	ldr	r3, [pc, #428]	; (402db0 <prvTimerTask+0x1e8>)
  402c02:	6818      	ldr	r0, [r3, #0]
  402c04:	4b6b      	ldr	r3, [pc, #428]	; (402db4 <prvTimerTask+0x1ec>)
  402c06:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402c08:	4b6b      	ldr	r3, [pc, #428]	; (402db8 <prvTimerTask+0x1f0>)
  402c0a:	4798      	blx	r3
  402c0c:	2800      	cmp	r0, #0
  402c0e:	d13a      	bne.n	402c86 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402c10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402c14:	f8c9 3000 	str.w	r3, [r9]
  402c18:	f3bf 8f4f 	dsb	sy
  402c1c:	f3bf 8f6f 	isb	sy
  402c20:	e031      	b.n	402c86 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402c22:	4b65      	ldr	r3, [pc, #404]	; (402db8 <prvTimerTask+0x1f0>)
  402c24:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402c26:	6833      	ldr	r3, [r6, #0]
  402c28:	68db      	ldr	r3, [r3, #12]
  402c2a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402c2e:	f10a 0004 	add.w	r0, sl, #4
  402c32:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402c34:	f8da 301c 	ldr.w	r3, [sl, #28]
  402c38:	2b01      	cmp	r3, #1
  402c3a:	d004      	beq.n	402c46 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402c3c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402c40:	4650      	mov	r0, sl
  402c42:	4798      	blx	r3
  402c44:	e01f      	b.n	402c86 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
  402c46:	f8da 1018 	ldr.w	r1, [sl, #24]
  402c4a:	4623      	mov	r3, r4
  402c4c:	462a      	mov	r2, r5
  402c4e:	4421      	add	r1, r4
  402c50:	4650      	mov	r0, sl
  402c52:	4d5a      	ldr	r5, [pc, #360]	; (402dbc <prvTimerTask+0x1f4>)
  402c54:	47a8      	blx	r5
  402c56:	2800      	cmp	r0, #0
  402c58:	d0f0      	beq.n	402c3c <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402c5a:	2100      	movs	r1, #0
  402c5c:	9100      	str	r1, [sp, #0]
  402c5e:	460b      	mov	r3, r1
  402c60:	4622      	mov	r2, r4
  402c62:	4650      	mov	r0, sl
  402c64:	4c56      	ldr	r4, [pc, #344]	; (402dc0 <prvTimerTask+0x1f8>)
  402c66:	47a0      	blx	r4
			configASSERT( xResult );
  402c68:	2800      	cmp	r0, #0
  402c6a:	d1e7      	bne.n	402c3c <prvTimerTask+0x74>
  402c6c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c70:	b672      	cpsid	i
  402c72:	f383 8811 	msr	BASEPRI, r3
  402c76:	f3bf 8f6f 	isb	sy
  402c7a:	f3bf 8f4f 	dsb	sy
  402c7e:	b662      	cpsie	i
  402c80:	e7fe      	b.n	402c80 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402c82:	4b4d      	ldr	r3, [pc, #308]	; (402db8 <prvTimerTask+0x1f0>)
  402c84:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402c86:	4d4a      	ldr	r5, [pc, #296]	; (402db0 <prvTimerTask+0x1e8>)
  402c88:	4c4e      	ldr	r4, [pc, #312]	; (402dc4 <prvTimerTask+0x1fc>)
  402c8a:	e006      	b.n	402c9a <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402c8c:	9907      	ldr	r1, [sp, #28]
  402c8e:	9806      	ldr	r0, [sp, #24]
  402c90:	9b05      	ldr	r3, [sp, #20]
  402c92:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402c94:	9b04      	ldr	r3, [sp, #16]
  402c96:	2b00      	cmp	r3, #0
  402c98:	da08      	bge.n	402cac <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402c9a:	2200      	movs	r2, #0
  402c9c:	a904      	add	r1, sp, #16
  402c9e:	6828      	ldr	r0, [r5, #0]
  402ca0:	47a0      	blx	r4
  402ca2:	2800      	cmp	r0, #0
  402ca4:	d099      	beq.n	402bda <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402ca6:	9b04      	ldr	r3, [sp, #16]
  402ca8:	2b00      	cmp	r3, #0
  402caa:	dbef      	blt.n	402c8c <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402cac:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  402cb0:	f8da 3014 	ldr.w	r3, [sl, #20]
  402cb4:	b113      	cbz	r3, 402cbc <prvTimerTask+0xf4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402cb6:	f10a 0004 	add.w	r0, sl, #4
  402cba:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402cbc:	a803      	add	r0, sp, #12
  402cbe:	4b3b      	ldr	r3, [pc, #236]	; (402dac <prvTimerTask+0x1e4>)
  402cc0:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402cc2:	9b04      	ldr	r3, [sp, #16]
  402cc4:	2b09      	cmp	r3, #9
  402cc6:	d8e8      	bhi.n	402c9a <prvTimerTask+0xd2>
  402cc8:	a201      	add	r2, pc, #4	; (adr r2, 402cd0 <prvTimerTask+0x108>)
  402cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402cce:	bf00      	nop
  402cd0:	00402cf9 	.word	0x00402cf9
  402cd4:	00402cf9 	.word	0x00402cf9
  402cd8:	00402cf9 	.word	0x00402cf9
  402cdc:	00402c9b 	.word	0x00402c9b
  402ce0:	00402d4d 	.word	0x00402d4d
  402ce4:	00402d79 	.word	0x00402d79
  402ce8:	00402cf9 	.word	0x00402cf9
  402cec:	00402cf9 	.word	0x00402cf9
  402cf0:	00402c9b 	.word	0x00402c9b
  402cf4:	00402d4d 	.word	0x00402d4d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  402cf8:	9c05      	ldr	r4, [sp, #20]
  402cfa:	f8da 1018 	ldr.w	r1, [sl, #24]
  402cfe:	4623      	mov	r3, r4
  402d00:	4602      	mov	r2, r0
  402d02:	4421      	add	r1, r4
  402d04:	4650      	mov	r0, sl
  402d06:	4c2d      	ldr	r4, [pc, #180]	; (402dbc <prvTimerTask+0x1f4>)
  402d08:	47a0      	blx	r4
  402d0a:	2800      	cmp	r0, #0
  402d0c:	d0bc      	beq.n	402c88 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402d0e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402d12:	4650      	mov	r0, sl
  402d14:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402d16:	f8da 301c 	ldr.w	r3, [sl, #28]
  402d1a:	2b01      	cmp	r3, #1
  402d1c:	d1b4      	bne.n	402c88 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402d1e:	f8da 2018 	ldr.w	r2, [sl, #24]
  402d22:	2100      	movs	r1, #0
  402d24:	9100      	str	r1, [sp, #0]
  402d26:	460b      	mov	r3, r1
  402d28:	9805      	ldr	r0, [sp, #20]
  402d2a:	4402      	add	r2, r0
  402d2c:	4650      	mov	r0, sl
  402d2e:	4c24      	ldr	r4, [pc, #144]	; (402dc0 <prvTimerTask+0x1f8>)
  402d30:	47a0      	blx	r4
							configASSERT( xResult );
  402d32:	2800      	cmp	r0, #0
  402d34:	d1a8      	bne.n	402c88 <prvTimerTask+0xc0>
  402d36:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d3a:	b672      	cpsid	i
  402d3c:	f383 8811 	msr	BASEPRI, r3
  402d40:	f3bf 8f6f 	isb	sy
  402d44:	f3bf 8f4f 	dsb	sy
  402d48:	b662      	cpsie	i
  402d4a:	e7fe      	b.n	402d4a <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402d4c:	9905      	ldr	r1, [sp, #20]
  402d4e:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402d52:	b131      	cbz	r1, 402d62 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402d54:	4603      	mov	r3, r0
  402d56:	4602      	mov	r2, r0
  402d58:	4401      	add	r1, r0
  402d5a:	4650      	mov	r0, sl
  402d5c:	4c17      	ldr	r4, [pc, #92]	; (402dbc <prvTimerTask+0x1f4>)
  402d5e:	47a0      	blx	r4
  402d60:	e792      	b.n	402c88 <prvTimerTask+0xc0>
  402d62:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d66:	b672      	cpsid	i
  402d68:	f383 8811 	msr	BASEPRI, r3
  402d6c:	f3bf 8f6f 	isb	sy
  402d70:	f3bf 8f4f 	dsb	sy
  402d74:	b662      	cpsie	i
  402d76:	e7fe      	b.n	402d76 <prvTimerTask+0x1ae>
						vPortFree( pxTimer );
  402d78:	4650      	mov	r0, sl
  402d7a:	4b13      	ldr	r3, [pc, #76]	; (402dc8 <prvTimerTask+0x200>)
  402d7c:	4798      	blx	r3
  402d7e:	e783      	b.n	402c88 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402d80:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402d82:	a804      	add	r0, sp, #16
  402d84:	4b09      	ldr	r3, [pc, #36]	; (402dac <prvTimerTask+0x1e4>)
  402d86:	4798      	blx	r3
  402d88:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402d8a:	9b04      	ldr	r3, [sp, #16]
  402d8c:	2b00      	cmp	r3, #0
  402d8e:	f47f af78 	bne.w	402c82 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402d92:	4b0e      	ldr	r3, [pc, #56]	; (402dcc <prvTimerTask+0x204>)
  402d94:	681b      	ldr	r3, [r3, #0]
  402d96:	681a      	ldr	r2, [r3, #0]
  402d98:	fab2 f282 	clz	r2, r2
  402d9c:	0952      	lsrs	r2, r2, #5
  402d9e:	2400      	movs	r4, #0
  402da0:	e72d      	b.n	402bfe <prvTimerTask+0x36>
  402da2:	bf00      	nop
  402da4:	20400b5c 	.word	0x20400b5c
  402da8:	0040218d 	.word	0x0040218d
  402dac:	00402b11 	.word	0x00402b11
  402db0:	20400b90 	.word	0x20400b90
  402db4:	00401d55 	.word	0x00401d55
  402db8:	004022f1 	.word	0x004022f1
  402dbc:	0040298d 	.word	0x0040298d
  402dc0:	00402aa1 	.word	0x00402aa1
  402dc4:	00401995 	.word	0x00401995
  402dc8:	004012a1 	.word	0x004012a1
  402dcc:	20400b60 	.word	0x20400b60
  402dd0:	e000ed04 	.word	0xe000ed04
  402dd4:	00400ee9 	.word	0x00400ee9

00402dd8 <BUT1_callback>:
	adc.value = g_ul_value;
	xQueueSendFromISR(queue_adc, &adc, 0);
}


void BUT1_callback(void){
  402dd8:	b510      	push	{r4, lr}
  402dda:	b082      	sub	sp, #8
	char v = 0;
  402ddc:	2300      	movs	r3, #0
  402dde:	f88d 3007 	strb.w	r3, [sp, #7]
	if(pio_get(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK) == 0){
  402de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402de6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402dea:	480a      	ldr	r0, [pc, #40]	; (402e14 <BUT1_callback+0x3c>)
  402dec:	4b0a      	ldr	r3, [pc, #40]	; (402e18 <BUT1_callback+0x40>)
  402dee:	4798      	blx	r3
  402df0:	b160      	cbz	r0, 402e0c <BUT1_callback+0x34>
		v = '0';
	}else{
		v = '1';
  402df2:	2331      	movs	r3, #49	; 0x31
  402df4:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	xQueueSendFromISR(queue_but0, &v, 0);	
  402df8:	2300      	movs	r3, #0
  402dfa:	461a      	mov	r2, r3
  402dfc:	f10d 0107 	add.w	r1, sp, #7
  402e00:	4806      	ldr	r0, [pc, #24]	; (402e1c <BUT1_callback+0x44>)
  402e02:	6800      	ldr	r0, [r0, #0]
  402e04:	4c06      	ldr	r4, [pc, #24]	; (402e20 <BUT1_callback+0x48>)
  402e06:	47a0      	blx	r4
}
  402e08:	b002      	add	sp, #8
  402e0a:	bd10      	pop	{r4, pc}
		v = '0';
  402e0c:	2330      	movs	r3, #48	; 0x30
  402e0e:	f88d 3007 	strb.w	r3, [sp, #7]
  402e12:	e7f1      	b.n	402df8 <BUT1_callback+0x20>
  402e14:	400e1400 	.word	0x400e1400
  402e18:	00400777 	.word	0x00400777
  402e1c:	20400cb4 	.word	0x20400cb4
  402e20:	0040179d 	.word	0x0040179d

00402e24 <BUT2_callback>:

void BUT2_callback(void){
  402e24:	b510      	push	{r4, lr}
  402e26:	b082      	sub	sp, #8
	char v = 0;
  402e28:	2300      	movs	r3, #0
  402e2a:	f88d 3007 	strb.w	r3, [sp, #7]
	if(pio_get(BUT2_PIO, PIO_INPUT, BUT2_PIO_IDX_MASK) == 0){
  402e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  402e32:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402e36:	480a      	ldr	r0, [pc, #40]	; (402e60 <BUT2_callback+0x3c>)
  402e38:	4b0a      	ldr	r3, [pc, #40]	; (402e64 <BUT2_callback+0x40>)
  402e3a:	4798      	blx	r3
  402e3c:	b160      	cbz	r0, 402e58 <BUT2_callback+0x34>
		v = '0';
		}else{
		v = '1';
  402e3e:	2331      	movs	r3, #49	; 0x31
  402e40:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	xQueueSendFromISR(queue_but1, &v, 0);
  402e44:	2300      	movs	r3, #0
  402e46:	461a      	mov	r2, r3
  402e48:	f10d 0107 	add.w	r1, sp, #7
  402e4c:	4806      	ldr	r0, [pc, #24]	; (402e68 <BUT2_callback+0x44>)
  402e4e:	6800      	ldr	r0, [r0, #0]
  402e50:	4c06      	ldr	r4, [pc, #24]	; (402e6c <BUT2_callback+0x48>)
  402e52:	47a0      	blx	r4
}
  402e54:	b002      	add	sp, #8
  402e56:	bd10      	pop	{r4, pc}
		v = '0';
  402e58:	2330      	movs	r3, #48	; 0x30
  402e5a:	f88d 3007 	strb.w	r3, [sp, #7]
  402e5e:	e7f1      	b.n	402e44 <BUT2_callback+0x20>
  402e60:	400e1200 	.word	0x400e1200
  402e64:	00400777 	.word	0x00400777
  402e68:	20400cac 	.word	0x20400cac
  402e6c:	0040179d 	.word	0x0040179d

00402e70 <BUT3_callback>:

void BUT3_callback(void){
  402e70:	b510      	push	{r4, lr}
  402e72:	b082      	sub	sp, #8
	char v = 0;
  402e74:	2300      	movs	r3, #0
  402e76:	f88d 3007 	strb.w	r3, [sp, #7]
	if(pio_get(BUT3_PIO, PIO_INPUT, BUT3_PIO_IDX_MASK) == 0){
  402e7a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402e7e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402e82:	480a      	ldr	r0, [pc, #40]	; (402eac <BUT3_callback+0x3c>)
  402e84:	4b0a      	ldr	r3, [pc, #40]	; (402eb0 <BUT3_callback+0x40>)
  402e86:	4798      	blx	r3
  402e88:	b160      	cbz	r0, 402ea4 <BUT3_callback+0x34>
		v = '0';
		}else{
		v = '1';
  402e8a:	2331      	movs	r3, #49	; 0x31
  402e8c:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	xQueueSendFromISR(queue_but2, &v, 0);
  402e90:	2300      	movs	r3, #0
  402e92:	461a      	mov	r2, r3
  402e94:	f10d 0107 	add.w	r1, sp, #7
  402e98:	4806      	ldr	r0, [pc, #24]	; (402eb4 <BUT3_callback+0x44>)
  402e9a:	6800      	ldr	r0, [r0, #0]
  402e9c:	4c06      	ldr	r4, [pc, #24]	; (402eb8 <BUT3_callback+0x48>)
  402e9e:	47a0      	blx	r4
}
  402ea0:	b002      	add	sp, #8
  402ea2:	bd10      	pop	{r4, pc}
		v = '0';
  402ea4:	2330      	movs	r3, #48	; 0x30
  402ea6:	f88d 3007 	strb.w	r3, [sp, #7]
  402eaa:	e7f1      	b.n	402e90 <BUT3_callback+0x20>
  402eac:	400e0e00 	.word	0x400e0e00
  402eb0:	00400777 	.word	0x00400777
  402eb4:	20400ca8 	.word	0x20400ca8
  402eb8:	0040179d 	.word	0x0040179d

00402ebc <AFEC_pot_Callback>:
static void AFEC_pot_Callback(void){
  402ebc:	b530      	push	{r4, r5, lr}
  402ebe:	b083      	sub	sp, #12
	afec->AFEC_CSELR = afec_ch;
  402ec0:	4b0d      	ldr	r3, [pc, #52]	; (402ef8 <AFEC_pot_Callback+0x3c>)
  402ec2:	2400      	movs	r4, #0
  402ec4:	665c      	str	r4, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  402ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	g_ul_value = afec_channel_get_value(AFEC_POT, AFEC_POT_CHANNEL);
  402ec8:	4d0c      	ldr	r5, [pc, #48]	; (402efc <AFEC_pot_Callback+0x40>)
  402eca:	602b      	str	r3, [r5, #0]
	g_is_conversion_done = true;
  402ecc:	2201      	movs	r2, #1
  402ece:	4b0c      	ldr	r3, [pc, #48]	; (402f00 <AFEC_pot_Callback+0x44>)
  402ed0:	701a      	strb	r2, [r3, #0]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402ed2:	a902      	add	r1, sp, #8
  402ed4:	f841 4d04 	str.w	r4, [r1, #-4]!
	xSemaphoreGiveFromISR(semaphore_adc, &xHigherPriorityTaskWoken);
  402ed8:	4b0a      	ldr	r3, [pc, #40]	; (402f04 <AFEC_pot_Callback+0x48>)
  402eda:	6818      	ldr	r0, [r3, #0]
  402edc:	4b0a      	ldr	r3, [pc, #40]	; (402f08 <AFEC_pot_Callback+0x4c>)
  402ede:	4798      	blx	r3
	adc.value = g_ul_value;
  402ee0:	682b      	ldr	r3, [r5, #0]
  402ee2:	a902      	add	r1, sp, #8
  402ee4:	f841 3d08 	str.w	r3, [r1, #-8]!
	xQueueSendFromISR(queue_adc, &adc, 0);
  402ee8:	4623      	mov	r3, r4
  402eea:	4622      	mov	r2, r4
  402eec:	4807      	ldr	r0, [pc, #28]	; (402f0c <AFEC_pot_Callback+0x50>)
  402eee:	6800      	ldr	r0, [r0, #0]
  402ef0:	4c07      	ldr	r4, [pc, #28]	; (402f10 <AFEC_pot_Callback+0x54>)
  402ef2:	47a0      	blx	r4
}
  402ef4:	b003      	add	sp, #12
  402ef6:	bd30      	pop	{r4, r5, pc}
  402ef8:	4003c000 	.word	0x4003c000
  402efc:	20400b9c 	.word	0x20400b9c
  402f00:	20400b98 	.word	0x20400b98
  402f04:	20400cb0 	.word	0x20400cb0
  402f08:	004018b1 	.word	0x004018b1
  402f0c:	20400cb8 	.word	0x20400cb8
  402f10:	0040179d 	.word	0x0040179d

00402f14 <task_adc>:
			send_command(BUT3_COMMAND_ID, but2_value);
		}
	}
}

void task_adc(void){
  402f14:	b508      	push	{r3, lr}
		
	semaphore_adc = xSemaphoreCreateBinary();
  402f16:	2203      	movs	r2, #3
  402f18:	2100      	movs	r1, #0
  402f1a:	2001      	movs	r0, #1
  402f1c:	4b0c      	ldr	r3, [pc, #48]	; (402f50 <task_adc+0x3c>)
  402f1e:	4798      	blx	r3
  402f20:	4b0c      	ldr	r3, [pc, #48]	; (402f54 <task_adc+0x40>)
  402f22:	6018      	str	r0, [r3, #0]
	
	if (semaphore_adc == NULL) printf("falha em criar o semaforo \n");
  402f24:	b910      	cbnz	r0, 402f2c <task_adc+0x18>
  402f26:	480c      	ldr	r0, [pc, #48]	; (402f58 <task_adc+0x44>)
  402f28:	4b0c      	ldr	r3, [pc, #48]	; (402f5c <task_adc+0x48>)
  402f2a:	4798      	blx	r3
	
	while(1){
		if(xSemaphoreTake(semaphore_adc, (TickType_t)500) == pdTRUE){
  402f2c:	4e09      	ldr	r6, [pc, #36]	; (402f54 <task_adc+0x40>)
  402f2e:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
  402f32:	4d0b      	ldr	r5, [pc, #44]	; (402f60 <task_adc+0x4c>)
  402f34:	4621      	mov	r1, r4
  402f36:	6830      	ldr	r0, [r6, #0]
  402f38:	47a8      	blx	r5
  402f3a:	2801      	cmp	r0, #1
  402f3c:	d1fa      	bne.n	402f34 <task_adc+0x20>
			//if(g_is_conversion_done){
			//printf("g_ul_value: %d\n", g_ul_value);
			
			vTaskDelay(500);
  402f3e:	4620      	mov	r0, r4
  402f40:	4b08      	ldr	r3, [pc, #32]	; (402f64 <task_adc+0x50>)
  402f42:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  402f44:	4b08      	ldr	r3, [pc, #32]	; (402f68 <task_adc+0x54>)
  402f46:	2201      	movs	r2, #1
  402f48:	615a      	str	r2, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  402f4a:	2202      	movs	r2, #2
  402f4c:	601a      	str	r2, [r3, #0]
  402f4e:	e7f1      	b.n	402f34 <task_adc+0x20>
  402f50:	00401551 	.word	0x00401551
  402f54:	20400cb0 	.word	0x20400cb0
  402f58:	004067b0 	.word	0x004067b0
  402f5c:	00403739 	.word	0x00403739
  402f60:	00401b2d 	.word	0x00401b2d
  402f64:	00402409 	.word	0x00402409
  402f68:	4003c000 	.word	0x4003c000

00402f6c <task_led>:
static void task_led(void *pvParameters) {
  402f6c:	b508      	push	{r3, lr}
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  402f6e:	4c07      	ldr	r4, [pc, #28]	; (402f8c <task_led+0x20>)
		port->PIO_SODR = mask;
  402f70:	f44f 7680 	mov.w	r6, #256	; 0x100
		vTaskDelay(1000);
  402f74:	4d06      	ldr	r5, [pc, #24]	; (402f90 <task_led+0x24>)
  402f76:	e003      	b.n	402f80 <task_led+0x14>
  402f78:	6326      	str	r6, [r4, #48]	; 0x30
  402f7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  402f7e:	47a8      	blx	r5
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  402f80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402f82:	f413 7f80 	tst.w	r3, #256	; 0x100
  402f86:	d0f7      	beq.n	402f78 <task_led+0xc>
		port->PIO_CODR = mask;
  402f88:	6366      	str	r6, [r4, #52]	; 0x34
  402f8a:	e7f6      	b.n	402f7a <task_led+0xe>
  402f8c:	400e1200 	.word	0x400e1200
  402f90:	00402409 	.word	0x00402409

00402f94 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402f94:	b5f0      	push	{r4, r5, r6, r7, lr}
  402f96:	b083      	sub	sp, #12
  402f98:	4605      	mov	r5, r0
  402f9a:	460c      	mov	r4, r1
	uint32_t val = 0;
  402f9c:	2300      	movs	r3, #0
  402f9e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402fa0:	4b2a      	ldr	r3, [pc, #168]	; (40304c <usart_serial_getchar+0xb8>)
  402fa2:	4298      	cmp	r0, r3
  402fa4:	d013      	beq.n	402fce <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402fa6:	4b2a      	ldr	r3, [pc, #168]	; (403050 <usart_serial_getchar+0xbc>)
  402fa8:	4298      	cmp	r0, r3
  402faa:	d018      	beq.n	402fde <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402fac:	4b29      	ldr	r3, [pc, #164]	; (403054 <usart_serial_getchar+0xc0>)
  402fae:	4298      	cmp	r0, r3
  402fb0:	d01d      	beq.n	402fee <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402fb2:	4b29      	ldr	r3, [pc, #164]	; (403058 <usart_serial_getchar+0xc4>)
  402fb4:	429d      	cmp	r5, r3
  402fb6:	d022      	beq.n	402ffe <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402fb8:	4b28      	ldr	r3, [pc, #160]	; (40305c <usart_serial_getchar+0xc8>)
  402fba:	429d      	cmp	r5, r3
  402fbc:	d027      	beq.n	40300e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402fbe:	4b28      	ldr	r3, [pc, #160]	; (403060 <usart_serial_getchar+0xcc>)
  402fc0:	429d      	cmp	r5, r3
  402fc2:	d02e      	beq.n	403022 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402fc4:	4b27      	ldr	r3, [pc, #156]	; (403064 <usart_serial_getchar+0xd0>)
  402fc6:	429d      	cmp	r5, r3
  402fc8:	d035      	beq.n	403036 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402fca:	b003      	add	sp, #12
  402fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  402fce:	461f      	mov	r7, r3
  402fd0:	4e25      	ldr	r6, [pc, #148]	; (403068 <usart_serial_getchar+0xd4>)
  402fd2:	4621      	mov	r1, r4
  402fd4:	4638      	mov	r0, r7
  402fd6:	47b0      	blx	r6
  402fd8:	2800      	cmp	r0, #0
  402fda:	d1fa      	bne.n	402fd2 <usart_serial_getchar+0x3e>
  402fdc:	e7e9      	b.n	402fb2 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  402fde:	461f      	mov	r7, r3
  402fe0:	4e21      	ldr	r6, [pc, #132]	; (403068 <usart_serial_getchar+0xd4>)
  402fe2:	4621      	mov	r1, r4
  402fe4:	4638      	mov	r0, r7
  402fe6:	47b0      	blx	r6
  402fe8:	2800      	cmp	r0, #0
  402fea:	d1fa      	bne.n	402fe2 <usart_serial_getchar+0x4e>
  402fec:	e7e4      	b.n	402fb8 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  402fee:	461f      	mov	r7, r3
  402ff0:	4e1d      	ldr	r6, [pc, #116]	; (403068 <usart_serial_getchar+0xd4>)
  402ff2:	4621      	mov	r1, r4
  402ff4:	4638      	mov	r0, r7
  402ff6:	47b0      	blx	r6
  402ff8:	2800      	cmp	r0, #0
  402ffa:	d1fa      	bne.n	402ff2 <usart_serial_getchar+0x5e>
  402ffc:	e7df      	b.n	402fbe <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  402ffe:	461f      	mov	r7, r3
  403000:	4e19      	ldr	r6, [pc, #100]	; (403068 <usart_serial_getchar+0xd4>)
  403002:	4621      	mov	r1, r4
  403004:	4638      	mov	r0, r7
  403006:	47b0      	blx	r6
  403008:	2800      	cmp	r0, #0
  40300a:	d1fa      	bne.n	403002 <usart_serial_getchar+0x6e>
  40300c:	e7da      	b.n	402fc4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40300e:	461e      	mov	r6, r3
  403010:	4d16      	ldr	r5, [pc, #88]	; (40306c <usart_serial_getchar+0xd8>)
  403012:	a901      	add	r1, sp, #4
  403014:	4630      	mov	r0, r6
  403016:	47a8      	blx	r5
  403018:	2800      	cmp	r0, #0
  40301a:	d1fa      	bne.n	403012 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  40301c:	9b01      	ldr	r3, [sp, #4]
  40301e:	7023      	strb	r3, [r4, #0]
  403020:	e7d3      	b.n	402fca <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403022:	461e      	mov	r6, r3
  403024:	4d11      	ldr	r5, [pc, #68]	; (40306c <usart_serial_getchar+0xd8>)
  403026:	a901      	add	r1, sp, #4
  403028:	4630      	mov	r0, r6
  40302a:	47a8      	blx	r5
  40302c:	2800      	cmp	r0, #0
  40302e:	d1fa      	bne.n	403026 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403030:	9b01      	ldr	r3, [sp, #4]
  403032:	7023      	strb	r3, [r4, #0]
  403034:	e7c9      	b.n	402fca <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403036:	461e      	mov	r6, r3
  403038:	4d0c      	ldr	r5, [pc, #48]	; (40306c <usart_serial_getchar+0xd8>)
  40303a:	a901      	add	r1, sp, #4
  40303c:	4630      	mov	r0, r6
  40303e:	47a8      	blx	r5
  403040:	2800      	cmp	r0, #0
  403042:	d1fa      	bne.n	40303a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403044:	9b01      	ldr	r3, [sp, #4]
  403046:	7023      	strb	r3, [r4, #0]
}
  403048:	e7bf      	b.n	402fca <usart_serial_getchar+0x36>
  40304a:	bf00      	nop
  40304c:	400e0800 	.word	0x400e0800
  403050:	400e0a00 	.word	0x400e0a00
  403054:	400e1a00 	.word	0x400e1a00
  403058:	400e1c00 	.word	0x400e1c00
  40305c:	40024000 	.word	0x40024000
  403060:	40028000 	.word	0x40028000
  403064:	4002c000 	.word	0x4002c000
  403068:	00400aa3 	.word	0x00400aa3
  40306c:	00400bb7 	.word	0x00400bb7

00403070 <usart_serial_putchar>:
{
  403070:	b570      	push	{r4, r5, r6, lr}
  403072:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403074:	4b2a      	ldr	r3, [pc, #168]	; (403120 <usart_serial_putchar+0xb0>)
  403076:	4298      	cmp	r0, r3
  403078:	d013      	beq.n	4030a2 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40307a:	4b2a      	ldr	r3, [pc, #168]	; (403124 <usart_serial_putchar+0xb4>)
  40307c:	4298      	cmp	r0, r3
  40307e:	d019      	beq.n	4030b4 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403080:	4b29      	ldr	r3, [pc, #164]	; (403128 <usart_serial_putchar+0xb8>)
  403082:	4298      	cmp	r0, r3
  403084:	d01f      	beq.n	4030c6 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  403086:	4b29      	ldr	r3, [pc, #164]	; (40312c <usart_serial_putchar+0xbc>)
  403088:	4298      	cmp	r0, r3
  40308a:	d025      	beq.n	4030d8 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  40308c:	4b28      	ldr	r3, [pc, #160]	; (403130 <usart_serial_putchar+0xc0>)
  40308e:	4298      	cmp	r0, r3
  403090:	d02b      	beq.n	4030ea <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  403092:	4b28      	ldr	r3, [pc, #160]	; (403134 <usart_serial_putchar+0xc4>)
  403094:	4298      	cmp	r0, r3
  403096:	d031      	beq.n	4030fc <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403098:	4b27      	ldr	r3, [pc, #156]	; (403138 <usart_serial_putchar+0xc8>)
  40309a:	4298      	cmp	r0, r3
  40309c:	d037      	beq.n	40310e <usart_serial_putchar+0x9e>
	return 0;
  40309e:	2000      	movs	r0, #0
}
  4030a0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4030a2:	461e      	mov	r6, r3
  4030a4:	4d25      	ldr	r5, [pc, #148]	; (40313c <usart_serial_putchar+0xcc>)
  4030a6:	4621      	mov	r1, r4
  4030a8:	4630      	mov	r0, r6
  4030aa:	47a8      	blx	r5
  4030ac:	2800      	cmp	r0, #0
  4030ae:	d1fa      	bne.n	4030a6 <usart_serial_putchar+0x36>
		return 1;
  4030b0:	2001      	movs	r0, #1
  4030b2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4030b4:	461e      	mov	r6, r3
  4030b6:	4d21      	ldr	r5, [pc, #132]	; (40313c <usart_serial_putchar+0xcc>)
  4030b8:	4621      	mov	r1, r4
  4030ba:	4630      	mov	r0, r6
  4030bc:	47a8      	blx	r5
  4030be:	2800      	cmp	r0, #0
  4030c0:	d1fa      	bne.n	4030b8 <usart_serial_putchar+0x48>
		return 1;
  4030c2:	2001      	movs	r0, #1
  4030c4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4030c6:	461e      	mov	r6, r3
  4030c8:	4d1c      	ldr	r5, [pc, #112]	; (40313c <usart_serial_putchar+0xcc>)
  4030ca:	4621      	mov	r1, r4
  4030cc:	4630      	mov	r0, r6
  4030ce:	47a8      	blx	r5
  4030d0:	2800      	cmp	r0, #0
  4030d2:	d1fa      	bne.n	4030ca <usart_serial_putchar+0x5a>
		return 1;
  4030d4:	2001      	movs	r0, #1
  4030d6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4030d8:	461e      	mov	r6, r3
  4030da:	4d18      	ldr	r5, [pc, #96]	; (40313c <usart_serial_putchar+0xcc>)
  4030dc:	4621      	mov	r1, r4
  4030de:	4630      	mov	r0, r6
  4030e0:	47a8      	blx	r5
  4030e2:	2800      	cmp	r0, #0
  4030e4:	d1fa      	bne.n	4030dc <usart_serial_putchar+0x6c>
		return 1;
  4030e6:	2001      	movs	r0, #1
  4030e8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4030ea:	461e      	mov	r6, r3
  4030ec:	4d14      	ldr	r5, [pc, #80]	; (403140 <usart_serial_putchar+0xd0>)
  4030ee:	4621      	mov	r1, r4
  4030f0:	4630      	mov	r0, r6
  4030f2:	47a8      	blx	r5
  4030f4:	2800      	cmp	r0, #0
  4030f6:	d1fa      	bne.n	4030ee <usart_serial_putchar+0x7e>
		return 1;
  4030f8:	2001      	movs	r0, #1
  4030fa:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4030fc:	461e      	mov	r6, r3
  4030fe:	4d10      	ldr	r5, [pc, #64]	; (403140 <usart_serial_putchar+0xd0>)
  403100:	4621      	mov	r1, r4
  403102:	4630      	mov	r0, r6
  403104:	47a8      	blx	r5
  403106:	2800      	cmp	r0, #0
  403108:	d1fa      	bne.n	403100 <usart_serial_putchar+0x90>
		return 1;
  40310a:	2001      	movs	r0, #1
  40310c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40310e:	461e      	mov	r6, r3
  403110:	4d0b      	ldr	r5, [pc, #44]	; (403140 <usart_serial_putchar+0xd0>)
  403112:	4621      	mov	r1, r4
  403114:	4630      	mov	r0, r6
  403116:	47a8      	blx	r5
  403118:	2800      	cmp	r0, #0
  40311a:	d1fa      	bne.n	403112 <usart_serial_putchar+0xa2>
		return 1;
  40311c:	2001      	movs	r0, #1
  40311e:	bd70      	pop	{r4, r5, r6, pc}
  403120:	400e0800 	.word	0x400e0800
  403124:	400e0a00 	.word	0x400e0a00
  403128:	400e1a00 	.word	0x400e1a00
  40312c:	400e1c00 	.word	0x400e1c00
  403130:	40024000 	.word	0x40024000
  403134:	40028000 	.word	0x40028000
  403138:	4002c000 	.word	0x4002c000
  40313c:	00400a91 	.word	0x00400a91
  403140:	00400ba1 	.word	0x00400ba1

00403144 <vol_func>:
	if (g_ul_value<=370){
  403144:	f5b0 7fb9 	cmp.w	r0, #370	; 0x172
  403148:	d920      	bls.n	40318c <vol_func+0x48>
	else if(g_ul_value<=740){
  40314a:	f5b0 7f39 	cmp.w	r0, #740	; 0x2e4
  40314e:	d920      	bls.n	403192 <vol_func+0x4e>
	else if(g_ul_value<=1110){
  403150:	f240 4356 	movw	r3, #1110	; 0x456
  403154:	4298      	cmp	r0, r3
  403156:	d91f      	bls.n	403198 <vol_func+0x54>
	else if(g_ul_value<=1480){
  403158:	f5b0 6fb9 	cmp.w	r0, #1480	; 0x5c8
  40315c:	d91f      	bls.n	40319e <vol_func+0x5a>
	else if(g_ul_value<=1850){
  40315e:	f240 733a 	movw	r3, #1850	; 0x73a
  403162:	4298      	cmp	r0, r3
  403164:	d91e      	bls.n	4031a4 <vol_func+0x60>
	else if(g_ul_value<=2220){
  403166:	f640 03ac 	movw	r3, #2220	; 0x8ac
  40316a:	4298      	cmp	r0, r3
  40316c:	d91d      	bls.n	4031aa <vol_func+0x66>
	else if(g_ul_value<=2590){
  40316e:	f640 231e 	movw	r3, #2590	; 0xa1e
  403172:	4298      	cmp	r0, r3
  403174:	d91c      	bls.n	4031b0 <vol_func+0x6c>
	else if(g_ul_value<=2960){
  403176:	f5b0 6f39 	cmp.w	r0, #2960	; 0xb90
  40317a:	d91c      	bls.n	4031b6 <vol_func+0x72>
	else if(g_ul_value<=3330){
  40317c:	f640 5302 	movw	r3, #3330	; 0xd02
  403180:	4298      	cmp	r0, r3
		*vol_char = '8';
  403182:	bf94      	ite	ls
  403184:	2338      	movls	r3, #56	; 0x38
		*vol_char = '9';
  403186:	2339      	movhi	r3, #57	; 0x39
  403188:	700b      	strb	r3, [r1, #0]
  40318a:	4770      	bx	lr
		*vol_char = '0';
  40318c:	2330      	movs	r3, #48	; 0x30
  40318e:	700b      	strb	r3, [r1, #0]
  403190:	4770      	bx	lr
		*vol_char = '1';
  403192:	2331      	movs	r3, #49	; 0x31
  403194:	700b      	strb	r3, [r1, #0]
  403196:	4770      	bx	lr
		*vol_char = '2';
  403198:	2332      	movs	r3, #50	; 0x32
  40319a:	700b      	strb	r3, [r1, #0]
  40319c:	4770      	bx	lr
		*vol_char = '3';
  40319e:	2333      	movs	r3, #51	; 0x33
  4031a0:	700b      	strb	r3, [r1, #0]
  4031a2:	4770      	bx	lr
		*vol_char = '4';
  4031a4:	2334      	movs	r3, #52	; 0x34
  4031a6:	700b      	strb	r3, [r1, #0]
  4031a8:	4770      	bx	lr
		*vol_char = '5';
  4031aa:	2335      	movs	r3, #53	; 0x35
  4031ac:	700b      	strb	r3, [r1, #0]
  4031ae:	4770      	bx	lr
		*vol_char = '6';
  4031b0:	2336      	movs	r3, #54	; 0x36
  4031b2:	700b      	strb	r3, [r1, #0]
  4031b4:	4770      	bx	lr
		*vol_char = '7';
  4031b6:	2337      	movs	r3, #55	; 0x37
  4031b8:	700b      	strb	r3, [r1, #0]
  4031ba:	4770      	bx	lr

004031bc <LED1_init>:
void LED1_init(int estado){
  4031bc:	b510      	push	{r4, lr}
  4031be:	b082      	sub	sp, #8
  4031c0:	4604      	mov	r4, r0
	pmc_enable_periph_clk(LED1_PIO_ID);
  4031c2:	200a      	movs	r0, #10
  4031c4:	4b05      	ldr	r3, [pc, #20]	; (4031dc <LED1_init+0x20>)
  4031c6:	4798      	blx	r3
	pio_set_output(LED1_PIO, LED1_IDX_MASK, estado, 0, 0 );
  4031c8:	2300      	movs	r3, #0
  4031ca:	9300      	str	r3, [sp, #0]
  4031cc:	4622      	mov	r2, r4
  4031ce:	2101      	movs	r1, #1
  4031d0:	4803      	ldr	r0, [pc, #12]	; (4031e0 <LED1_init+0x24>)
  4031d2:	4c04      	ldr	r4, [pc, #16]	; (4031e4 <LED1_init+0x28>)
  4031d4:	47a0      	blx	r4
};
  4031d6:	b002      	add	sp, #8
  4031d8:	bd10      	pop	{r4, pc}
  4031da:	bf00      	nop
  4031dc:	00400a71 	.word	0x00400a71
  4031e0:	400e0e00 	.word	0x400e0e00
  4031e4:	004007c7 	.word	0x004007c7

004031e8 <init>:
void init(void){
  4031e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4031ec:	b08d      	sub	sp, #52	; 0x34
	LED1_init(0);
  4031ee:	2000      	movs	r0, #0
  4031f0:	4b4e      	ldr	r3, [pc, #312]	; (40332c <init+0x144>)
  4031f2:	4798      	blx	r3
	pmc_enable_periph_clk(BUT1_PIO_ID);
  4031f4:	2010      	movs	r0, #16
  4031f6:	4c4e      	ldr	r4, [pc, #312]	; (403330 <init+0x148>)
  4031f8:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT2_PIO_ID);
  4031fa:	200c      	movs	r0, #12
  4031fc:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT3_PIO_ID);
  4031fe:	200a      	movs	r0, #10
  403200:	47a0      	blx	r4
	pio_set_input(BUT1_PIO,BUT1_PIO_IDX_MASK,PIO_DEFAULT);
  403202:	f8df 8178 	ldr.w	r8, [pc, #376]	; 40337c <init+0x194>
  403206:	2200      	movs	r2, #0
  403208:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40320c:	4640      	mov	r0, r8
  40320e:	4d49      	ldr	r5, [pc, #292]	; (403334 <init+0x14c>)
  403210:	47a8      	blx	r5
	pio_set_input(BUT2_PIO,BUT2_PIO_IDX_MASK,PIO_DEFAULT);
  403212:	4f49      	ldr	r7, [pc, #292]	; (403338 <init+0x150>)
  403214:	2200      	movs	r2, #0
  403216:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40321a:	4638      	mov	r0, r7
  40321c:	47a8      	blx	r5
	pio_set_input(BUT3_PIO,BUT3_PIO_IDX_MASK,PIO_DEFAULT);
  40321e:	4c47      	ldr	r4, [pc, #284]	; (40333c <init+0x154>)
  403220:	2200      	movs	r2, #0
  403222:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  403226:	4620      	mov	r0, r4
  403228:	47a8      	blx	r5
	pio_pull_up(BUT1_PIO,BUT1_PIO_IDX_MASK,1);
  40322a:	2201      	movs	r2, #1
  40322c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403230:	4640      	mov	r0, r8
  403232:	4d43      	ldr	r5, [pc, #268]	; (403340 <init+0x158>)
  403234:	47a8      	blx	r5
	pio_pull_up(BUT2_PIO,BUT2_PIO_IDX_MASK,1);
  403236:	2201      	movs	r2, #1
  403238:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40323c:	4638      	mov	r0, r7
  40323e:	47a8      	blx	r5
	pio_pull_up(BUT3_PIO,BUT3_PIO_IDX_MASK,1);
  403240:	2201      	movs	r2, #1
  403242:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  403246:	4620      	mov	r0, r4
  403248:	47a8      	blx	r5
  40324a:	4d3e      	ldr	r5, [pc, #248]	; (403344 <init+0x15c>)
  40324c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  403250:	602b      	str	r3, [r5, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  403252:	26a0      	movs	r6, #160	; 0xa0
  403254:	f885 6310 	strb.w	r6, [r5, #784]	; 0x310
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  403258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40325c:	602b      	str	r3, [r5, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40325e:	f885 630c 	strb.w	r6, [r5, #780]	; 0x30c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  403262:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403266:	602b      	str	r3, [r5, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  403268:	f885 630a 	strb.w	r6, [r5, #778]	; 0x30a
	pio_enable_interrupt(BUT1_PIO, BUT1_PIO_IDX_MASK);
  40326c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403270:	4640      	mov	r0, r8
  403272:	f8df 910c 	ldr.w	r9, [pc, #268]	; 403380 <init+0x198>
  403276:	47c8      	blx	r9
	pio_enable_interrupt(BUT2_PIO, BUT2_PIO_IDX_MASK);
  403278:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40327c:	4638      	mov	r0, r7
  40327e:	47c8      	blx	r9
	pio_enable_interrupt(BUT3_PIO, BUT3_PIO_IDX_MASK);
  403280:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  403284:	4620      	mov	r0, r4
  403286:	47c8      	blx	r9
	pio_handler_set(BUT1_PIO, BUT1_PIO_ID, BUT1_PIO_IDX_MASK, PIO_IT_EDGE, BUT1_callback);
  403288:	4b2f      	ldr	r3, [pc, #188]	; (403348 <init+0x160>)
  40328a:	9300      	str	r3, [sp, #0]
  40328c:	2340      	movs	r3, #64	; 0x40
  40328e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403292:	2110      	movs	r1, #16
  403294:	4640      	mov	r0, r8
  403296:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 403384 <init+0x19c>
  40329a:	47c0      	blx	r8
	pio_handler_set(BUT2_PIO, BUT2_PIO_ID, BUT2_PIO_IDX_MASK, PIO_IT_EDGE, BUT2_callback);
  40329c:	4b2b      	ldr	r3, [pc, #172]	; (40334c <init+0x164>)
  40329e:	9300      	str	r3, [sp, #0]
  4032a0:	2340      	movs	r3, #64	; 0x40
  4032a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4032a6:	210c      	movs	r1, #12
  4032a8:	4638      	mov	r0, r7
  4032aa:	47c0      	blx	r8
	pio_handler_set(BUT3_PIO, BUT3_PIO_ID, BUT3_PIO_IDX_MASK, PIO_IT_EDGE, BUT3_callback);
  4032ac:	4b28      	ldr	r3, [pc, #160]	; (403350 <init+0x168>)
  4032ae:	9300      	str	r3, [sp, #0]
  4032b0:	2340      	movs	r3, #64	; 0x40
  4032b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4032b6:	210a      	movs	r1, #10
  4032b8:	4620      	mov	r0, r4
  4032ba:	47c0      	blx	r8
	afec_enable(afec);
  4032bc:	4c25      	ldr	r4, [pc, #148]	; (403354 <init+0x16c>)
  4032be:	4620      	mov	r0, r4
  4032c0:	4b25      	ldr	r3, [pc, #148]	; (403358 <init+0x170>)
  4032c2:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  4032c4:	a806      	add	r0, sp, #24
  4032c6:	4b25      	ldr	r3, [pc, #148]	; (40335c <init+0x174>)
  4032c8:	4798      	blx	r3
	afec_init(afec, &afec_cfg);
  4032ca:	a906      	add	r1, sp, #24
  4032cc:	4620      	mov	r0, r4
  4032ce:	4b24      	ldr	r3, [pc, #144]	; (403360 <init+0x178>)
  4032d0:	4798      	blx	r3
	reg = afec->AFEC_MR;
  4032d2:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  4032d4:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  4032d8:	6063      	str	r3, [r4, #4]
	afec_ch_get_config_defaults(&afec_ch_cfg);
  4032da:	a803      	add	r0, sp, #12
  4032dc:	4b21      	ldr	r3, [pc, #132]	; (403364 <init+0x17c>)
  4032de:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  4032e0:	2700      	movs	r7, #0
  4032e2:	f88d 700d 	strb.w	r7, [sp, #13]
	afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  4032e6:	aa03      	add	r2, sp, #12
  4032e8:	4639      	mov	r1, r7
  4032ea:	4620      	mov	r0, r4
  4032ec:	4b1e      	ldr	r3, [pc, #120]	; (403368 <init+0x180>)
  4032ee:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  4032f0:	6667      	str	r7, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4032f2:	f44f 7300 	mov.w	r3, #512	; 0x200
  4032f6:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  4032f8:	a804      	add	r0, sp, #16
  4032fa:	4b1c      	ldr	r3, [pc, #112]	; (40336c <init+0x184>)
  4032fc:	4798      	blx	r3
	afec_temp_sensor_set_config(afec, &afec_temp_sensor_cfg);
  4032fe:	a904      	add	r1, sp, #16
  403300:	4620      	mov	r0, r4
  403302:	4b1b      	ldr	r3, [pc, #108]	; (403370 <init+0x188>)
  403304:	4798      	blx	r3
	afec_set_callback(afec, afec_channel,	callback, 1);
  403306:	2301      	movs	r3, #1
  403308:	4a1a      	ldr	r2, [pc, #104]	; (403374 <init+0x18c>)
  40330a:	4639      	mov	r1, r7
  40330c:	4620      	mov	r0, r4
  40330e:	4f1a      	ldr	r7, [pc, #104]	; (403378 <init+0x190>)
  403310:	47b8      	blx	r7
  403312:	f885 631d 	strb.w	r6, [r5, #797]	; 0x31d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  403316:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  40331a:	602b      	str	r3, [r5, #0]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40331c:	2301      	movs	r3, #1
  40331e:	6163      	str	r3, [r4, #20]
	afec->AFEC_CR = AFEC_CR_START;
  403320:	2302      	movs	r3, #2
  403322:	6023      	str	r3, [r4, #0]
}
  403324:	b00d      	add	sp, #52	; 0x34
  403326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40332a:	bf00      	nop
  40332c:	004031bd 	.word	0x004031bd
  403330:	00400a71 	.word	0x00400a71
  403334:	00400791 	.word	0x00400791
  403338:	400e1200 	.word	0x400e1200
  40333c:	400e0e00 	.word	0x400e0e00
  403340:	00400765 	.word	0x00400765
  403344:	e000e100 	.word	0xe000e100
  403348:	00402dd9 	.word	0x00402dd9
  40334c:	00402e25 	.word	0x00402e25
  403350:	00402e71 	.word	0x00402e71
  403354:	4003c000 	.word	0x4003c000
  403358:	00400701 	.word	0x00400701
  40335c:	00400531 	.word	0x00400531
  403360:	00400581 	.word	0x00400581
  403364:	00400561 	.word	0x00400561
  403368:	004004ed 	.word	0x004004ed
  40336c:	0040056b 	.word	0x0040056b
  403370:	0040051d 	.word	0x0040051d
  403374:	00402ebd 	.word	0x00402ebd
  403378:	00400681 	.word	0x00400681
  40337c:	400e1400 	.word	0x400e1400
  403380:	00400821 	.word	0x00400821
  403384:	0040087d 	.word	0x0040087d

00403388 <send_command>:
void send_command(char id, char status){
  403388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40338a:	4607      	mov	r7, r0
  40338c:	460e      	mov	r6, r1
	while(!usart_is_tx_ready(UART_COMM));
  40338e:	4d0f      	ldr	r5, [pc, #60]	; (4033cc <send_command+0x44>)
  403390:	4c0f      	ldr	r4, [pc, #60]	; (4033d0 <send_command+0x48>)
  403392:	4628      	mov	r0, r5
  403394:	47a0      	blx	r4
  403396:	2800      	cmp	r0, #0
  403398:	d0fb      	beq.n	403392 <send_command+0xa>
	usart_write(UART_COMM, id);
  40339a:	4639      	mov	r1, r7
  40339c:	480b      	ldr	r0, [pc, #44]	; (4033cc <send_command+0x44>)
  40339e:	4b0d      	ldr	r3, [pc, #52]	; (4033d4 <send_command+0x4c>)
  4033a0:	4798      	blx	r3
	while(!usart_is_tx_ready(UART_COMM));
  4033a2:	4d0a      	ldr	r5, [pc, #40]	; (4033cc <send_command+0x44>)
  4033a4:	4c0a      	ldr	r4, [pc, #40]	; (4033d0 <send_command+0x48>)
  4033a6:	4628      	mov	r0, r5
  4033a8:	47a0      	blx	r4
  4033aa:	2800      	cmp	r0, #0
  4033ac:	d0fb      	beq.n	4033a6 <send_command+0x1e>
	usart_write(UART_COMM, status);
  4033ae:	4631      	mov	r1, r6
  4033b0:	4806      	ldr	r0, [pc, #24]	; (4033cc <send_command+0x44>)
  4033b2:	4b08      	ldr	r3, [pc, #32]	; (4033d4 <send_command+0x4c>)
  4033b4:	4798      	blx	r3
	while(!usart_is_tx_ready(UART_COMM));
  4033b6:	4d05      	ldr	r5, [pc, #20]	; (4033cc <send_command+0x44>)
  4033b8:	4c05      	ldr	r4, [pc, #20]	; (4033d0 <send_command+0x48>)
  4033ba:	4628      	mov	r0, r5
  4033bc:	47a0      	blx	r4
  4033be:	2800      	cmp	r0, #0
  4033c0:	d0fb      	beq.n	4033ba <send_command+0x32>
	usart_write(UART_COMM, c_EOF);
  4033c2:	2158      	movs	r1, #88	; 0x58
  4033c4:	4801      	ldr	r0, [pc, #4]	; (4033cc <send_command+0x44>)
  4033c6:	4b03      	ldr	r3, [pc, #12]	; (4033d4 <send_command+0x4c>)
  4033c8:	4798      	blx	r3
  4033ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4033cc:	40028000 	.word	0x40028000
  4033d0:	00400b99 	.word	0x00400b99
  4033d4:	00400ba1 	.word	0x00400ba1

004033d8 <task_send>:
void task_send(void){
  4033d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4033da:	b083      	sub	sp, #12
	queue_adc = xQueueCreate(5, sizeof(adcData));
  4033dc:	2200      	movs	r2, #0
  4033de:	2104      	movs	r1, #4
  4033e0:	2005      	movs	r0, #5
  4033e2:	4c2e      	ldr	r4, [pc, #184]	; (40349c <task_send+0xc4>)
  4033e4:	47a0      	blx	r4
  4033e6:	4b2e      	ldr	r3, [pc, #184]	; (4034a0 <task_send+0xc8>)
  4033e8:	6018      	str	r0, [r3, #0]
	queue_but0 = xQueueCreate(5, sizeof(but0_value));
  4033ea:	2200      	movs	r2, #0
  4033ec:	2101      	movs	r1, #1
  4033ee:	2005      	movs	r0, #5
  4033f0:	47a0      	blx	r4
  4033f2:	4b2c      	ldr	r3, [pc, #176]	; (4034a4 <task_send+0xcc>)
  4033f4:	6018      	str	r0, [r3, #0]
	queue_but1 = xQueueCreate(5, sizeof(but1_value));
  4033f6:	2200      	movs	r2, #0
  4033f8:	2101      	movs	r1, #1
  4033fa:	2005      	movs	r0, #5
  4033fc:	47a0      	blx	r4
  4033fe:	4b2a      	ldr	r3, [pc, #168]	; (4034a8 <task_send+0xd0>)
  403400:	6018      	str	r0, [r3, #0]
	queue_but2 = xQueueCreate(5, sizeof(but2_value));
  403402:	2200      	movs	r2, #0
  403404:	2101      	movs	r1, #1
  403406:	2005      	movs	r0, #5
  403408:	47a0      	blx	r4
  40340a:	4b28      	ldr	r3, [pc, #160]	; (4034ac <task_send+0xd4>)
  40340c:	6018      	str	r0, [r3, #0]
	char vol_char = '0';
  40340e:	2730      	movs	r7, #48	; 0x30
  403410:	f88d 7000 	strb.w	r7, [sp]
	init();
  403414:	4b26      	ldr	r3, [pc, #152]	; (4034b0 <task_send+0xd8>)
  403416:	4798      	blx	r3
		if (xQueueReceive(queue_adc, &(adc), ( TickType_t )  100 / portTICK_PERIOD_MS)) {
  403418:	4e21      	ldr	r6, [pc, #132]	; (4034a0 <task_send+0xc8>)
  40341a:	2564      	movs	r5, #100	; 0x64
  40341c:	4c25      	ldr	r4, [pc, #148]	; (4034b4 <task_send+0xdc>)
  40341e:	462a      	mov	r2, r5
  403420:	a901      	add	r1, sp, #4
  403422:	6830      	ldr	r0, [r6, #0]
  403424:	47a0      	blx	r4
  403426:	b9d8      	cbnz	r0, 403460 <task_send+0x88>
		if (xQueueReceive(queue_but0, &(but0_value), ( TickType_t )  100 / portTICK_PERIOD_MS)) {
  403428:	462a      	mov	r2, r5
  40342a:	f10d 0103 	add.w	r1, sp, #3
  40342e:	4b1d      	ldr	r3, [pc, #116]	; (4034a4 <task_send+0xcc>)
  403430:	6818      	ldr	r0, [r3, #0]
  403432:	47a0      	blx	r4
  403434:	bb30      	cbnz	r0, 403484 <task_send+0xac>
		if (xQueueReceive(queue_but1, &(but1_value), ( TickType_t )  100 / portTICK_PERIOD_MS)) {
  403436:	462a      	mov	r2, r5
  403438:	f10d 0102 	add.w	r1, sp, #2
  40343c:	4b1a      	ldr	r3, [pc, #104]	; (4034a8 <task_send+0xd0>)
  40343e:	6818      	ldr	r0, [r3, #0]
  403440:	47a0      	blx	r4
  403442:	bb28      	cbnz	r0, 403490 <task_send+0xb8>
		if (xQueueReceive(queue_but2, &(but2_value), ( TickType_t )  100 / portTICK_PERIOD_MS)) {
  403444:	462a      	mov	r2, r5
  403446:	f10d 0101 	add.w	r1, sp, #1
  40344a:	4b18      	ldr	r3, [pc, #96]	; (4034ac <task_send+0xd4>)
  40344c:	6818      	ldr	r0, [r3, #0]
  40344e:	47a0      	blx	r4
  403450:	2800      	cmp	r0, #0
  403452:	d0e4      	beq.n	40341e <task_send+0x46>
			send_command(BUT3_COMMAND_ID, but2_value);
  403454:	f89d 1001 	ldrb.w	r1, [sp, #1]
  403458:	2033      	movs	r0, #51	; 0x33
  40345a:	4b17      	ldr	r3, [pc, #92]	; (4034b8 <task_send+0xe0>)
  40345c:	4798      	blx	r3
  40345e:	e7de      	b.n	40341e <task_send+0x46>
			printf("adc_bat: %d\n", adc.value);	
  403460:	9901      	ldr	r1, [sp, #4]
  403462:	4816      	ldr	r0, [pc, #88]	; (4034bc <task_send+0xe4>)
  403464:	4b16      	ldr	r3, [pc, #88]	; (4034c0 <task_send+0xe8>)
  403466:	4798      	blx	r3
			vol_func(adc.value, &vol_char);
  403468:	4669      	mov	r1, sp
  40346a:	9801      	ldr	r0, [sp, #4]
  40346c:	4b15      	ldr	r3, [pc, #84]	; (4034c4 <task_send+0xec>)
  40346e:	4798      	blx	r3
			if (vol_char != vol_char_old) {
  403470:	f89d 1000 	ldrb.w	r1, [sp]
  403474:	428f      	cmp	r7, r1
  403476:	d002      	beq.n	40347e <task_send+0xa6>
				send_command('v', vol_char);
  403478:	2076      	movs	r0, #118	; 0x76
  40347a:	4b0f      	ldr	r3, [pc, #60]	; (4034b8 <task_send+0xe0>)
  40347c:	4798      	blx	r3
			vol_char_old = vol_char;
  40347e:	f89d 7000 	ldrb.w	r7, [sp]
  403482:	e7d1      	b.n	403428 <task_send+0x50>
			send_command(BUT1_COMMAND_ID, but0_value);
  403484:	f89d 1003 	ldrb.w	r1, [sp, #3]
  403488:	2031      	movs	r0, #49	; 0x31
  40348a:	4b0b      	ldr	r3, [pc, #44]	; (4034b8 <task_send+0xe0>)
  40348c:	4798      	blx	r3
  40348e:	e7d2      	b.n	403436 <task_send+0x5e>
			send_command(BUT2_COMMAND_ID, but1_value);
  403490:	f89d 1002 	ldrb.w	r1, [sp, #2]
  403494:	2032      	movs	r0, #50	; 0x32
  403496:	4b08      	ldr	r3, [pc, #32]	; (4034b8 <task_send+0xe0>)
  403498:	4798      	blx	r3
  40349a:	e7d3      	b.n	403444 <task_send+0x6c>
  40349c:	00401551 	.word	0x00401551
  4034a0:	20400cb8 	.word	0x20400cb8
  4034a4:	20400cb4 	.word	0x20400cb4
  4034a8:	20400cac 	.word	0x20400cac
  4034ac:	20400ca8 	.word	0x20400ca8
  4034b0:	004031e9 	.word	0x004031e9
  4034b4:	00401995 	.word	0x00401995
  4034b8:	00403389 	.word	0x00403389
  4034bc:	004067cc 	.word	0x004067cc
  4034c0:	00403739 	.word	0x00403739
  4034c4:	00403145 	.word	0x00403145

004034c8 <response>:
int response(){
  4034c8:	b500      	push	{lr}
  4034ca:	b083      	sub	sp, #12
	uint32_t resp = 0;
  4034cc:	a902      	add	r1, sp, #8
  4034ce:	2300      	movs	r3, #0
  4034d0:	f841 3d04 	str.w	r3, [r1, #-4]!
	if (!usart_read(UART_COMM, &resp));
  4034d4:	4805      	ldr	r0, [pc, #20]	; (4034ec <response+0x24>)
  4034d6:	4b06      	ldr	r3, [pc, #24]	; (4034f0 <response+0x28>)
  4034d8:	4798      	blx	r3
}
  4034da:	9801      	ldr	r0, [sp, #4]
  4034dc:	2858      	cmp	r0, #88	; 0x58
  4034de:	bf14      	ite	ne
  4034e0:	2000      	movne	r0, #0
  4034e2:	2001      	moveq	r0, #1
  4034e4:	b003      	add	sp, #12
  4034e6:	f85d fb04 	ldr.w	pc, [sp], #4
  4034ea:	bf00      	nop
  4034ec:	40028000 	.word	0x40028000
  4034f0:	00400bb7 	.word	0x00400bb7

004034f4 <task_response>:
		}

	}
}

void task_response(void){
  4034f4:	b508      	push	{r3, lr}
	
	while(1){
		
		send_command(VERIFICA_COMMAND_ID, '0');
  4034f6:	4e09      	ldr	r6, [pc, #36]	; (40351c <task_response+0x28>)
		if (response())
  4034f8:	4d09      	ldr	r5, [pc, #36]	; (403520 <task_response+0x2c>)
		{
			pio_clear(LED1_PIO,LED1_IDX_MASK);
			}else{
			pio_set(LED1_PIO,LED1_IDX_MASK);
  4034fa:	4c0a      	ldr	r4, [pc, #40]	; (403524 <task_response+0x30>)
  4034fc:	e003      	b.n	403506 <task_response+0x12>
  4034fe:	2101      	movs	r1, #1
  403500:	4620      	mov	r0, r4
  403502:	4b09      	ldr	r3, [pc, #36]	; (403528 <task_response+0x34>)
  403504:	4798      	blx	r3
		send_command(VERIFICA_COMMAND_ID, '0');
  403506:	2130      	movs	r1, #48	; 0x30
  403508:	2053      	movs	r0, #83	; 0x53
  40350a:	47b0      	blx	r6
		if (response())
  40350c:	47a8      	blx	r5
  40350e:	2800      	cmp	r0, #0
  403510:	d0f5      	beq.n	4034fe <task_response+0xa>
			pio_clear(LED1_PIO,LED1_IDX_MASK);
  403512:	2101      	movs	r1, #1
  403514:	4620      	mov	r0, r4
  403516:	4b05      	ldr	r3, [pc, #20]	; (40352c <task_response+0x38>)
  403518:	4798      	blx	r3
  40351a:	e7f4      	b.n	403506 <task_response+0x12>
  40351c:	00403389 	.word	0x00403389
  403520:	004034c9 	.word	0x004034c9
  403524:	400e0e00 	.word	0x400e0e00
  403528:	0040076f 	.word	0x0040076f
  40352c:	00400773 	.word	0x00400773

00403530 <vApplicationStackOverflowHook>:
{
  403530:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  403532:	460a      	mov	r2, r1
  403534:	4601      	mov	r1, r0
  403536:	4802      	ldr	r0, [pc, #8]	; (403540 <vApplicationStackOverflowHook+0x10>)
  403538:	4b02      	ldr	r3, [pc, #8]	; (403544 <vApplicationStackOverflowHook+0x14>)
  40353a:	4798      	blx	r3
  40353c:	e7fe      	b.n	40353c <vApplicationStackOverflowHook+0xc>
  40353e:	bf00      	nop
  403540:	004067dc 	.word	0x004067dc
  403544:	00403739 	.word	0x00403739

00403548 <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  403548:	4770      	bx	lr

0040354a <vApplicationMallocFailedHook>:
  40354a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40354e:	b672      	cpsid	i
  403550:	f383 8811 	msr	BASEPRI, r3
  403554:	f3bf 8f6f 	isb	sy
  403558:	f3bf 8f4f 	dsb	sy
  40355c:	b662      	cpsie	i
  40355e:	e7fe      	b.n	40355e <vApplicationMallocFailedHook+0x14>

00403560 <main>:
/**
 *  \brief FreeRTOS Real Time Kernel example entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void) {
  403560:	b570      	push	{r4, r5, r6, lr}
  403562:	b088      	sub	sp, #32
	/* Initialize the SAM system */
	sysclk_init();
  403564:	4b3c      	ldr	r3, [pc, #240]	; (403658 <main+0xf8>)
  403566:	4798      	blx	r3
	board_init();
  403568:	4b3c      	ldr	r3, [pc, #240]	; (40365c <main+0xfc>)
  40356a:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40356c:	4d3c      	ldr	r5, [pc, #240]	; (403660 <main+0x100>)
  40356e:	4b3d      	ldr	r3, [pc, #244]	; (403664 <main+0x104>)
  403570:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403572:	4a3d      	ldr	r2, [pc, #244]	; (403668 <main+0x108>)
  403574:	4b3d      	ldr	r3, [pc, #244]	; (40366c <main+0x10c>)
  403576:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403578:	4a3d      	ldr	r2, [pc, #244]	; (403670 <main+0x110>)
  40357a:	4b3e      	ldr	r3, [pc, #248]	; (403674 <main+0x114>)
  40357c:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  40357e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403582:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  403584:	23c0      	movs	r3, #192	; 0xc0
  403586:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  403588:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40358c:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  40358e:	2400      	movs	r4, #0
  403590:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403592:	9406      	str	r4, [sp, #24]
  403594:	200e      	movs	r0, #14
  403596:	4b38      	ldr	r3, [pc, #224]	; (403678 <main+0x118>)
  403598:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40359a:	4a38      	ldr	r2, [pc, #224]	; (40367c <main+0x11c>)
  40359c:	a902      	add	r1, sp, #8
  40359e:	4628      	mov	r0, r5
  4035a0:	4b37      	ldr	r3, [pc, #220]	; (403680 <main+0x120>)
  4035a2:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4035a4:	4628      	mov	r0, r5
  4035a6:	4b37      	ldr	r3, [pc, #220]	; (403684 <main+0x124>)
  4035a8:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4035aa:	4628      	mov	r0, r5
  4035ac:	4b36      	ldr	r3, [pc, #216]	; (403688 <main+0x128>)
  4035ae:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4035b0:	4e36      	ldr	r6, [pc, #216]	; (40368c <main+0x12c>)
  4035b2:	6833      	ldr	r3, [r6, #0]
  4035b4:	4621      	mov	r1, r4
  4035b6:	6898      	ldr	r0, [r3, #8]
  4035b8:	4d35      	ldr	r5, [pc, #212]	; (403690 <main+0x130>)
  4035ba:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4035bc:	6833      	ldr	r3, [r6, #0]
  4035be:	4621      	mov	r1, r4
  4035c0:	6858      	ldr	r0, [r3, #4]
  4035c2:	47a8      	blx	r5
	setbuf(stdout, NULL);
  4035c4:	6833      	ldr	r3, [r6, #0]
  4035c6:	4621      	mov	r1, r4
  4035c8:	6898      	ldr	r0, [r3, #8]
  4035ca:	47a8      	blx	r5

	/* Initialize the console uart */
	configure_console();

	/* Output demo information. */
	printf("-- Freertos Example --\n\r");
  4035cc:	4831      	ldr	r0, [pc, #196]	; (403694 <main+0x134>)
  4035ce:	4d32      	ldr	r5, [pc, #200]	; (403698 <main+0x138>)
  4035d0:	47a8      	blx	r5
	printf("-- %s\n\r", BOARD_NAME);
  4035d2:	4932      	ldr	r1, [pc, #200]	; (40369c <main+0x13c>)
  4035d4:	4832      	ldr	r0, [pc, #200]	; (4036a0 <main+0x140>)
  4035d6:	47a8      	blx	r5
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  4035d8:	4a32      	ldr	r2, [pc, #200]	; (4036a4 <main+0x144>)
  4035da:	4933      	ldr	r1, [pc, #204]	; (4036a8 <main+0x148>)
  4035dc:	4833      	ldr	r0, [pc, #204]	; (4036ac <main+0x14c>)
  4035de:	47a8      	blx	r5

	/* Create task to make led blink */
	if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL,
  4035e0:	9401      	str	r4, [sp, #4]
  4035e2:	9400      	str	r4, [sp, #0]
  4035e4:	4623      	mov	r3, r4
  4035e6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4035ea:	4931      	ldr	r1, [pc, #196]	; (4036b0 <main+0x150>)
  4035ec:	4831      	ldr	r0, [pc, #196]	; (4036b4 <main+0x154>)
  4035ee:	4c32      	ldr	r4, [pc, #200]	; (4036b8 <main+0x158>)
  4035f0:	47a0      	blx	r4
  4035f2:	2801      	cmp	r0, #1
  4035f4:	d001      	beq.n	4035fa <main+0x9a>
			TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led task\r\n");
  4035f6:	4831      	ldr	r0, [pc, #196]	; (4036bc <main+0x15c>)
  4035f8:	47a8      	blx	r5
	}
	if (xTaskCreate(task_send, "SEND", TASK_LED_STACK_SIZE, NULL, TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
  4035fa:	2300      	movs	r3, #0
  4035fc:	9301      	str	r3, [sp, #4]
  4035fe:	9300      	str	r3, [sp, #0]
  403600:	f44f 7280 	mov.w	r2, #256	; 0x100
  403604:	492e      	ldr	r1, [pc, #184]	; (4036c0 <main+0x160>)
  403606:	482f      	ldr	r0, [pc, #188]	; (4036c4 <main+0x164>)
  403608:	4c2b      	ldr	r4, [pc, #172]	; (4036b8 <main+0x158>)
  40360a:	47a0      	blx	r4
  40360c:	2801      	cmp	r0, #1
  40360e:	d002      	beq.n	403616 <main+0xb6>
		printf("Failed to create SEND task\r\n");
  403610:	482d      	ldr	r0, [pc, #180]	; (4036c8 <main+0x168>)
  403612:	4b21      	ldr	r3, [pc, #132]	; (403698 <main+0x138>)
  403614:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_adc, "ADC", TASK_LED_STACK_SIZE, NULL, TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
  403616:	2300      	movs	r3, #0
  403618:	9301      	str	r3, [sp, #4]
  40361a:	9300      	str	r3, [sp, #0]
  40361c:	f44f 7280 	mov.w	r2, #256	; 0x100
  403620:	492a      	ldr	r1, [pc, #168]	; (4036cc <main+0x16c>)
  403622:	482b      	ldr	r0, [pc, #172]	; (4036d0 <main+0x170>)
  403624:	4c24      	ldr	r4, [pc, #144]	; (4036b8 <main+0x158>)
  403626:	47a0      	blx	r4
  403628:	2801      	cmp	r0, #1
  40362a:	d002      	beq.n	403632 <main+0xd2>
		printf("Failed to create ADC task\r\n");
  40362c:	4829      	ldr	r0, [pc, #164]	; (4036d4 <main+0x174>)
  40362e:	4b1a      	ldr	r3, [pc, #104]	; (403698 <main+0x138>)
  403630:	4798      	blx	r3
	}

	if (xTaskCreate(task_response, "RESPONSE", TASK_LED_STACK_SIZE, NULL, TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
  403632:	2300      	movs	r3, #0
  403634:	9301      	str	r3, [sp, #4]
  403636:	9300      	str	r3, [sp, #0]
  403638:	f44f 7280 	mov.w	r2, #256	; 0x100
  40363c:	4926      	ldr	r1, [pc, #152]	; (4036d8 <main+0x178>)
  40363e:	4827      	ldr	r0, [pc, #156]	; (4036dc <main+0x17c>)
  403640:	4c1d      	ldr	r4, [pc, #116]	; (4036b8 <main+0x158>)
  403642:	47a0      	blx	r4
  403644:	2801      	cmp	r0, #1
  403646:	d002      	beq.n	40364e <main+0xee>
		printf("Failed to create RESPONSE task\r\n");
  403648:	4825      	ldr	r0, [pc, #148]	; (4036e0 <main+0x180>)
  40364a:	4b13      	ldr	r3, [pc, #76]	; (403698 <main+0x138>)
  40364c:	4798      	blx	r3
	}
	/* Start the scheduler. */
	vTaskStartScheduler();
  40364e:	4b25      	ldr	r3, [pc, #148]	; (4036e4 <main+0x184>)
  403650:	4798      	blx	r3

	/* Will only get here if there was insufficient memory to create the idle task. */
	return 0;
}
  403652:	2000      	movs	r0, #0
  403654:	b008      	add	sp, #32
  403656:	bd70      	pop	{r4, r5, r6, pc}
  403658:	004001d5 	.word	0x004001d5
  40365c:	004002d1 	.word	0x004002d1
  403660:	40028000 	.word	0x40028000
  403664:	20400be4 	.word	0x20400be4
  403668:	00403071 	.word	0x00403071
  40366c:	20400be0 	.word	0x20400be0
  403670:	00402f95 	.word	0x00402f95
  403674:	20400bdc 	.word	0x20400bdc
  403678:	00400a71 	.word	0x00400a71
  40367c:	08f0d180 	.word	0x08f0d180
  403680:	00400b39 	.word	0x00400b39
  403684:	00400b8d 	.word	0x00400b8d
  403688:	00400b93 	.word	0x00400b93
  40368c:	2040000c 	.word	0x2040000c
  403690:	00403eed 	.word	0x00403eed
  403694:	004066b0 	.word	0x004066b0
  403698:	00403739 	.word	0x00403739
  40369c:	004066cc 	.word	0x004066cc
  4036a0:	004066d8 	.word	0x004066d8
  4036a4:	004066e0 	.word	0x004066e0
  4036a8:	004066ec 	.word	0x004066ec
  4036ac:	004066f8 	.word	0x004066f8
  4036b0:	00406710 	.word	0x00406710
  4036b4:	00402f6d 	.word	0x00402f6d
  4036b8:	00401f05 	.word	0x00401f05
  4036bc:	00406714 	.word	0x00406714
  4036c0:	00406738 	.word	0x00406738
  4036c4:	004033d9 	.word	0x004033d9
  4036c8:	00406740 	.word	0x00406740
  4036cc:	00406760 	.word	0x00406760
  4036d0:	00402f15 	.word	0x00402f15
  4036d4:	00406764 	.word	0x00406764
  4036d8:	00406780 	.word	0x00406780
  4036dc:	004034f5 	.word	0x004034f5
  4036e0:	0040678c 	.word	0x0040678c
  4036e4:	004020f9 	.word	0x004020f9

004036e8 <__libc_init_array>:
  4036e8:	b570      	push	{r4, r5, r6, lr}
  4036ea:	4e0f      	ldr	r6, [pc, #60]	; (403728 <__libc_init_array+0x40>)
  4036ec:	4d0f      	ldr	r5, [pc, #60]	; (40372c <__libc_init_array+0x44>)
  4036ee:	1b76      	subs	r6, r6, r5
  4036f0:	10b6      	asrs	r6, r6, #2
  4036f2:	bf18      	it	ne
  4036f4:	2400      	movne	r4, #0
  4036f6:	d005      	beq.n	403704 <__libc_init_array+0x1c>
  4036f8:	3401      	adds	r4, #1
  4036fa:	f855 3b04 	ldr.w	r3, [r5], #4
  4036fe:	4798      	blx	r3
  403700:	42a6      	cmp	r6, r4
  403702:	d1f9      	bne.n	4036f8 <__libc_init_array+0x10>
  403704:	4e0a      	ldr	r6, [pc, #40]	; (403730 <__libc_init_array+0x48>)
  403706:	4d0b      	ldr	r5, [pc, #44]	; (403734 <__libc_init_array+0x4c>)
  403708:	1b76      	subs	r6, r6, r5
  40370a:	f003 f927 	bl	40695c <_init>
  40370e:	10b6      	asrs	r6, r6, #2
  403710:	bf18      	it	ne
  403712:	2400      	movne	r4, #0
  403714:	d006      	beq.n	403724 <__libc_init_array+0x3c>
  403716:	3401      	adds	r4, #1
  403718:	f855 3b04 	ldr.w	r3, [r5], #4
  40371c:	4798      	blx	r3
  40371e:	42a6      	cmp	r6, r4
  403720:	d1f9      	bne.n	403716 <__libc_init_array+0x2e>
  403722:	bd70      	pop	{r4, r5, r6, pc}
  403724:	bd70      	pop	{r4, r5, r6, pc}
  403726:	bf00      	nop
  403728:	00406968 	.word	0x00406968
  40372c:	00406968 	.word	0x00406968
  403730:	00406970 	.word	0x00406970
  403734:	00406968 	.word	0x00406968

00403738 <iprintf>:
  403738:	b40f      	push	{r0, r1, r2, r3}
  40373a:	b500      	push	{lr}
  40373c:	4907      	ldr	r1, [pc, #28]	; (40375c <iprintf+0x24>)
  40373e:	b083      	sub	sp, #12
  403740:	ab04      	add	r3, sp, #16
  403742:	6808      	ldr	r0, [r1, #0]
  403744:	f853 2b04 	ldr.w	r2, [r3], #4
  403748:	6881      	ldr	r1, [r0, #8]
  40374a:	9301      	str	r3, [sp, #4]
  40374c:	f000 fd66 	bl	40421c <_vfiprintf_r>
  403750:	b003      	add	sp, #12
  403752:	f85d eb04 	ldr.w	lr, [sp], #4
  403756:	b004      	add	sp, #16
  403758:	4770      	bx	lr
  40375a:	bf00      	nop
  40375c:	2040000c 	.word	0x2040000c

00403760 <malloc>:
  403760:	4b02      	ldr	r3, [pc, #8]	; (40376c <malloc+0xc>)
  403762:	4601      	mov	r1, r0
  403764:	6818      	ldr	r0, [r3, #0]
  403766:	f000 b80b 	b.w	403780 <_malloc_r>
  40376a:	bf00      	nop
  40376c:	2040000c 	.word	0x2040000c

00403770 <free>:
  403770:	4b02      	ldr	r3, [pc, #8]	; (40377c <free+0xc>)
  403772:	4601      	mov	r1, r0
  403774:	6818      	ldr	r0, [r3, #0]
  403776:	f001 be6d 	b.w	405454 <_free_r>
  40377a:	bf00      	nop
  40377c:	2040000c 	.word	0x2040000c

00403780 <_malloc_r>:
  403780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403784:	f101 060b 	add.w	r6, r1, #11
  403788:	2e16      	cmp	r6, #22
  40378a:	b083      	sub	sp, #12
  40378c:	4605      	mov	r5, r0
  40378e:	f240 809e 	bls.w	4038ce <_malloc_r+0x14e>
  403792:	f036 0607 	bics.w	r6, r6, #7
  403796:	f100 80bd 	bmi.w	403914 <_malloc_r+0x194>
  40379a:	42b1      	cmp	r1, r6
  40379c:	f200 80ba 	bhi.w	403914 <_malloc_r+0x194>
  4037a0:	f000 fb86 	bl	403eb0 <__malloc_lock>
  4037a4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4037a8:	f0c0 8293 	bcc.w	403cd2 <_malloc_r+0x552>
  4037ac:	0a73      	lsrs	r3, r6, #9
  4037ae:	f000 80b8 	beq.w	403922 <_malloc_r+0x1a2>
  4037b2:	2b04      	cmp	r3, #4
  4037b4:	f200 8179 	bhi.w	403aaa <_malloc_r+0x32a>
  4037b8:	09b3      	lsrs	r3, r6, #6
  4037ba:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4037be:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4037c2:	00c3      	lsls	r3, r0, #3
  4037c4:	4fbf      	ldr	r7, [pc, #764]	; (403ac4 <_malloc_r+0x344>)
  4037c6:	443b      	add	r3, r7
  4037c8:	f1a3 0108 	sub.w	r1, r3, #8
  4037cc:	685c      	ldr	r4, [r3, #4]
  4037ce:	42a1      	cmp	r1, r4
  4037d0:	d106      	bne.n	4037e0 <_malloc_r+0x60>
  4037d2:	e00c      	b.n	4037ee <_malloc_r+0x6e>
  4037d4:	2a00      	cmp	r2, #0
  4037d6:	f280 80aa 	bge.w	40392e <_malloc_r+0x1ae>
  4037da:	68e4      	ldr	r4, [r4, #12]
  4037dc:	42a1      	cmp	r1, r4
  4037de:	d006      	beq.n	4037ee <_malloc_r+0x6e>
  4037e0:	6863      	ldr	r3, [r4, #4]
  4037e2:	f023 0303 	bic.w	r3, r3, #3
  4037e6:	1b9a      	subs	r2, r3, r6
  4037e8:	2a0f      	cmp	r2, #15
  4037ea:	ddf3      	ble.n	4037d4 <_malloc_r+0x54>
  4037ec:	4670      	mov	r0, lr
  4037ee:	693c      	ldr	r4, [r7, #16]
  4037f0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403ad8 <_malloc_r+0x358>
  4037f4:	4574      	cmp	r4, lr
  4037f6:	f000 81ab 	beq.w	403b50 <_malloc_r+0x3d0>
  4037fa:	6863      	ldr	r3, [r4, #4]
  4037fc:	f023 0303 	bic.w	r3, r3, #3
  403800:	1b9a      	subs	r2, r3, r6
  403802:	2a0f      	cmp	r2, #15
  403804:	f300 8190 	bgt.w	403b28 <_malloc_r+0x3a8>
  403808:	2a00      	cmp	r2, #0
  40380a:	f8c7 e014 	str.w	lr, [r7, #20]
  40380e:	f8c7 e010 	str.w	lr, [r7, #16]
  403812:	f280 809d 	bge.w	403950 <_malloc_r+0x1d0>
  403816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40381a:	f080 8161 	bcs.w	403ae0 <_malloc_r+0x360>
  40381e:	08db      	lsrs	r3, r3, #3
  403820:	f103 0c01 	add.w	ip, r3, #1
  403824:	1099      	asrs	r1, r3, #2
  403826:	687a      	ldr	r2, [r7, #4]
  403828:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40382c:	f8c4 8008 	str.w	r8, [r4, #8]
  403830:	2301      	movs	r3, #1
  403832:	408b      	lsls	r3, r1
  403834:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403838:	4313      	orrs	r3, r2
  40383a:	3908      	subs	r1, #8
  40383c:	60e1      	str	r1, [r4, #12]
  40383e:	607b      	str	r3, [r7, #4]
  403840:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403844:	f8c8 400c 	str.w	r4, [r8, #12]
  403848:	1082      	asrs	r2, r0, #2
  40384a:	2401      	movs	r4, #1
  40384c:	4094      	lsls	r4, r2
  40384e:	429c      	cmp	r4, r3
  403850:	f200 808b 	bhi.w	40396a <_malloc_r+0x1ea>
  403854:	421c      	tst	r4, r3
  403856:	d106      	bne.n	403866 <_malloc_r+0xe6>
  403858:	f020 0003 	bic.w	r0, r0, #3
  40385c:	0064      	lsls	r4, r4, #1
  40385e:	421c      	tst	r4, r3
  403860:	f100 0004 	add.w	r0, r0, #4
  403864:	d0fa      	beq.n	40385c <_malloc_r+0xdc>
  403866:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40386a:	46cc      	mov	ip, r9
  40386c:	4680      	mov	r8, r0
  40386e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403872:	459c      	cmp	ip, r3
  403874:	d107      	bne.n	403886 <_malloc_r+0x106>
  403876:	e16d      	b.n	403b54 <_malloc_r+0x3d4>
  403878:	2a00      	cmp	r2, #0
  40387a:	f280 817b 	bge.w	403b74 <_malloc_r+0x3f4>
  40387e:	68db      	ldr	r3, [r3, #12]
  403880:	459c      	cmp	ip, r3
  403882:	f000 8167 	beq.w	403b54 <_malloc_r+0x3d4>
  403886:	6859      	ldr	r1, [r3, #4]
  403888:	f021 0103 	bic.w	r1, r1, #3
  40388c:	1b8a      	subs	r2, r1, r6
  40388e:	2a0f      	cmp	r2, #15
  403890:	ddf2      	ble.n	403878 <_malloc_r+0xf8>
  403892:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403896:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40389a:	9300      	str	r3, [sp, #0]
  40389c:	199c      	adds	r4, r3, r6
  40389e:	4628      	mov	r0, r5
  4038a0:	f046 0601 	orr.w	r6, r6, #1
  4038a4:	f042 0501 	orr.w	r5, r2, #1
  4038a8:	605e      	str	r6, [r3, #4]
  4038aa:	f8c8 c00c 	str.w	ip, [r8, #12]
  4038ae:	f8cc 8008 	str.w	r8, [ip, #8]
  4038b2:	617c      	str	r4, [r7, #20]
  4038b4:	613c      	str	r4, [r7, #16]
  4038b6:	f8c4 e00c 	str.w	lr, [r4, #12]
  4038ba:	f8c4 e008 	str.w	lr, [r4, #8]
  4038be:	6065      	str	r5, [r4, #4]
  4038c0:	505a      	str	r2, [r3, r1]
  4038c2:	f000 fafb 	bl	403ebc <__malloc_unlock>
  4038c6:	9b00      	ldr	r3, [sp, #0]
  4038c8:	f103 0408 	add.w	r4, r3, #8
  4038cc:	e01e      	b.n	40390c <_malloc_r+0x18c>
  4038ce:	2910      	cmp	r1, #16
  4038d0:	d820      	bhi.n	403914 <_malloc_r+0x194>
  4038d2:	f000 faed 	bl	403eb0 <__malloc_lock>
  4038d6:	2610      	movs	r6, #16
  4038d8:	2318      	movs	r3, #24
  4038da:	2002      	movs	r0, #2
  4038dc:	4f79      	ldr	r7, [pc, #484]	; (403ac4 <_malloc_r+0x344>)
  4038de:	443b      	add	r3, r7
  4038e0:	f1a3 0208 	sub.w	r2, r3, #8
  4038e4:	685c      	ldr	r4, [r3, #4]
  4038e6:	4294      	cmp	r4, r2
  4038e8:	f000 813d 	beq.w	403b66 <_malloc_r+0x3e6>
  4038ec:	6863      	ldr	r3, [r4, #4]
  4038ee:	68e1      	ldr	r1, [r4, #12]
  4038f0:	68a6      	ldr	r6, [r4, #8]
  4038f2:	f023 0303 	bic.w	r3, r3, #3
  4038f6:	4423      	add	r3, r4
  4038f8:	4628      	mov	r0, r5
  4038fa:	685a      	ldr	r2, [r3, #4]
  4038fc:	60f1      	str	r1, [r6, #12]
  4038fe:	f042 0201 	orr.w	r2, r2, #1
  403902:	608e      	str	r6, [r1, #8]
  403904:	605a      	str	r2, [r3, #4]
  403906:	f000 fad9 	bl	403ebc <__malloc_unlock>
  40390a:	3408      	adds	r4, #8
  40390c:	4620      	mov	r0, r4
  40390e:	b003      	add	sp, #12
  403910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403914:	2400      	movs	r4, #0
  403916:	230c      	movs	r3, #12
  403918:	4620      	mov	r0, r4
  40391a:	602b      	str	r3, [r5, #0]
  40391c:	b003      	add	sp, #12
  40391e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403922:	2040      	movs	r0, #64	; 0x40
  403924:	f44f 7300 	mov.w	r3, #512	; 0x200
  403928:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40392c:	e74a      	b.n	4037c4 <_malloc_r+0x44>
  40392e:	4423      	add	r3, r4
  403930:	68e1      	ldr	r1, [r4, #12]
  403932:	685a      	ldr	r2, [r3, #4]
  403934:	68a6      	ldr	r6, [r4, #8]
  403936:	f042 0201 	orr.w	r2, r2, #1
  40393a:	60f1      	str	r1, [r6, #12]
  40393c:	4628      	mov	r0, r5
  40393e:	608e      	str	r6, [r1, #8]
  403940:	605a      	str	r2, [r3, #4]
  403942:	f000 fabb 	bl	403ebc <__malloc_unlock>
  403946:	3408      	adds	r4, #8
  403948:	4620      	mov	r0, r4
  40394a:	b003      	add	sp, #12
  40394c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403950:	4423      	add	r3, r4
  403952:	4628      	mov	r0, r5
  403954:	685a      	ldr	r2, [r3, #4]
  403956:	f042 0201 	orr.w	r2, r2, #1
  40395a:	605a      	str	r2, [r3, #4]
  40395c:	f000 faae 	bl	403ebc <__malloc_unlock>
  403960:	3408      	adds	r4, #8
  403962:	4620      	mov	r0, r4
  403964:	b003      	add	sp, #12
  403966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40396a:	68bc      	ldr	r4, [r7, #8]
  40396c:	6863      	ldr	r3, [r4, #4]
  40396e:	f023 0803 	bic.w	r8, r3, #3
  403972:	45b0      	cmp	r8, r6
  403974:	d304      	bcc.n	403980 <_malloc_r+0x200>
  403976:	eba8 0306 	sub.w	r3, r8, r6
  40397a:	2b0f      	cmp	r3, #15
  40397c:	f300 8085 	bgt.w	403a8a <_malloc_r+0x30a>
  403980:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403adc <_malloc_r+0x35c>
  403984:	4b50      	ldr	r3, [pc, #320]	; (403ac8 <_malloc_r+0x348>)
  403986:	f8d9 2000 	ldr.w	r2, [r9]
  40398a:	681b      	ldr	r3, [r3, #0]
  40398c:	3201      	adds	r2, #1
  40398e:	4433      	add	r3, r6
  403990:	eb04 0a08 	add.w	sl, r4, r8
  403994:	f000 8155 	beq.w	403c42 <_malloc_r+0x4c2>
  403998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40399c:	330f      	adds	r3, #15
  40399e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4039a2:	f02b 0b0f 	bic.w	fp, fp, #15
  4039a6:	4659      	mov	r1, fp
  4039a8:	4628      	mov	r0, r5
  4039aa:	f000 fa8d 	bl	403ec8 <_sbrk_r>
  4039ae:	1c41      	adds	r1, r0, #1
  4039b0:	4602      	mov	r2, r0
  4039b2:	f000 80fc 	beq.w	403bae <_malloc_r+0x42e>
  4039b6:	4582      	cmp	sl, r0
  4039b8:	f200 80f7 	bhi.w	403baa <_malloc_r+0x42a>
  4039bc:	4b43      	ldr	r3, [pc, #268]	; (403acc <_malloc_r+0x34c>)
  4039be:	6819      	ldr	r1, [r3, #0]
  4039c0:	4459      	add	r1, fp
  4039c2:	6019      	str	r1, [r3, #0]
  4039c4:	f000 814d 	beq.w	403c62 <_malloc_r+0x4e2>
  4039c8:	f8d9 0000 	ldr.w	r0, [r9]
  4039cc:	3001      	adds	r0, #1
  4039ce:	bf1b      	ittet	ne
  4039d0:	eba2 0a0a 	subne.w	sl, r2, sl
  4039d4:	4451      	addne	r1, sl
  4039d6:	f8c9 2000 	streq.w	r2, [r9]
  4039da:	6019      	strne	r1, [r3, #0]
  4039dc:	f012 0107 	ands.w	r1, r2, #7
  4039e0:	f000 8115 	beq.w	403c0e <_malloc_r+0x48e>
  4039e4:	f1c1 0008 	rsb	r0, r1, #8
  4039e8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4039ec:	4402      	add	r2, r0
  4039ee:	3108      	adds	r1, #8
  4039f0:	eb02 090b 	add.w	r9, r2, fp
  4039f4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4039f8:	eba1 0909 	sub.w	r9, r1, r9
  4039fc:	4649      	mov	r1, r9
  4039fe:	4628      	mov	r0, r5
  403a00:	9301      	str	r3, [sp, #4]
  403a02:	9200      	str	r2, [sp, #0]
  403a04:	f000 fa60 	bl	403ec8 <_sbrk_r>
  403a08:	1c43      	adds	r3, r0, #1
  403a0a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403a0e:	f000 8143 	beq.w	403c98 <_malloc_r+0x518>
  403a12:	1a80      	subs	r0, r0, r2
  403a14:	4448      	add	r0, r9
  403a16:	f040 0001 	orr.w	r0, r0, #1
  403a1a:	6819      	ldr	r1, [r3, #0]
  403a1c:	60ba      	str	r2, [r7, #8]
  403a1e:	4449      	add	r1, r9
  403a20:	42bc      	cmp	r4, r7
  403a22:	6050      	str	r0, [r2, #4]
  403a24:	6019      	str	r1, [r3, #0]
  403a26:	d017      	beq.n	403a58 <_malloc_r+0x2d8>
  403a28:	f1b8 0f0f 	cmp.w	r8, #15
  403a2c:	f240 80fb 	bls.w	403c26 <_malloc_r+0x4a6>
  403a30:	6860      	ldr	r0, [r4, #4]
  403a32:	f1a8 020c 	sub.w	r2, r8, #12
  403a36:	f022 0207 	bic.w	r2, r2, #7
  403a3a:	eb04 0e02 	add.w	lr, r4, r2
  403a3e:	f000 0001 	and.w	r0, r0, #1
  403a42:	f04f 0c05 	mov.w	ip, #5
  403a46:	4310      	orrs	r0, r2
  403a48:	2a0f      	cmp	r2, #15
  403a4a:	6060      	str	r0, [r4, #4]
  403a4c:	f8ce c004 	str.w	ip, [lr, #4]
  403a50:	f8ce c008 	str.w	ip, [lr, #8]
  403a54:	f200 8117 	bhi.w	403c86 <_malloc_r+0x506>
  403a58:	4b1d      	ldr	r3, [pc, #116]	; (403ad0 <_malloc_r+0x350>)
  403a5a:	68bc      	ldr	r4, [r7, #8]
  403a5c:	681a      	ldr	r2, [r3, #0]
  403a5e:	4291      	cmp	r1, r2
  403a60:	bf88      	it	hi
  403a62:	6019      	strhi	r1, [r3, #0]
  403a64:	4b1b      	ldr	r3, [pc, #108]	; (403ad4 <_malloc_r+0x354>)
  403a66:	681a      	ldr	r2, [r3, #0]
  403a68:	4291      	cmp	r1, r2
  403a6a:	6862      	ldr	r2, [r4, #4]
  403a6c:	bf88      	it	hi
  403a6e:	6019      	strhi	r1, [r3, #0]
  403a70:	f022 0203 	bic.w	r2, r2, #3
  403a74:	4296      	cmp	r6, r2
  403a76:	eba2 0306 	sub.w	r3, r2, r6
  403a7a:	d801      	bhi.n	403a80 <_malloc_r+0x300>
  403a7c:	2b0f      	cmp	r3, #15
  403a7e:	dc04      	bgt.n	403a8a <_malloc_r+0x30a>
  403a80:	4628      	mov	r0, r5
  403a82:	f000 fa1b 	bl	403ebc <__malloc_unlock>
  403a86:	2400      	movs	r4, #0
  403a88:	e740      	b.n	40390c <_malloc_r+0x18c>
  403a8a:	19a2      	adds	r2, r4, r6
  403a8c:	f043 0301 	orr.w	r3, r3, #1
  403a90:	f046 0601 	orr.w	r6, r6, #1
  403a94:	6066      	str	r6, [r4, #4]
  403a96:	4628      	mov	r0, r5
  403a98:	60ba      	str	r2, [r7, #8]
  403a9a:	6053      	str	r3, [r2, #4]
  403a9c:	f000 fa0e 	bl	403ebc <__malloc_unlock>
  403aa0:	3408      	adds	r4, #8
  403aa2:	4620      	mov	r0, r4
  403aa4:	b003      	add	sp, #12
  403aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403aaa:	2b14      	cmp	r3, #20
  403aac:	d971      	bls.n	403b92 <_malloc_r+0x412>
  403aae:	2b54      	cmp	r3, #84	; 0x54
  403ab0:	f200 80a3 	bhi.w	403bfa <_malloc_r+0x47a>
  403ab4:	0b33      	lsrs	r3, r6, #12
  403ab6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403aba:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403abe:	00c3      	lsls	r3, r0, #3
  403ac0:	e680      	b.n	4037c4 <_malloc_r+0x44>
  403ac2:	bf00      	nop
  403ac4:	20400438 	.word	0x20400438
  403ac8:	20400bd0 	.word	0x20400bd0
  403acc:	20400ba0 	.word	0x20400ba0
  403ad0:	20400bc8 	.word	0x20400bc8
  403ad4:	20400bcc 	.word	0x20400bcc
  403ad8:	20400440 	.word	0x20400440
  403adc:	20400840 	.word	0x20400840
  403ae0:	0a5a      	lsrs	r2, r3, #9
  403ae2:	2a04      	cmp	r2, #4
  403ae4:	d95b      	bls.n	403b9e <_malloc_r+0x41e>
  403ae6:	2a14      	cmp	r2, #20
  403ae8:	f200 80ae 	bhi.w	403c48 <_malloc_r+0x4c8>
  403aec:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403af0:	00c9      	lsls	r1, r1, #3
  403af2:	325b      	adds	r2, #91	; 0x5b
  403af4:	eb07 0c01 	add.w	ip, r7, r1
  403af8:	5879      	ldr	r1, [r7, r1]
  403afa:	f1ac 0c08 	sub.w	ip, ip, #8
  403afe:	458c      	cmp	ip, r1
  403b00:	f000 8088 	beq.w	403c14 <_malloc_r+0x494>
  403b04:	684a      	ldr	r2, [r1, #4]
  403b06:	f022 0203 	bic.w	r2, r2, #3
  403b0a:	4293      	cmp	r3, r2
  403b0c:	d273      	bcs.n	403bf6 <_malloc_r+0x476>
  403b0e:	6889      	ldr	r1, [r1, #8]
  403b10:	458c      	cmp	ip, r1
  403b12:	d1f7      	bne.n	403b04 <_malloc_r+0x384>
  403b14:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403b18:	687b      	ldr	r3, [r7, #4]
  403b1a:	60e2      	str	r2, [r4, #12]
  403b1c:	f8c4 c008 	str.w	ip, [r4, #8]
  403b20:	6094      	str	r4, [r2, #8]
  403b22:	f8cc 400c 	str.w	r4, [ip, #12]
  403b26:	e68f      	b.n	403848 <_malloc_r+0xc8>
  403b28:	19a1      	adds	r1, r4, r6
  403b2a:	f046 0c01 	orr.w	ip, r6, #1
  403b2e:	f042 0601 	orr.w	r6, r2, #1
  403b32:	f8c4 c004 	str.w	ip, [r4, #4]
  403b36:	4628      	mov	r0, r5
  403b38:	6179      	str	r1, [r7, #20]
  403b3a:	6139      	str	r1, [r7, #16]
  403b3c:	f8c1 e00c 	str.w	lr, [r1, #12]
  403b40:	f8c1 e008 	str.w	lr, [r1, #8]
  403b44:	604e      	str	r6, [r1, #4]
  403b46:	50e2      	str	r2, [r4, r3]
  403b48:	f000 f9b8 	bl	403ebc <__malloc_unlock>
  403b4c:	3408      	adds	r4, #8
  403b4e:	e6dd      	b.n	40390c <_malloc_r+0x18c>
  403b50:	687b      	ldr	r3, [r7, #4]
  403b52:	e679      	b.n	403848 <_malloc_r+0xc8>
  403b54:	f108 0801 	add.w	r8, r8, #1
  403b58:	f018 0f03 	tst.w	r8, #3
  403b5c:	f10c 0c08 	add.w	ip, ip, #8
  403b60:	f47f ae85 	bne.w	40386e <_malloc_r+0xee>
  403b64:	e02d      	b.n	403bc2 <_malloc_r+0x442>
  403b66:	68dc      	ldr	r4, [r3, #12]
  403b68:	42a3      	cmp	r3, r4
  403b6a:	bf08      	it	eq
  403b6c:	3002      	addeq	r0, #2
  403b6e:	f43f ae3e 	beq.w	4037ee <_malloc_r+0x6e>
  403b72:	e6bb      	b.n	4038ec <_malloc_r+0x16c>
  403b74:	4419      	add	r1, r3
  403b76:	461c      	mov	r4, r3
  403b78:	684a      	ldr	r2, [r1, #4]
  403b7a:	68db      	ldr	r3, [r3, #12]
  403b7c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403b80:	f042 0201 	orr.w	r2, r2, #1
  403b84:	604a      	str	r2, [r1, #4]
  403b86:	4628      	mov	r0, r5
  403b88:	60f3      	str	r3, [r6, #12]
  403b8a:	609e      	str	r6, [r3, #8]
  403b8c:	f000 f996 	bl	403ebc <__malloc_unlock>
  403b90:	e6bc      	b.n	40390c <_malloc_r+0x18c>
  403b92:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403b96:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403b9a:	00c3      	lsls	r3, r0, #3
  403b9c:	e612      	b.n	4037c4 <_malloc_r+0x44>
  403b9e:	099a      	lsrs	r2, r3, #6
  403ba0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403ba4:	00c9      	lsls	r1, r1, #3
  403ba6:	3238      	adds	r2, #56	; 0x38
  403ba8:	e7a4      	b.n	403af4 <_malloc_r+0x374>
  403baa:	42bc      	cmp	r4, r7
  403bac:	d054      	beq.n	403c58 <_malloc_r+0x4d8>
  403bae:	68bc      	ldr	r4, [r7, #8]
  403bb0:	6862      	ldr	r2, [r4, #4]
  403bb2:	f022 0203 	bic.w	r2, r2, #3
  403bb6:	e75d      	b.n	403a74 <_malloc_r+0x2f4>
  403bb8:	f859 3908 	ldr.w	r3, [r9], #-8
  403bbc:	4599      	cmp	r9, r3
  403bbe:	f040 8086 	bne.w	403cce <_malloc_r+0x54e>
  403bc2:	f010 0f03 	tst.w	r0, #3
  403bc6:	f100 30ff 	add.w	r0, r0, #4294967295
  403bca:	d1f5      	bne.n	403bb8 <_malloc_r+0x438>
  403bcc:	687b      	ldr	r3, [r7, #4]
  403bce:	ea23 0304 	bic.w	r3, r3, r4
  403bd2:	607b      	str	r3, [r7, #4]
  403bd4:	0064      	lsls	r4, r4, #1
  403bd6:	429c      	cmp	r4, r3
  403bd8:	f63f aec7 	bhi.w	40396a <_malloc_r+0x1ea>
  403bdc:	2c00      	cmp	r4, #0
  403bde:	f43f aec4 	beq.w	40396a <_malloc_r+0x1ea>
  403be2:	421c      	tst	r4, r3
  403be4:	4640      	mov	r0, r8
  403be6:	f47f ae3e 	bne.w	403866 <_malloc_r+0xe6>
  403bea:	0064      	lsls	r4, r4, #1
  403bec:	421c      	tst	r4, r3
  403bee:	f100 0004 	add.w	r0, r0, #4
  403bf2:	d0fa      	beq.n	403bea <_malloc_r+0x46a>
  403bf4:	e637      	b.n	403866 <_malloc_r+0xe6>
  403bf6:	468c      	mov	ip, r1
  403bf8:	e78c      	b.n	403b14 <_malloc_r+0x394>
  403bfa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403bfe:	d815      	bhi.n	403c2c <_malloc_r+0x4ac>
  403c00:	0bf3      	lsrs	r3, r6, #15
  403c02:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403c06:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403c0a:	00c3      	lsls	r3, r0, #3
  403c0c:	e5da      	b.n	4037c4 <_malloc_r+0x44>
  403c0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403c12:	e6ed      	b.n	4039f0 <_malloc_r+0x270>
  403c14:	687b      	ldr	r3, [r7, #4]
  403c16:	1092      	asrs	r2, r2, #2
  403c18:	2101      	movs	r1, #1
  403c1a:	fa01 f202 	lsl.w	r2, r1, r2
  403c1e:	4313      	orrs	r3, r2
  403c20:	607b      	str	r3, [r7, #4]
  403c22:	4662      	mov	r2, ip
  403c24:	e779      	b.n	403b1a <_malloc_r+0x39a>
  403c26:	2301      	movs	r3, #1
  403c28:	6053      	str	r3, [r2, #4]
  403c2a:	e729      	b.n	403a80 <_malloc_r+0x300>
  403c2c:	f240 5254 	movw	r2, #1364	; 0x554
  403c30:	4293      	cmp	r3, r2
  403c32:	d822      	bhi.n	403c7a <_malloc_r+0x4fa>
  403c34:	0cb3      	lsrs	r3, r6, #18
  403c36:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403c3a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403c3e:	00c3      	lsls	r3, r0, #3
  403c40:	e5c0      	b.n	4037c4 <_malloc_r+0x44>
  403c42:	f103 0b10 	add.w	fp, r3, #16
  403c46:	e6ae      	b.n	4039a6 <_malloc_r+0x226>
  403c48:	2a54      	cmp	r2, #84	; 0x54
  403c4a:	d829      	bhi.n	403ca0 <_malloc_r+0x520>
  403c4c:	0b1a      	lsrs	r2, r3, #12
  403c4e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403c52:	00c9      	lsls	r1, r1, #3
  403c54:	326e      	adds	r2, #110	; 0x6e
  403c56:	e74d      	b.n	403af4 <_malloc_r+0x374>
  403c58:	4b20      	ldr	r3, [pc, #128]	; (403cdc <_malloc_r+0x55c>)
  403c5a:	6819      	ldr	r1, [r3, #0]
  403c5c:	4459      	add	r1, fp
  403c5e:	6019      	str	r1, [r3, #0]
  403c60:	e6b2      	b.n	4039c8 <_malloc_r+0x248>
  403c62:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403c66:	2800      	cmp	r0, #0
  403c68:	f47f aeae 	bne.w	4039c8 <_malloc_r+0x248>
  403c6c:	eb08 030b 	add.w	r3, r8, fp
  403c70:	68ba      	ldr	r2, [r7, #8]
  403c72:	f043 0301 	orr.w	r3, r3, #1
  403c76:	6053      	str	r3, [r2, #4]
  403c78:	e6ee      	b.n	403a58 <_malloc_r+0x2d8>
  403c7a:	207f      	movs	r0, #127	; 0x7f
  403c7c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403c80:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403c84:	e59e      	b.n	4037c4 <_malloc_r+0x44>
  403c86:	f104 0108 	add.w	r1, r4, #8
  403c8a:	4628      	mov	r0, r5
  403c8c:	9300      	str	r3, [sp, #0]
  403c8e:	f001 fbe1 	bl	405454 <_free_r>
  403c92:	9b00      	ldr	r3, [sp, #0]
  403c94:	6819      	ldr	r1, [r3, #0]
  403c96:	e6df      	b.n	403a58 <_malloc_r+0x2d8>
  403c98:	2001      	movs	r0, #1
  403c9a:	f04f 0900 	mov.w	r9, #0
  403c9e:	e6bc      	b.n	403a1a <_malloc_r+0x29a>
  403ca0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403ca4:	d805      	bhi.n	403cb2 <_malloc_r+0x532>
  403ca6:	0bda      	lsrs	r2, r3, #15
  403ca8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403cac:	00c9      	lsls	r1, r1, #3
  403cae:	3277      	adds	r2, #119	; 0x77
  403cb0:	e720      	b.n	403af4 <_malloc_r+0x374>
  403cb2:	f240 5154 	movw	r1, #1364	; 0x554
  403cb6:	428a      	cmp	r2, r1
  403cb8:	d805      	bhi.n	403cc6 <_malloc_r+0x546>
  403cba:	0c9a      	lsrs	r2, r3, #18
  403cbc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403cc0:	00c9      	lsls	r1, r1, #3
  403cc2:	327c      	adds	r2, #124	; 0x7c
  403cc4:	e716      	b.n	403af4 <_malloc_r+0x374>
  403cc6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403cca:	227e      	movs	r2, #126	; 0x7e
  403ccc:	e712      	b.n	403af4 <_malloc_r+0x374>
  403cce:	687b      	ldr	r3, [r7, #4]
  403cd0:	e780      	b.n	403bd4 <_malloc_r+0x454>
  403cd2:	08f0      	lsrs	r0, r6, #3
  403cd4:	f106 0308 	add.w	r3, r6, #8
  403cd8:	e600      	b.n	4038dc <_malloc_r+0x15c>
  403cda:	bf00      	nop
  403cdc:	20400ba0 	.word	0x20400ba0

00403ce0 <memcpy>:
  403ce0:	4684      	mov	ip, r0
  403ce2:	ea41 0300 	orr.w	r3, r1, r0
  403ce6:	f013 0303 	ands.w	r3, r3, #3
  403cea:	d16d      	bne.n	403dc8 <memcpy+0xe8>
  403cec:	3a40      	subs	r2, #64	; 0x40
  403cee:	d341      	bcc.n	403d74 <memcpy+0x94>
  403cf0:	f851 3b04 	ldr.w	r3, [r1], #4
  403cf4:	f840 3b04 	str.w	r3, [r0], #4
  403cf8:	f851 3b04 	ldr.w	r3, [r1], #4
  403cfc:	f840 3b04 	str.w	r3, [r0], #4
  403d00:	f851 3b04 	ldr.w	r3, [r1], #4
  403d04:	f840 3b04 	str.w	r3, [r0], #4
  403d08:	f851 3b04 	ldr.w	r3, [r1], #4
  403d0c:	f840 3b04 	str.w	r3, [r0], #4
  403d10:	f851 3b04 	ldr.w	r3, [r1], #4
  403d14:	f840 3b04 	str.w	r3, [r0], #4
  403d18:	f851 3b04 	ldr.w	r3, [r1], #4
  403d1c:	f840 3b04 	str.w	r3, [r0], #4
  403d20:	f851 3b04 	ldr.w	r3, [r1], #4
  403d24:	f840 3b04 	str.w	r3, [r0], #4
  403d28:	f851 3b04 	ldr.w	r3, [r1], #4
  403d2c:	f840 3b04 	str.w	r3, [r0], #4
  403d30:	f851 3b04 	ldr.w	r3, [r1], #4
  403d34:	f840 3b04 	str.w	r3, [r0], #4
  403d38:	f851 3b04 	ldr.w	r3, [r1], #4
  403d3c:	f840 3b04 	str.w	r3, [r0], #4
  403d40:	f851 3b04 	ldr.w	r3, [r1], #4
  403d44:	f840 3b04 	str.w	r3, [r0], #4
  403d48:	f851 3b04 	ldr.w	r3, [r1], #4
  403d4c:	f840 3b04 	str.w	r3, [r0], #4
  403d50:	f851 3b04 	ldr.w	r3, [r1], #4
  403d54:	f840 3b04 	str.w	r3, [r0], #4
  403d58:	f851 3b04 	ldr.w	r3, [r1], #4
  403d5c:	f840 3b04 	str.w	r3, [r0], #4
  403d60:	f851 3b04 	ldr.w	r3, [r1], #4
  403d64:	f840 3b04 	str.w	r3, [r0], #4
  403d68:	f851 3b04 	ldr.w	r3, [r1], #4
  403d6c:	f840 3b04 	str.w	r3, [r0], #4
  403d70:	3a40      	subs	r2, #64	; 0x40
  403d72:	d2bd      	bcs.n	403cf0 <memcpy+0x10>
  403d74:	3230      	adds	r2, #48	; 0x30
  403d76:	d311      	bcc.n	403d9c <memcpy+0xbc>
  403d78:	f851 3b04 	ldr.w	r3, [r1], #4
  403d7c:	f840 3b04 	str.w	r3, [r0], #4
  403d80:	f851 3b04 	ldr.w	r3, [r1], #4
  403d84:	f840 3b04 	str.w	r3, [r0], #4
  403d88:	f851 3b04 	ldr.w	r3, [r1], #4
  403d8c:	f840 3b04 	str.w	r3, [r0], #4
  403d90:	f851 3b04 	ldr.w	r3, [r1], #4
  403d94:	f840 3b04 	str.w	r3, [r0], #4
  403d98:	3a10      	subs	r2, #16
  403d9a:	d2ed      	bcs.n	403d78 <memcpy+0x98>
  403d9c:	320c      	adds	r2, #12
  403d9e:	d305      	bcc.n	403dac <memcpy+0xcc>
  403da0:	f851 3b04 	ldr.w	r3, [r1], #4
  403da4:	f840 3b04 	str.w	r3, [r0], #4
  403da8:	3a04      	subs	r2, #4
  403daa:	d2f9      	bcs.n	403da0 <memcpy+0xc0>
  403dac:	3204      	adds	r2, #4
  403dae:	d008      	beq.n	403dc2 <memcpy+0xe2>
  403db0:	07d2      	lsls	r2, r2, #31
  403db2:	bf1c      	itt	ne
  403db4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403db8:	f800 3b01 	strbne.w	r3, [r0], #1
  403dbc:	d301      	bcc.n	403dc2 <memcpy+0xe2>
  403dbe:	880b      	ldrh	r3, [r1, #0]
  403dc0:	8003      	strh	r3, [r0, #0]
  403dc2:	4660      	mov	r0, ip
  403dc4:	4770      	bx	lr
  403dc6:	bf00      	nop
  403dc8:	2a08      	cmp	r2, #8
  403dca:	d313      	bcc.n	403df4 <memcpy+0x114>
  403dcc:	078b      	lsls	r3, r1, #30
  403dce:	d08d      	beq.n	403cec <memcpy+0xc>
  403dd0:	f010 0303 	ands.w	r3, r0, #3
  403dd4:	d08a      	beq.n	403cec <memcpy+0xc>
  403dd6:	f1c3 0304 	rsb	r3, r3, #4
  403dda:	1ad2      	subs	r2, r2, r3
  403ddc:	07db      	lsls	r3, r3, #31
  403dde:	bf1c      	itt	ne
  403de0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403de4:	f800 3b01 	strbne.w	r3, [r0], #1
  403de8:	d380      	bcc.n	403cec <memcpy+0xc>
  403dea:	f831 3b02 	ldrh.w	r3, [r1], #2
  403dee:	f820 3b02 	strh.w	r3, [r0], #2
  403df2:	e77b      	b.n	403cec <memcpy+0xc>
  403df4:	3a04      	subs	r2, #4
  403df6:	d3d9      	bcc.n	403dac <memcpy+0xcc>
  403df8:	3a01      	subs	r2, #1
  403dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
  403dfe:	f800 3b01 	strb.w	r3, [r0], #1
  403e02:	d2f9      	bcs.n	403df8 <memcpy+0x118>
  403e04:	780b      	ldrb	r3, [r1, #0]
  403e06:	7003      	strb	r3, [r0, #0]
  403e08:	784b      	ldrb	r3, [r1, #1]
  403e0a:	7043      	strb	r3, [r0, #1]
  403e0c:	788b      	ldrb	r3, [r1, #2]
  403e0e:	7083      	strb	r3, [r0, #2]
  403e10:	4660      	mov	r0, ip
  403e12:	4770      	bx	lr

00403e14 <memset>:
  403e14:	b470      	push	{r4, r5, r6}
  403e16:	0786      	lsls	r6, r0, #30
  403e18:	d046      	beq.n	403ea8 <memset+0x94>
  403e1a:	1e54      	subs	r4, r2, #1
  403e1c:	2a00      	cmp	r2, #0
  403e1e:	d041      	beq.n	403ea4 <memset+0x90>
  403e20:	b2ca      	uxtb	r2, r1
  403e22:	4603      	mov	r3, r0
  403e24:	e002      	b.n	403e2c <memset+0x18>
  403e26:	f114 34ff 	adds.w	r4, r4, #4294967295
  403e2a:	d33b      	bcc.n	403ea4 <memset+0x90>
  403e2c:	f803 2b01 	strb.w	r2, [r3], #1
  403e30:	079d      	lsls	r5, r3, #30
  403e32:	d1f8      	bne.n	403e26 <memset+0x12>
  403e34:	2c03      	cmp	r4, #3
  403e36:	d92e      	bls.n	403e96 <memset+0x82>
  403e38:	b2cd      	uxtb	r5, r1
  403e3a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403e3e:	2c0f      	cmp	r4, #15
  403e40:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403e44:	d919      	bls.n	403e7a <memset+0x66>
  403e46:	f103 0210 	add.w	r2, r3, #16
  403e4a:	4626      	mov	r6, r4
  403e4c:	3e10      	subs	r6, #16
  403e4e:	2e0f      	cmp	r6, #15
  403e50:	f842 5c10 	str.w	r5, [r2, #-16]
  403e54:	f842 5c0c 	str.w	r5, [r2, #-12]
  403e58:	f842 5c08 	str.w	r5, [r2, #-8]
  403e5c:	f842 5c04 	str.w	r5, [r2, #-4]
  403e60:	f102 0210 	add.w	r2, r2, #16
  403e64:	d8f2      	bhi.n	403e4c <memset+0x38>
  403e66:	f1a4 0210 	sub.w	r2, r4, #16
  403e6a:	f022 020f 	bic.w	r2, r2, #15
  403e6e:	f004 040f 	and.w	r4, r4, #15
  403e72:	3210      	adds	r2, #16
  403e74:	2c03      	cmp	r4, #3
  403e76:	4413      	add	r3, r2
  403e78:	d90d      	bls.n	403e96 <memset+0x82>
  403e7a:	461e      	mov	r6, r3
  403e7c:	4622      	mov	r2, r4
  403e7e:	3a04      	subs	r2, #4
  403e80:	2a03      	cmp	r2, #3
  403e82:	f846 5b04 	str.w	r5, [r6], #4
  403e86:	d8fa      	bhi.n	403e7e <memset+0x6a>
  403e88:	1f22      	subs	r2, r4, #4
  403e8a:	f022 0203 	bic.w	r2, r2, #3
  403e8e:	3204      	adds	r2, #4
  403e90:	4413      	add	r3, r2
  403e92:	f004 0403 	and.w	r4, r4, #3
  403e96:	b12c      	cbz	r4, 403ea4 <memset+0x90>
  403e98:	b2c9      	uxtb	r1, r1
  403e9a:	441c      	add	r4, r3
  403e9c:	f803 1b01 	strb.w	r1, [r3], #1
  403ea0:	429c      	cmp	r4, r3
  403ea2:	d1fb      	bne.n	403e9c <memset+0x88>
  403ea4:	bc70      	pop	{r4, r5, r6}
  403ea6:	4770      	bx	lr
  403ea8:	4614      	mov	r4, r2
  403eaa:	4603      	mov	r3, r0
  403eac:	e7c2      	b.n	403e34 <memset+0x20>
  403eae:	bf00      	nop

00403eb0 <__malloc_lock>:
  403eb0:	4801      	ldr	r0, [pc, #4]	; (403eb8 <__malloc_lock+0x8>)
  403eb2:	f001 bd69 	b.w	405988 <__retarget_lock_acquire_recursive>
  403eb6:	bf00      	nop
  403eb8:	20400ccc 	.word	0x20400ccc

00403ebc <__malloc_unlock>:
  403ebc:	4801      	ldr	r0, [pc, #4]	; (403ec4 <__malloc_unlock+0x8>)
  403ebe:	f001 bd65 	b.w	40598c <__retarget_lock_release_recursive>
  403ec2:	bf00      	nop
  403ec4:	20400ccc 	.word	0x20400ccc

00403ec8 <_sbrk_r>:
  403ec8:	b538      	push	{r3, r4, r5, lr}
  403eca:	4c07      	ldr	r4, [pc, #28]	; (403ee8 <_sbrk_r+0x20>)
  403ecc:	2300      	movs	r3, #0
  403ece:	4605      	mov	r5, r0
  403ed0:	4608      	mov	r0, r1
  403ed2:	6023      	str	r3, [r4, #0]
  403ed4:	f7fc ffac 	bl	400e30 <_sbrk>
  403ed8:	1c43      	adds	r3, r0, #1
  403eda:	d000      	beq.n	403ede <_sbrk_r+0x16>
  403edc:	bd38      	pop	{r3, r4, r5, pc}
  403ede:	6823      	ldr	r3, [r4, #0]
  403ee0:	2b00      	cmp	r3, #0
  403ee2:	d0fb      	beq.n	403edc <_sbrk_r+0x14>
  403ee4:	602b      	str	r3, [r5, #0]
  403ee6:	bd38      	pop	{r3, r4, r5, pc}
  403ee8:	20400ce0 	.word	0x20400ce0

00403eec <setbuf>:
  403eec:	2900      	cmp	r1, #0
  403eee:	bf0c      	ite	eq
  403ef0:	2202      	moveq	r2, #2
  403ef2:	2200      	movne	r2, #0
  403ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403ef8:	f000 b800 	b.w	403efc <setvbuf>

00403efc <setvbuf>:
  403efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403f00:	4c61      	ldr	r4, [pc, #388]	; (404088 <setvbuf+0x18c>)
  403f02:	6825      	ldr	r5, [r4, #0]
  403f04:	b083      	sub	sp, #12
  403f06:	4604      	mov	r4, r0
  403f08:	460f      	mov	r7, r1
  403f0a:	4690      	mov	r8, r2
  403f0c:	461e      	mov	r6, r3
  403f0e:	b115      	cbz	r5, 403f16 <setvbuf+0x1a>
  403f10:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403f12:	2b00      	cmp	r3, #0
  403f14:	d064      	beq.n	403fe0 <setvbuf+0xe4>
  403f16:	f1b8 0f02 	cmp.w	r8, #2
  403f1a:	d006      	beq.n	403f2a <setvbuf+0x2e>
  403f1c:	f1b8 0f01 	cmp.w	r8, #1
  403f20:	f200 809f 	bhi.w	404062 <setvbuf+0x166>
  403f24:	2e00      	cmp	r6, #0
  403f26:	f2c0 809c 	blt.w	404062 <setvbuf+0x166>
  403f2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403f2c:	07d8      	lsls	r0, r3, #31
  403f2e:	d534      	bpl.n	403f9a <setvbuf+0x9e>
  403f30:	4621      	mov	r1, r4
  403f32:	4628      	mov	r0, r5
  403f34:	f001 f910 	bl	405158 <_fflush_r>
  403f38:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403f3a:	b141      	cbz	r1, 403f4e <setvbuf+0x52>
  403f3c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403f40:	4299      	cmp	r1, r3
  403f42:	d002      	beq.n	403f4a <setvbuf+0x4e>
  403f44:	4628      	mov	r0, r5
  403f46:	f001 fa85 	bl	405454 <_free_r>
  403f4a:	2300      	movs	r3, #0
  403f4c:	6323      	str	r3, [r4, #48]	; 0x30
  403f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403f52:	2200      	movs	r2, #0
  403f54:	61a2      	str	r2, [r4, #24]
  403f56:	6062      	str	r2, [r4, #4]
  403f58:	061a      	lsls	r2, r3, #24
  403f5a:	d43a      	bmi.n	403fd2 <setvbuf+0xd6>
  403f5c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403f60:	f023 0303 	bic.w	r3, r3, #3
  403f64:	f1b8 0f02 	cmp.w	r8, #2
  403f68:	81a3      	strh	r3, [r4, #12]
  403f6a:	d01d      	beq.n	403fa8 <setvbuf+0xac>
  403f6c:	ab01      	add	r3, sp, #4
  403f6e:	466a      	mov	r2, sp
  403f70:	4621      	mov	r1, r4
  403f72:	4628      	mov	r0, r5
  403f74:	f001 fd0c 	bl	405990 <__swhatbuf_r>
  403f78:	89a3      	ldrh	r3, [r4, #12]
  403f7a:	4318      	orrs	r0, r3
  403f7c:	81a0      	strh	r0, [r4, #12]
  403f7e:	2e00      	cmp	r6, #0
  403f80:	d132      	bne.n	403fe8 <setvbuf+0xec>
  403f82:	9e00      	ldr	r6, [sp, #0]
  403f84:	4630      	mov	r0, r6
  403f86:	f7ff fbeb 	bl	403760 <malloc>
  403f8a:	4607      	mov	r7, r0
  403f8c:	2800      	cmp	r0, #0
  403f8e:	d06b      	beq.n	404068 <setvbuf+0x16c>
  403f90:	89a3      	ldrh	r3, [r4, #12]
  403f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403f96:	81a3      	strh	r3, [r4, #12]
  403f98:	e028      	b.n	403fec <setvbuf+0xf0>
  403f9a:	89a3      	ldrh	r3, [r4, #12]
  403f9c:	0599      	lsls	r1, r3, #22
  403f9e:	d4c7      	bmi.n	403f30 <setvbuf+0x34>
  403fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403fa2:	f001 fcf1 	bl	405988 <__retarget_lock_acquire_recursive>
  403fa6:	e7c3      	b.n	403f30 <setvbuf+0x34>
  403fa8:	2500      	movs	r5, #0
  403faa:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403fac:	2600      	movs	r6, #0
  403fae:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403fb2:	f043 0302 	orr.w	r3, r3, #2
  403fb6:	2001      	movs	r0, #1
  403fb8:	60a6      	str	r6, [r4, #8]
  403fba:	07ce      	lsls	r6, r1, #31
  403fbc:	81a3      	strh	r3, [r4, #12]
  403fbe:	6022      	str	r2, [r4, #0]
  403fc0:	6122      	str	r2, [r4, #16]
  403fc2:	6160      	str	r0, [r4, #20]
  403fc4:	d401      	bmi.n	403fca <setvbuf+0xce>
  403fc6:	0598      	lsls	r0, r3, #22
  403fc8:	d53e      	bpl.n	404048 <setvbuf+0x14c>
  403fca:	4628      	mov	r0, r5
  403fcc:	b003      	add	sp, #12
  403fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403fd2:	6921      	ldr	r1, [r4, #16]
  403fd4:	4628      	mov	r0, r5
  403fd6:	f001 fa3d 	bl	405454 <_free_r>
  403fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403fde:	e7bd      	b.n	403f5c <setvbuf+0x60>
  403fe0:	4628      	mov	r0, r5
  403fe2:	f001 f911 	bl	405208 <__sinit>
  403fe6:	e796      	b.n	403f16 <setvbuf+0x1a>
  403fe8:	2f00      	cmp	r7, #0
  403fea:	d0cb      	beq.n	403f84 <setvbuf+0x88>
  403fec:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403fee:	2b00      	cmp	r3, #0
  403ff0:	d033      	beq.n	40405a <setvbuf+0x15e>
  403ff2:	9b00      	ldr	r3, [sp, #0]
  403ff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403ff8:	6027      	str	r7, [r4, #0]
  403ffa:	429e      	cmp	r6, r3
  403ffc:	bf1c      	itt	ne
  403ffe:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404002:	81a2      	strhne	r2, [r4, #12]
  404004:	f1b8 0f01 	cmp.w	r8, #1
  404008:	bf04      	itt	eq
  40400a:	f042 0201 	orreq.w	r2, r2, #1
  40400e:	81a2      	strheq	r2, [r4, #12]
  404010:	b292      	uxth	r2, r2
  404012:	f012 0308 	ands.w	r3, r2, #8
  404016:	6127      	str	r7, [r4, #16]
  404018:	6166      	str	r6, [r4, #20]
  40401a:	d00e      	beq.n	40403a <setvbuf+0x13e>
  40401c:	07d1      	lsls	r1, r2, #31
  40401e:	d51a      	bpl.n	404056 <setvbuf+0x15a>
  404020:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404022:	4276      	negs	r6, r6
  404024:	2300      	movs	r3, #0
  404026:	f015 0501 	ands.w	r5, r5, #1
  40402a:	61a6      	str	r6, [r4, #24]
  40402c:	60a3      	str	r3, [r4, #8]
  40402e:	d009      	beq.n	404044 <setvbuf+0x148>
  404030:	2500      	movs	r5, #0
  404032:	4628      	mov	r0, r5
  404034:	b003      	add	sp, #12
  404036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40403a:	60a3      	str	r3, [r4, #8]
  40403c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40403e:	f015 0501 	ands.w	r5, r5, #1
  404042:	d1f5      	bne.n	404030 <setvbuf+0x134>
  404044:	0593      	lsls	r3, r2, #22
  404046:	d4c0      	bmi.n	403fca <setvbuf+0xce>
  404048:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40404a:	f001 fc9f 	bl	40598c <__retarget_lock_release_recursive>
  40404e:	4628      	mov	r0, r5
  404050:	b003      	add	sp, #12
  404052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404056:	60a6      	str	r6, [r4, #8]
  404058:	e7f0      	b.n	40403c <setvbuf+0x140>
  40405a:	4628      	mov	r0, r5
  40405c:	f001 f8d4 	bl	405208 <__sinit>
  404060:	e7c7      	b.n	403ff2 <setvbuf+0xf6>
  404062:	f04f 35ff 	mov.w	r5, #4294967295
  404066:	e7b0      	b.n	403fca <setvbuf+0xce>
  404068:	f8dd 9000 	ldr.w	r9, [sp]
  40406c:	45b1      	cmp	r9, r6
  40406e:	d004      	beq.n	40407a <setvbuf+0x17e>
  404070:	4648      	mov	r0, r9
  404072:	f7ff fb75 	bl	403760 <malloc>
  404076:	4607      	mov	r7, r0
  404078:	b920      	cbnz	r0, 404084 <setvbuf+0x188>
  40407a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40407e:	f04f 35ff 	mov.w	r5, #4294967295
  404082:	e792      	b.n	403faa <setvbuf+0xae>
  404084:	464e      	mov	r6, r9
  404086:	e783      	b.n	403f90 <setvbuf+0x94>
  404088:	2040000c 	.word	0x2040000c
	...

004040c0 <strlen>:
  4040c0:	f890 f000 	pld	[r0]
  4040c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4040c8:	f020 0107 	bic.w	r1, r0, #7
  4040cc:	f06f 0c00 	mvn.w	ip, #0
  4040d0:	f010 0407 	ands.w	r4, r0, #7
  4040d4:	f891 f020 	pld	[r1, #32]
  4040d8:	f040 8049 	bne.w	40416e <strlen+0xae>
  4040dc:	f04f 0400 	mov.w	r4, #0
  4040e0:	f06f 0007 	mvn.w	r0, #7
  4040e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4040e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4040ec:	f100 0008 	add.w	r0, r0, #8
  4040f0:	fa82 f24c 	uadd8	r2, r2, ip
  4040f4:	faa4 f28c 	sel	r2, r4, ip
  4040f8:	fa83 f34c 	uadd8	r3, r3, ip
  4040fc:	faa2 f38c 	sel	r3, r2, ip
  404100:	bb4b      	cbnz	r3, 404156 <strlen+0x96>
  404102:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404106:	fa82 f24c 	uadd8	r2, r2, ip
  40410a:	f100 0008 	add.w	r0, r0, #8
  40410e:	faa4 f28c 	sel	r2, r4, ip
  404112:	fa83 f34c 	uadd8	r3, r3, ip
  404116:	faa2 f38c 	sel	r3, r2, ip
  40411a:	b9e3      	cbnz	r3, 404156 <strlen+0x96>
  40411c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404120:	fa82 f24c 	uadd8	r2, r2, ip
  404124:	f100 0008 	add.w	r0, r0, #8
  404128:	faa4 f28c 	sel	r2, r4, ip
  40412c:	fa83 f34c 	uadd8	r3, r3, ip
  404130:	faa2 f38c 	sel	r3, r2, ip
  404134:	b97b      	cbnz	r3, 404156 <strlen+0x96>
  404136:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40413a:	f101 0120 	add.w	r1, r1, #32
  40413e:	fa82 f24c 	uadd8	r2, r2, ip
  404142:	f100 0008 	add.w	r0, r0, #8
  404146:	faa4 f28c 	sel	r2, r4, ip
  40414a:	fa83 f34c 	uadd8	r3, r3, ip
  40414e:	faa2 f38c 	sel	r3, r2, ip
  404152:	2b00      	cmp	r3, #0
  404154:	d0c6      	beq.n	4040e4 <strlen+0x24>
  404156:	2a00      	cmp	r2, #0
  404158:	bf04      	itt	eq
  40415a:	3004      	addeq	r0, #4
  40415c:	461a      	moveq	r2, r3
  40415e:	ba12      	rev	r2, r2
  404160:	fab2 f282 	clz	r2, r2
  404164:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404168:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40416c:	4770      	bx	lr
  40416e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404172:	f004 0503 	and.w	r5, r4, #3
  404176:	f1c4 0000 	rsb	r0, r4, #0
  40417a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40417e:	f014 0f04 	tst.w	r4, #4
  404182:	f891 f040 	pld	[r1, #64]	; 0x40
  404186:	fa0c f505 	lsl.w	r5, ip, r5
  40418a:	ea62 0205 	orn	r2, r2, r5
  40418e:	bf1c      	itt	ne
  404190:	ea63 0305 	ornne	r3, r3, r5
  404194:	4662      	movne	r2, ip
  404196:	f04f 0400 	mov.w	r4, #0
  40419a:	e7a9      	b.n	4040f0 <strlen+0x30>

0040419c <__sprint_r.part.0>:
  40419c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4041a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4041a2:	049c      	lsls	r4, r3, #18
  4041a4:	4693      	mov	fp, r2
  4041a6:	d52f      	bpl.n	404208 <__sprint_r.part.0+0x6c>
  4041a8:	6893      	ldr	r3, [r2, #8]
  4041aa:	6812      	ldr	r2, [r2, #0]
  4041ac:	b353      	cbz	r3, 404204 <__sprint_r.part.0+0x68>
  4041ae:	460e      	mov	r6, r1
  4041b0:	4607      	mov	r7, r0
  4041b2:	f102 0908 	add.w	r9, r2, #8
  4041b6:	e919 0420 	ldmdb	r9, {r5, sl}
  4041ba:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4041be:	d017      	beq.n	4041f0 <__sprint_r.part.0+0x54>
  4041c0:	3d04      	subs	r5, #4
  4041c2:	2400      	movs	r4, #0
  4041c4:	e001      	b.n	4041ca <__sprint_r.part.0+0x2e>
  4041c6:	45a0      	cmp	r8, r4
  4041c8:	d010      	beq.n	4041ec <__sprint_r.part.0+0x50>
  4041ca:	4632      	mov	r2, r6
  4041cc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4041d0:	4638      	mov	r0, r7
  4041d2:	f001 f8bb 	bl	40534c <_fputwc_r>
  4041d6:	1c43      	adds	r3, r0, #1
  4041d8:	f104 0401 	add.w	r4, r4, #1
  4041dc:	d1f3      	bne.n	4041c6 <__sprint_r.part.0+0x2a>
  4041de:	2300      	movs	r3, #0
  4041e0:	f8cb 3008 	str.w	r3, [fp, #8]
  4041e4:	f8cb 3004 	str.w	r3, [fp, #4]
  4041e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4041ec:	f8db 3008 	ldr.w	r3, [fp, #8]
  4041f0:	f02a 0a03 	bic.w	sl, sl, #3
  4041f4:	eba3 030a 	sub.w	r3, r3, sl
  4041f8:	f8cb 3008 	str.w	r3, [fp, #8]
  4041fc:	f109 0908 	add.w	r9, r9, #8
  404200:	2b00      	cmp	r3, #0
  404202:	d1d8      	bne.n	4041b6 <__sprint_r.part.0+0x1a>
  404204:	2000      	movs	r0, #0
  404206:	e7ea      	b.n	4041de <__sprint_r.part.0+0x42>
  404208:	f001 fa0a 	bl	405620 <__sfvwrite_r>
  40420c:	2300      	movs	r3, #0
  40420e:	f8cb 3008 	str.w	r3, [fp, #8]
  404212:	f8cb 3004 	str.w	r3, [fp, #4]
  404216:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40421a:	bf00      	nop

0040421c <_vfiprintf_r>:
  40421c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404220:	b0ad      	sub	sp, #180	; 0xb4
  404222:	461d      	mov	r5, r3
  404224:	468b      	mov	fp, r1
  404226:	4690      	mov	r8, r2
  404228:	9307      	str	r3, [sp, #28]
  40422a:	9006      	str	r0, [sp, #24]
  40422c:	b118      	cbz	r0, 404236 <_vfiprintf_r+0x1a>
  40422e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404230:	2b00      	cmp	r3, #0
  404232:	f000 80f3 	beq.w	40441c <_vfiprintf_r+0x200>
  404236:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40423a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40423e:	07df      	lsls	r7, r3, #31
  404240:	b281      	uxth	r1, r0
  404242:	d402      	bmi.n	40424a <_vfiprintf_r+0x2e>
  404244:	058e      	lsls	r6, r1, #22
  404246:	f140 80fc 	bpl.w	404442 <_vfiprintf_r+0x226>
  40424a:	048c      	lsls	r4, r1, #18
  40424c:	d40a      	bmi.n	404264 <_vfiprintf_r+0x48>
  40424e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404252:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  404256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40425a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40425e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  404262:	b289      	uxth	r1, r1
  404264:	0708      	lsls	r0, r1, #28
  404266:	f140 80b3 	bpl.w	4043d0 <_vfiprintf_r+0x1b4>
  40426a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40426e:	2b00      	cmp	r3, #0
  404270:	f000 80ae 	beq.w	4043d0 <_vfiprintf_r+0x1b4>
  404274:	f001 031a 	and.w	r3, r1, #26
  404278:	2b0a      	cmp	r3, #10
  40427a:	f000 80b5 	beq.w	4043e8 <_vfiprintf_r+0x1cc>
  40427e:	2300      	movs	r3, #0
  404280:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404284:	930b      	str	r3, [sp, #44]	; 0x2c
  404286:	9311      	str	r3, [sp, #68]	; 0x44
  404288:	9310      	str	r3, [sp, #64]	; 0x40
  40428a:	9303      	str	r3, [sp, #12]
  40428c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404290:	46ca      	mov	sl, r9
  404292:	f8cd b010 	str.w	fp, [sp, #16]
  404296:	f898 3000 	ldrb.w	r3, [r8]
  40429a:	4644      	mov	r4, r8
  40429c:	b1fb      	cbz	r3, 4042de <_vfiprintf_r+0xc2>
  40429e:	2b25      	cmp	r3, #37	; 0x25
  4042a0:	d102      	bne.n	4042a8 <_vfiprintf_r+0x8c>
  4042a2:	e01c      	b.n	4042de <_vfiprintf_r+0xc2>
  4042a4:	2b25      	cmp	r3, #37	; 0x25
  4042a6:	d003      	beq.n	4042b0 <_vfiprintf_r+0x94>
  4042a8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4042ac:	2b00      	cmp	r3, #0
  4042ae:	d1f9      	bne.n	4042a4 <_vfiprintf_r+0x88>
  4042b0:	eba4 0508 	sub.w	r5, r4, r8
  4042b4:	b19d      	cbz	r5, 4042de <_vfiprintf_r+0xc2>
  4042b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4042b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4042ba:	f8ca 8000 	str.w	r8, [sl]
  4042be:	3301      	adds	r3, #1
  4042c0:	442a      	add	r2, r5
  4042c2:	2b07      	cmp	r3, #7
  4042c4:	f8ca 5004 	str.w	r5, [sl, #4]
  4042c8:	9211      	str	r2, [sp, #68]	; 0x44
  4042ca:	9310      	str	r3, [sp, #64]	; 0x40
  4042cc:	dd7a      	ble.n	4043c4 <_vfiprintf_r+0x1a8>
  4042ce:	2a00      	cmp	r2, #0
  4042d0:	f040 84b0 	bne.w	404c34 <_vfiprintf_r+0xa18>
  4042d4:	9b03      	ldr	r3, [sp, #12]
  4042d6:	9210      	str	r2, [sp, #64]	; 0x40
  4042d8:	442b      	add	r3, r5
  4042da:	46ca      	mov	sl, r9
  4042dc:	9303      	str	r3, [sp, #12]
  4042de:	7823      	ldrb	r3, [r4, #0]
  4042e0:	2b00      	cmp	r3, #0
  4042e2:	f000 83e0 	beq.w	404aa6 <_vfiprintf_r+0x88a>
  4042e6:	2000      	movs	r0, #0
  4042e8:	f04f 0300 	mov.w	r3, #0
  4042ec:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4042f0:	f104 0801 	add.w	r8, r4, #1
  4042f4:	7862      	ldrb	r2, [r4, #1]
  4042f6:	4605      	mov	r5, r0
  4042f8:	4606      	mov	r6, r0
  4042fa:	4603      	mov	r3, r0
  4042fc:	f04f 34ff 	mov.w	r4, #4294967295
  404300:	f108 0801 	add.w	r8, r8, #1
  404304:	f1a2 0120 	sub.w	r1, r2, #32
  404308:	2958      	cmp	r1, #88	; 0x58
  40430a:	f200 82de 	bhi.w	4048ca <_vfiprintf_r+0x6ae>
  40430e:	e8df f011 	tbh	[pc, r1, lsl #1]
  404312:	0221      	.short	0x0221
  404314:	02dc02dc 	.word	0x02dc02dc
  404318:	02dc0229 	.word	0x02dc0229
  40431c:	02dc02dc 	.word	0x02dc02dc
  404320:	02dc02dc 	.word	0x02dc02dc
  404324:	028902dc 	.word	0x028902dc
  404328:	02dc0295 	.word	0x02dc0295
  40432c:	02bd00a2 	.word	0x02bd00a2
  404330:	019f02dc 	.word	0x019f02dc
  404334:	01a401a4 	.word	0x01a401a4
  404338:	01a401a4 	.word	0x01a401a4
  40433c:	01a401a4 	.word	0x01a401a4
  404340:	01a401a4 	.word	0x01a401a4
  404344:	02dc01a4 	.word	0x02dc01a4
  404348:	02dc02dc 	.word	0x02dc02dc
  40434c:	02dc02dc 	.word	0x02dc02dc
  404350:	02dc02dc 	.word	0x02dc02dc
  404354:	02dc02dc 	.word	0x02dc02dc
  404358:	01b202dc 	.word	0x01b202dc
  40435c:	02dc02dc 	.word	0x02dc02dc
  404360:	02dc02dc 	.word	0x02dc02dc
  404364:	02dc02dc 	.word	0x02dc02dc
  404368:	02dc02dc 	.word	0x02dc02dc
  40436c:	02dc02dc 	.word	0x02dc02dc
  404370:	02dc0197 	.word	0x02dc0197
  404374:	02dc02dc 	.word	0x02dc02dc
  404378:	02dc02dc 	.word	0x02dc02dc
  40437c:	02dc019b 	.word	0x02dc019b
  404380:	025302dc 	.word	0x025302dc
  404384:	02dc02dc 	.word	0x02dc02dc
  404388:	02dc02dc 	.word	0x02dc02dc
  40438c:	02dc02dc 	.word	0x02dc02dc
  404390:	02dc02dc 	.word	0x02dc02dc
  404394:	02dc02dc 	.word	0x02dc02dc
  404398:	021b025a 	.word	0x021b025a
  40439c:	02dc02dc 	.word	0x02dc02dc
  4043a0:	026e02dc 	.word	0x026e02dc
  4043a4:	02dc021b 	.word	0x02dc021b
  4043a8:	027302dc 	.word	0x027302dc
  4043ac:	01f502dc 	.word	0x01f502dc
  4043b0:	02090182 	.word	0x02090182
  4043b4:	02dc02d7 	.word	0x02dc02d7
  4043b8:	02dc029a 	.word	0x02dc029a
  4043bc:	02dc00a7 	.word	0x02dc00a7
  4043c0:	022e02dc 	.word	0x022e02dc
  4043c4:	f10a 0a08 	add.w	sl, sl, #8
  4043c8:	9b03      	ldr	r3, [sp, #12]
  4043ca:	442b      	add	r3, r5
  4043cc:	9303      	str	r3, [sp, #12]
  4043ce:	e786      	b.n	4042de <_vfiprintf_r+0xc2>
  4043d0:	4659      	mov	r1, fp
  4043d2:	9806      	ldr	r0, [sp, #24]
  4043d4:	f000 fdac 	bl	404f30 <__swsetup_r>
  4043d8:	bb18      	cbnz	r0, 404422 <_vfiprintf_r+0x206>
  4043da:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4043de:	f001 031a 	and.w	r3, r1, #26
  4043e2:	2b0a      	cmp	r3, #10
  4043e4:	f47f af4b 	bne.w	40427e <_vfiprintf_r+0x62>
  4043e8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4043ec:	2b00      	cmp	r3, #0
  4043ee:	f6ff af46 	blt.w	40427e <_vfiprintf_r+0x62>
  4043f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4043f6:	07db      	lsls	r3, r3, #31
  4043f8:	d405      	bmi.n	404406 <_vfiprintf_r+0x1ea>
  4043fa:	058f      	lsls	r7, r1, #22
  4043fc:	d403      	bmi.n	404406 <_vfiprintf_r+0x1ea>
  4043fe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404402:	f001 fac3 	bl	40598c <__retarget_lock_release_recursive>
  404406:	462b      	mov	r3, r5
  404408:	4642      	mov	r2, r8
  40440a:	4659      	mov	r1, fp
  40440c:	9806      	ldr	r0, [sp, #24]
  40440e:	f000 fd4d 	bl	404eac <__sbprintf>
  404412:	9003      	str	r0, [sp, #12]
  404414:	9803      	ldr	r0, [sp, #12]
  404416:	b02d      	add	sp, #180	; 0xb4
  404418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40441c:	f000 fef4 	bl	405208 <__sinit>
  404420:	e709      	b.n	404236 <_vfiprintf_r+0x1a>
  404422:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404426:	07d9      	lsls	r1, r3, #31
  404428:	d404      	bmi.n	404434 <_vfiprintf_r+0x218>
  40442a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40442e:	059a      	lsls	r2, r3, #22
  404430:	f140 84aa 	bpl.w	404d88 <_vfiprintf_r+0xb6c>
  404434:	f04f 33ff 	mov.w	r3, #4294967295
  404438:	9303      	str	r3, [sp, #12]
  40443a:	9803      	ldr	r0, [sp, #12]
  40443c:	b02d      	add	sp, #180	; 0xb4
  40443e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404442:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404446:	f001 fa9f 	bl	405988 <__retarget_lock_acquire_recursive>
  40444a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40444e:	b281      	uxth	r1, r0
  404450:	e6fb      	b.n	40424a <_vfiprintf_r+0x2e>
  404452:	4276      	negs	r6, r6
  404454:	9207      	str	r2, [sp, #28]
  404456:	f043 0304 	orr.w	r3, r3, #4
  40445a:	f898 2000 	ldrb.w	r2, [r8]
  40445e:	e74f      	b.n	404300 <_vfiprintf_r+0xe4>
  404460:	9608      	str	r6, [sp, #32]
  404462:	069e      	lsls	r6, r3, #26
  404464:	f100 8450 	bmi.w	404d08 <_vfiprintf_r+0xaec>
  404468:	9907      	ldr	r1, [sp, #28]
  40446a:	06dd      	lsls	r5, r3, #27
  40446c:	460a      	mov	r2, r1
  40446e:	f100 83ef 	bmi.w	404c50 <_vfiprintf_r+0xa34>
  404472:	0658      	lsls	r0, r3, #25
  404474:	f140 83ec 	bpl.w	404c50 <_vfiprintf_r+0xa34>
  404478:	880e      	ldrh	r6, [r1, #0]
  40447a:	3104      	adds	r1, #4
  40447c:	2700      	movs	r7, #0
  40447e:	2201      	movs	r2, #1
  404480:	9107      	str	r1, [sp, #28]
  404482:	f04f 0100 	mov.w	r1, #0
  404486:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40448a:	2500      	movs	r5, #0
  40448c:	1c61      	adds	r1, r4, #1
  40448e:	f000 8116 	beq.w	4046be <_vfiprintf_r+0x4a2>
  404492:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404496:	9102      	str	r1, [sp, #8]
  404498:	ea56 0107 	orrs.w	r1, r6, r7
  40449c:	f040 8114 	bne.w	4046c8 <_vfiprintf_r+0x4ac>
  4044a0:	2c00      	cmp	r4, #0
  4044a2:	f040 835c 	bne.w	404b5e <_vfiprintf_r+0x942>
  4044a6:	2a00      	cmp	r2, #0
  4044a8:	f040 83b7 	bne.w	404c1a <_vfiprintf_r+0x9fe>
  4044ac:	f013 0301 	ands.w	r3, r3, #1
  4044b0:	9305      	str	r3, [sp, #20]
  4044b2:	f000 8457 	beq.w	404d64 <_vfiprintf_r+0xb48>
  4044b6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4044ba:	2330      	movs	r3, #48	; 0x30
  4044bc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4044c0:	9b05      	ldr	r3, [sp, #20]
  4044c2:	42a3      	cmp	r3, r4
  4044c4:	bfb8      	it	lt
  4044c6:	4623      	movlt	r3, r4
  4044c8:	9301      	str	r3, [sp, #4]
  4044ca:	b10d      	cbz	r5, 4044d0 <_vfiprintf_r+0x2b4>
  4044cc:	3301      	adds	r3, #1
  4044ce:	9301      	str	r3, [sp, #4]
  4044d0:	9b02      	ldr	r3, [sp, #8]
  4044d2:	f013 0302 	ands.w	r3, r3, #2
  4044d6:	9309      	str	r3, [sp, #36]	; 0x24
  4044d8:	d002      	beq.n	4044e0 <_vfiprintf_r+0x2c4>
  4044da:	9b01      	ldr	r3, [sp, #4]
  4044dc:	3302      	adds	r3, #2
  4044de:	9301      	str	r3, [sp, #4]
  4044e0:	9b02      	ldr	r3, [sp, #8]
  4044e2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4044e6:	930a      	str	r3, [sp, #40]	; 0x28
  4044e8:	f040 8217 	bne.w	40491a <_vfiprintf_r+0x6fe>
  4044ec:	9b08      	ldr	r3, [sp, #32]
  4044ee:	9a01      	ldr	r2, [sp, #4]
  4044f0:	1a9d      	subs	r5, r3, r2
  4044f2:	2d00      	cmp	r5, #0
  4044f4:	f340 8211 	ble.w	40491a <_vfiprintf_r+0x6fe>
  4044f8:	2d10      	cmp	r5, #16
  4044fa:	f340 8490 	ble.w	404e1e <_vfiprintf_r+0xc02>
  4044fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404500:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404502:	4ec4      	ldr	r6, [pc, #784]	; (404814 <_vfiprintf_r+0x5f8>)
  404504:	46d6      	mov	lr, sl
  404506:	2710      	movs	r7, #16
  404508:	46a2      	mov	sl, r4
  40450a:	4619      	mov	r1, r3
  40450c:	9c06      	ldr	r4, [sp, #24]
  40450e:	e007      	b.n	404520 <_vfiprintf_r+0x304>
  404510:	f101 0c02 	add.w	ip, r1, #2
  404514:	f10e 0e08 	add.w	lr, lr, #8
  404518:	4601      	mov	r1, r0
  40451a:	3d10      	subs	r5, #16
  40451c:	2d10      	cmp	r5, #16
  40451e:	dd11      	ble.n	404544 <_vfiprintf_r+0x328>
  404520:	1c48      	adds	r0, r1, #1
  404522:	3210      	adds	r2, #16
  404524:	2807      	cmp	r0, #7
  404526:	9211      	str	r2, [sp, #68]	; 0x44
  404528:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40452c:	9010      	str	r0, [sp, #64]	; 0x40
  40452e:	ddef      	ble.n	404510 <_vfiprintf_r+0x2f4>
  404530:	2a00      	cmp	r2, #0
  404532:	f040 81e4 	bne.w	4048fe <_vfiprintf_r+0x6e2>
  404536:	3d10      	subs	r5, #16
  404538:	2d10      	cmp	r5, #16
  40453a:	4611      	mov	r1, r2
  40453c:	f04f 0c01 	mov.w	ip, #1
  404540:	46ce      	mov	lr, r9
  404542:	dced      	bgt.n	404520 <_vfiprintf_r+0x304>
  404544:	4654      	mov	r4, sl
  404546:	4661      	mov	r1, ip
  404548:	46f2      	mov	sl, lr
  40454a:	442a      	add	r2, r5
  40454c:	2907      	cmp	r1, #7
  40454e:	9211      	str	r2, [sp, #68]	; 0x44
  404550:	f8ca 6000 	str.w	r6, [sl]
  404554:	f8ca 5004 	str.w	r5, [sl, #4]
  404558:	9110      	str	r1, [sp, #64]	; 0x40
  40455a:	f300 82ec 	bgt.w	404b36 <_vfiprintf_r+0x91a>
  40455e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404562:	f10a 0a08 	add.w	sl, sl, #8
  404566:	1c48      	adds	r0, r1, #1
  404568:	2d00      	cmp	r5, #0
  40456a:	f040 81de 	bne.w	40492a <_vfiprintf_r+0x70e>
  40456e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404570:	2b00      	cmp	r3, #0
  404572:	f000 81f8 	beq.w	404966 <_vfiprintf_r+0x74a>
  404576:	3202      	adds	r2, #2
  404578:	a90e      	add	r1, sp, #56	; 0x38
  40457a:	2302      	movs	r3, #2
  40457c:	2807      	cmp	r0, #7
  40457e:	9211      	str	r2, [sp, #68]	; 0x44
  404580:	9010      	str	r0, [sp, #64]	; 0x40
  404582:	e88a 000a 	stmia.w	sl, {r1, r3}
  404586:	f340 81ea 	ble.w	40495e <_vfiprintf_r+0x742>
  40458a:	2a00      	cmp	r2, #0
  40458c:	f040 838c 	bne.w	404ca8 <_vfiprintf_r+0xa8c>
  404590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404592:	2b80      	cmp	r3, #128	; 0x80
  404594:	f04f 0001 	mov.w	r0, #1
  404598:	4611      	mov	r1, r2
  40459a:	46ca      	mov	sl, r9
  40459c:	f040 81e7 	bne.w	40496e <_vfiprintf_r+0x752>
  4045a0:	9b08      	ldr	r3, [sp, #32]
  4045a2:	9d01      	ldr	r5, [sp, #4]
  4045a4:	1b5e      	subs	r6, r3, r5
  4045a6:	2e00      	cmp	r6, #0
  4045a8:	f340 81e1 	ble.w	40496e <_vfiprintf_r+0x752>
  4045ac:	2e10      	cmp	r6, #16
  4045ae:	4d9a      	ldr	r5, [pc, #616]	; (404818 <_vfiprintf_r+0x5fc>)
  4045b0:	f340 8450 	ble.w	404e54 <_vfiprintf_r+0xc38>
  4045b4:	46d4      	mov	ip, sl
  4045b6:	2710      	movs	r7, #16
  4045b8:	46a2      	mov	sl, r4
  4045ba:	9c06      	ldr	r4, [sp, #24]
  4045bc:	e007      	b.n	4045ce <_vfiprintf_r+0x3b2>
  4045be:	f101 0e02 	add.w	lr, r1, #2
  4045c2:	f10c 0c08 	add.w	ip, ip, #8
  4045c6:	4601      	mov	r1, r0
  4045c8:	3e10      	subs	r6, #16
  4045ca:	2e10      	cmp	r6, #16
  4045cc:	dd11      	ble.n	4045f2 <_vfiprintf_r+0x3d6>
  4045ce:	1c48      	adds	r0, r1, #1
  4045d0:	3210      	adds	r2, #16
  4045d2:	2807      	cmp	r0, #7
  4045d4:	9211      	str	r2, [sp, #68]	; 0x44
  4045d6:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4045da:	9010      	str	r0, [sp, #64]	; 0x40
  4045dc:	ddef      	ble.n	4045be <_vfiprintf_r+0x3a2>
  4045de:	2a00      	cmp	r2, #0
  4045e0:	f040 829d 	bne.w	404b1e <_vfiprintf_r+0x902>
  4045e4:	3e10      	subs	r6, #16
  4045e6:	2e10      	cmp	r6, #16
  4045e8:	f04f 0e01 	mov.w	lr, #1
  4045ec:	4611      	mov	r1, r2
  4045ee:	46cc      	mov	ip, r9
  4045f0:	dced      	bgt.n	4045ce <_vfiprintf_r+0x3b2>
  4045f2:	4654      	mov	r4, sl
  4045f4:	46e2      	mov	sl, ip
  4045f6:	4432      	add	r2, r6
  4045f8:	f1be 0f07 	cmp.w	lr, #7
  4045fc:	9211      	str	r2, [sp, #68]	; 0x44
  4045fe:	e88a 0060 	stmia.w	sl, {r5, r6}
  404602:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404606:	f300 8369 	bgt.w	404cdc <_vfiprintf_r+0xac0>
  40460a:	f10a 0a08 	add.w	sl, sl, #8
  40460e:	f10e 0001 	add.w	r0, lr, #1
  404612:	4671      	mov	r1, lr
  404614:	e1ab      	b.n	40496e <_vfiprintf_r+0x752>
  404616:	9608      	str	r6, [sp, #32]
  404618:	f013 0220 	ands.w	r2, r3, #32
  40461c:	f040 838c 	bne.w	404d38 <_vfiprintf_r+0xb1c>
  404620:	f013 0110 	ands.w	r1, r3, #16
  404624:	f040 831a 	bne.w	404c5c <_vfiprintf_r+0xa40>
  404628:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40462c:	f000 8316 	beq.w	404c5c <_vfiprintf_r+0xa40>
  404630:	9807      	ldr	r0, [sp, #28]
  404632:	460a      	mov	r2, r1
  404634:	4601      	mov	r1, r0
  404636:	3104      	adds	r1, #4
  404638:	8806      	ldrh	r6, [r0, #0]
  40463a:	9107      	str	r1, [sp, #28]
  40463c:	2700      	movs	r7, #0
  40463e:	e720      	b.n	404482 <_vfiprintf_r+0x266>
  404640:	9608      	str	r6, [sp, #32]
  404642:	f043 0310 	orr.w	r3, r3, #16
  404646:	e7e7      	b.n	404618 <_vfiprintf_r+0x3fc>
  404648:	9608      	str	r6, [sp, #32]
  40464a:	f043 0310 	orr.w	r3, r3, #16
  40464e:	e708      	b.n	404462 <_vfiprintf_r+0x246>
  404650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404654:	f898 2000 	ldrb.w	r2, [r8]
  404658:	e652      	b.n	404300 <_vfiprintf_r+0xe4>
  40465a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40465e:	2600      	movs	r6, #0
  404660:	f818 2b01 	ldrb.w	r2, [r8], #1
  404664:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404668:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40466c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404670:	2909      	cmp	r1, #9
  404672:	d9f5      	bls.n	404660 <_vfiprintf_r+0x444>
  404674:	e646      	b.n	404304 <_vfiprintf_r+0xe8>
  404676:	9608      	str	r6, [sp, #32]
  404678:	2800      	cmp	r0, #0
  40467a:	f040 8408 	bne.w	404e8e <_vfiprintf_r+0xc72>
  40467e:	f043 0310 	orr.w	r3, r3, #16
  404682:	069e      	lsls	r6, r3, #26
  404684:	f100 834c 	bmi.w	404d20 <_vfiprintf_r+0xb04>
  404688:	06dd      	lsls	r5, r3, #27
  40468a:	f100 82f3 	bmi.w	404c74 <_vfiprintf_r+0xa58>
  40468e:	0658      	lsls	r0, r3, #25
  404690:	f140 82f0 	bpl.w	404c74 <_vfiprintf_r+0xa58>
  404694:	9d07      	ldr	r5, [sp, #28]
  404696:	f9b5 6000 	ldrsh.w	r6, [r5]
  40469a:	462a      	mov	r2, r5
  40469c:	17f7      	asrs	r7, r6, #31
  40469e:	3204      	adds	r2, #4
  4046a0:	4630      	mov	r0, r6
  4046a2:	4639      	mov	r1, r7
  4046a4:	9207      	str	r2, [sp, #28]
  4046a6:	2800      	cmp	r0, #0
  4046a8:	f171 0200 	sbcs.w	r2, r1, #0
  4046ac:	f2c0 835d 	blt.w	404d6a <_vfiprintf_r+0xb4e>
  4046b0:	1c61      	adds	r1, r4, #1
  4046b2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4046b6:	f04f 0201 	mov.w	r2, #1
  4046ba:	f47f aeea 	bne.w	404492 <_vfiprintf_r+0x276>
  4046be:	ea56 0107 	orrs.w	r1, r6, r7
  4046c2:	f000 824d 	beq.w	404b60 <_vfiprintf_r+0x944>
  4046c6:	9302      	str	r3, [sp, #8]
  4046c8:	2a01      	cmp	r2, #1
  4046ca:	f000 828c 	beq.w	404be6 <_vfiprintf_r+0x9ca>
  4046ce:	2a02      	cmp	r2, #2
  4046d0:	f040 825c 	bne.w	404b8c <_vfiprintf_r+0x970>
  4046d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4046d6:	46cb      	mov	fp, r9
  4046d8:	0933      	lsrs	r3, r6, #4
  4046da:	f006 010f 	and.w	r1, r6, #15
  4046de:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4046e2:	093a      	lsrs	r2, r7, #4
  4046e4:	461e      	mov	r6, r3
  4046e6:	4617      	mov	r7, r2
  4046e8:	5c43      	ldrb	r3, [r0, r1]
  4046ea:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4046ee:	ea56 0307 	orrs.w	r3, r6, r7
  4046f2:	d1f1      	bne.n	4046d8 <_vfiprintf_r+0x4bc>
  4046f4:	eba9 030b 	sub.w	r3, r9, fp
  4046f8:	9305      	str	r3, [sp, #20]
  4046fa:	e6e1      	b.n	4044c0 <_vfiprintf_r+0x2a4>
  4046fc:	2800      	cmp	r0, #0
  4046fe:	f040 83c0 	bne.w	404e82 <_vfiprintf_r+0xc66>
  404702:	0699      	lsls	r1, r3, #26
  404704:	f100 8367 	bmi.w	404dd6 <_vfiprintf_r+0xbba>
  404708:	06da      	lsls	r2, r3, #27
  40470a:	f100 80f1 	bmi.w	4048f0 <_vfiprintf_r+0x6d4>
  40470e:	065b      	lsls	r3, r3, #25
  404710:	f140 80ee 	bpl.w	4048f0 <_vfiprintf_r+0x6d4>
  404714:	9a07      	ldr	r2, [sp, #28]
  404716:	6813      	ldr	r3, [r2, #0]
  404718:	3204      	adds	r2, #4
  40471a:	9207      	str	r2, [sp, #28]
  40471c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  404720:	801a      	strh	r2, [r3, #0]
  404722:	e5b8      	b.n	404296 <_vfiprintf_r+0x7a>
  404724:	9807      	ldr	r0, [sp, #28]
  404726:	4a3d      	ldr	r2, [pc, #244]	; (40481c <_vfiprintf_r+0x600>)
  404728:	9608      	str	r6, [sp, #32]
  40472a:	920b      	str	r2, [sp, #44]	; 0x2c
  40472c:	6806      	ldr	r6, [r0, #0]
  40472e:	2278      	movs	r2, #120	; 0x78
  404730:	2130      	movs	r1, #48	; 0x30
  404732:	3004      	adds	r0, #4
  404734:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404738:	f043 0302 	orr.w	r3, r3, #2
  40473c:	9007      	str	r0, [sp, #28]
  40473e:	2700      	movs	r7, #0
  404740:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404744:	2202      	movs	r2, #2
  404746:	e69c      	b.n	404482 <_vfiprintf_r+0x266>
  404748:	9608      	str	r6, [sp, #32]
  40474a:	2800      	cmp	r0, #0
  40474c:	d099      	beq.n	404682 <_vfiprintf_r+0x466>
  40474e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404752:	e796      	b.n	404682 <_vfiprintf_r+0x466>
  404754:	f898 2000 	ldrb.w	r2, [r8]
  404758:	2d00      	cmp	r5, #0
  40475a:	f47f add1 	bne.w	404300 <_vfiprintf_r+0xe4>
  40475e:	2001      	movs	r0, #1
  404760:	2520      	movs	r5, #32
  404762:	e5cd      	b.n	404300 <_vfiprintf_r+0xe4>
  404764:	f043 0301 	orr.w	r3, r3, #1
  404768:	f898 2000 	ldrb.w	r2, [r8]
  40476c:	e5c8      	b.n	404300 <_vfiprintf_r+0xe4>
  40476e:	9608      	str	r6, [sp, #32]
  404770:	2800      	cmp	r0, #0
  404772:	f040 8393 	bne.w	404e9c <_vfiprintf_r+0xc80>
  404776:	4929      	ldr	r1, [pc, #164]	; (40481c <_vfiprintf_r+0x600>)
  404778:	910b      	str	r1, [sp, #44]	; 0x2c
  40477a:	069f      	lsls	r7, r3, #26
  40477c:	f100 82e8 	bmi.w	404d50 <_vfiprintf_r+0xb34>
  404780:	9807      	ldr	r0, [sp, #28]
  404782:	06de      	lsls	r6, r3, #27
  404784:	4601      	mov	r1, r0
  404786:	f100 8270 	bmi.w	404c6a <_vfiprintf_r+0xa4e>
  40478a:	065d      	lsls	r5, r3, #25
  40478c:	f140 826d 	bpl.w	404c6a <_vfiprintf_r+0xa4e>
  404790:	3104      	adds	r1, #4
  404792:	8806      	ldrh	r6, [r0, #0]
  404794:	9107      	str	r1, [sp, #28]
  404796:	2700      	movs	r7, #0
  404798:	07d8      	lsls	r0, r3, #31
  40479a:	f140 8222 	bpl.w	404be2 <_vfiprintf_r+0x9c6>
  40479e:	ea56 0107 	orrs.w	r1, r6, r7
  4047a2:	f000 821e 	beq.w	404be2 <_vfiprintf_r+0x9c6>
  4047a6:	2130      	movs	r1, #48	; 0x30
  4047a8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4047ac:	f043 0302 	orr.w	r3, r3, #2
  4047b0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4047b4:	2202      	movs	r2, #2
  4047b6:	e664      	b.n	404482 <_vfiprintf_r+0x266>
  4047b8:	9608      	str	r6, [sp, #32]
  4047ba:	2800      	cmp	r0, #0
  4047bc:	f040 836b 	bne.w	404e96 <_vfiprintf_r+0xc7a>
  4047c0:	4917      	ldr	r1, [pc, #92]	; (404820 <_vfiprintf_r+0x604>)
  4047c2:	910b      	str	r1, [sp, #44]	; 0x2c
  4047c4:	e7d9      	b.n	40477a <_vfiprintf_r+0x55e>
  4047c6:	9907      	ldr	r1, [sp, #28]
  4047c8:	9608      	str	r6, [sp, #32]
  4047ca:	680a      	ldr	r2, [r1, #0]
  4047cc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4047d0:	f04f 0000 	mov.w	r0, #0
  4047d4:	460a      	mov	r2, r1
  4047d6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4047da:	3204      	adds	r2, #4
  4047dc:	2001      	movs	r0, #1
  4047de:	9001      	str	r0, [sp, #4]
  4047e0:	9207      	str	r2, [sp, #28]
  4047e2:	9005      	str	r0, [sp, #20]
  4047e4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4047e8:	9302      	str	r3, [sp, #8]
  4047ea:	2400      	movs	r4, #0
  4047ec:	e670      	b.n	4044d0 <_vfiprintf_r+0x2b4>
  4047ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4047f2:	f898 2000 	ldrb.w	r2, [r8]
  4047f6:	e583      	b.n	404300 <_vfiprintf_r+0xe4>
  4047f8:	f898 2000 	ldrb.w	r2, [r8]
  4047fc:	2a6c      	cmp	r2, #108	; 0x6c
  4047fe:	bf03      	ittte	eq
  404800:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404804:	f043 0320 	orreq.w	r3, r3, #32
  404808:	f108 0801 	addeq.w	r8, r8, #1
  40480c:	f043 0310 	orrne.w	r3, r3, #16
  404810:	e576      	b.n	404300 <_vfiprintf_r+0xe4>
  404812:	bf00      	nop
  404814:	00406828 	.word	0x00406828
  404818:	00406838 	.word	0x00406838
  40481c:	0040680c 	.word	0x0040680c
  404820:	004067f8 	.word	0x004067f8
  404824:	9907      	ldr	r1, [sp, #28]
  404826:	680e      	ldr	r6, [r1, #0]
  404828:	460a      	mov	r2, r1
  40482a:	2e00      	cmp	r6, #0
  40482c:	f102 0204 	add.w	r2, r2, #4
  404830:	f6ff ae0f 	blt.w	404452 <_vfiprintf_r+0x236>
  404834:	9207      	str	r2, [sp, #28]
  404836:	f898 2000 	ldrb.w	r2, [r8]
  40483a:	e561      	b.n	404300 <_vfiprintf_r+0xe4>
  40483c:	f898 2000 	ldrb.w	r2, [r8]
  404840:	2001      	movs	r0, #1
  404842:	252b      	movs	r5, #43	; 0x2b
  404844:	e55c      	b.n	404300 <_vfiprintf_r+0xe4>
  404846:	9907      	ldr	r1, [sp, #28]
  404848:	9608      	str	r6, [sp, #32]
  40484a:	f8d1 b000 	ldr.w	fp, [r1]
  40484e:	f04f 0200 	mov.w	r2, #0
  404852:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404856:	1d0e      	adds	r6, r1, #4
  404858:	f1bb 0f00 	cmp.w	fp, #0
  40485c:	f000 82e5 	beq.w	404e2a <_vfiprintf_r+0xc0e>
  404860:	1c67      	adds	r7, r4, #1
  404862:	f000 82c4 	beq.w	404dee <_vfiprintf_r+0xbd2>
  404866:	4622      	mov	r2, r4
  404868:	2100      	movs	r1, #0
  40486a:	4658      	mov	r0, fp
  40486c:	9301      	str	r3, [sp, #4]
  40486e:	f001 f91f 	bl	405ab0 <memchr>
  404872:	9b01      	ldr	r3, [sp, #4]
  404874:	2800      	cmp	r0, #0
  404876:	f000 82e5 	beq.w	404e44 <_vfiprintf_r+0xc28>
  40487a:	eba0 020b 	sub.w	r2, r0, fp
  40487e:	9205      	str	r2, [sp, #20]
  404880:	9607      	str	r6, [sp, #28]
  404882:	9302      	str	r3, [sp, #8]
  404884:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404888:	2400      	movs	r4, #0
  40488a:	e619      	b.n	4044c0 <_vfiprintf_r+0x2a4>
  40488c:	f898 2000 	ldrb.w	r2, [r8]
  404890:	2a2a      	cmp	r2, #42	; 0x2a
  404892:	f108 0701 	add.w	r7, r8, #1
  404896:	f000 82e9 	beq.w	404e6c <_vfiprintf_r+0xc50>
  40489a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40489e:	2909      	cmp	r1, #9
  4048a0:	46b8      	mov	r8, r7
  4048a2:	f04f 0400 	mov.w	r4, #0
  4048a6:	f63f ad2d 	bhi.w	404304 <_vfiprintf_r+0xe8>
  4048aa:	f818 2b01 	ldrb.w	r2, [r8], #1
  4048ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4048b2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4048b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4048ba:	2909      	cmp	r1, #9
  4048bc:	d9f5      	bls.n	4048aa <_vfiprintf_r+0x68e>
  4048be:	e521      	b.n	404304 <_vfiprintf_r+0xe8>
  4048c0:	f043 0320 	orr.w	r3, r3, #32
  4048c4:	f898 2000 	ldrb.w	r2, [r8]
  4048c8:	e51a      	b.n	404300 <_vfiprintf_r+0xe4>
  4048ca:	9608      	str	r6, [sp, #32]
  4048cc:	2800      	cmp	r0, #0
  4048ce:	f040 82db 	bne.w	404e88 <_vfiprintf_r+0xc6c>
  4048d2:	2a00      	cmp	r2, #0
  4048d4:	f000 80e7 	beq.w	404aa6 <_vfiprintf_r+0x88a>
  4048d8:	2101      	movs	r1, #1
  4048da:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4048de:	f04f 0200 	mov.w	r2, #0
  4048e2:	9101      	str	r1, [sp, #4]
  4048e4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4048e8:	9105      	str	r1, [sp, #20]
  4048ea:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4048ee:	e77b      	b.n	4047e8 <_vfiprintf_r+0x5cc>
  4048f0:	9a07      	ldr	r2, [sp, #28]
  4048f2:	6813      	ldr	r3, [r2, #0]
  4048f4:	3204      	adds	r2, #4
  4048f6:	9207      	str	r2, [sp, #28]
  4048f8:	9a03      	ldr	r2, [sp, #12]
  4048fa:	601a      	str	r2, [r3, #0]
  4048fc:	e4cb      	b.n	404296 <_vfiprintf_r+0x7a>
  4048fe:	aa0f      	add	r2, sp, #60	; 0x3c
  404900:	9904      	ldr	r1, [sp, #16]
  404902:	4620      	mov	r0, r4
  404904:	f7ff fc4a 	bl	40419c <__sprint_r.part.0>
  404908:	2800      	cmp	r0, #0
  40490a:	f040 8139 	bne.w	404b80 <_vfiprintf_r+0x964>
  40490e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404910:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404912:	f101 0c01 	add.w	ip, r1, #1
  404916:	46ce      	mov	lr, r9
  404918:	e5ff      	b.n	40451a <_vfiprintf_r+0x2fe>
  40491a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40491c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40491e:	1c48      	adds	r0, r1, #1
  404920:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404924:	2d00      	cmp	r5, #0
  404926:	f43f ae22 	beq.w	40456e <_vfiprintf_r+0x352>
  40492a:	3201      	adds	r2, #1
  40492c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  404930:	2101      	movs	r1, #1
  404932:	2807      	cmp	r0, #7
  404934:	9211      	str	r2, [sp, #68]	; 0x44
  404936:	9010      	str	r0, [sp, #64]	; 0x40
  404938:	f8ca 5000 	str.w	r5, [sl]
  40493c:	f8ca 1004 	str.w	r1, [sl, #4]
  404940:	f340 8108 	ble.w	404b54 <_vfiprintf_r+0x938>
  404944:	2a00      	cmp	r2, #0
  404946:	f040 81bc 	bne.w	404cc2 <_vfiprintf_r+0xaa6>
  40494a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40494c:	2b00      	cmp	r3, #0
  40494e:	f43f ae1f 	beq.w	404590 <_vfiprintf_r+0x374>
  404952:	ab0e      	add	r3, sp, #56	; 0x38
  404954:	2202      	movs	r2, #2
  404956:	4608      	mov	r0, r1
  404958:	931c      	str	r3, [sp, #112]	; 0x70
  40495a:	921d      	str	r2, [sp, #116]	; 0x74
  40495c:	46ca      	mov	sl, r9
  40495e:	4601      	mov	r1, r0
  404960:	f10a 0a08 	add.w	sl, sl, #8
  404964:	3001      	adds	r0, #1
  404966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404968:	2b80      	cmp	r3, #128	; 0x80
  40496a:	f43f ae19 	beq.w	4045a0 <_vfiprintf_r+0x384>
  40496e:	9b05      	ldr	r3, [sp, #20]
  404970:	1ae4      	subs	r4, r4, r3
  404972:	2c00      	cmp	r4, #0
  404974:	dd2e      	ble.n	4049d4 <_vfiprintf_r+0x7b8>
  404976:	2c10      	cmp	r4, #16
  404978:	4db3      	ldr	r5, [pc, #716]	; (404c48 <_vfiprintf_r+0xa2c>)
  40497a:	dd1e      	ble.n	4049ba <_vfiprintf_r+0x79e>
  40497c:	46d6      	mov	lr, sl
  40497e:	2610      	movs	r6, #16
  404980:	9f06      	ldr	r7, [sp, #24]
  404982:	f8dd a010 	ldr.w	sl, [sp, #16]
  404986:	e006      	b.n	404996 <_vfiprintf_r+0x77a>
  404988:	1c88      	adds	r0, r1, #2
  40498a:	f10e 0e08 	add.w	lr, lr, #8
  40498e:	4619      	mov	r1, r3
  404990:	3c10      	subs	r4, #16
  404992:	2c10      	cmp	r4, #16
  404994:	dd10      	ble.n	4049b8 <_vfiprintf_r+0x79c>
  404996:	1c4b      	adds	r3, r1, #1
  404998:	3210      	adds	r2, #16
  40499a:	2b07      	cmp	r3, #7
  40499c:	9211      	str	r2, [sp, #68]	; 0x44
  40499e:	e88e 0060 	stmia.w	lr, {r5, r6}
  4049a2:	9310      	str	r3, [sp, #64]	; 0x40
  4049a4:	ddf0      	ble.n	404988 <_vfiprintf_r+0x76c>
  4049a6:	2a00      	cmp	r2, #0
  4049a8:	d165      	bne.n	404a76 <_vfiprintf_r+0x85a>
  4049aa:	3c10      	subs	r4, #16
  4049ac:	2c10      	cmp	r4, #16
  4049ae:	f04f 0001 	mov.w	r0, #1
  4049b2:	4611      	mov	r1, r2
  4049b4:	46ce      	mov	lr, r9
  4049b6:	dcee      	bgt.n	404996 <_vfiprintf_r+0x77a>
  4049b8:	46f2      	mov	sl, lr
  4049ba:	4422      	add	r2, r4
  4049bc:	2807      	cmp	r0, #7
  4049be:	9211      	str	r2, [sp, #68]	; 0x44
  4049c0:	f8ca 5000 	str.w	r5, [sl]
  4049c4:	f8ca 4004 	str.w	r4, [sl, #4]
  4049c8:	9010      	str	r0, [sp, #64]	; 0x40
  4049ca:	f300 8085 	bgt.w	404ad8 <_vfiprintf_r+0x8bc>
  4049ce:	f10a 0a08 	add.w	sl, sl, #8
  4049d2:	3001      	adds	r0, #1
  4049d4:	9905      	ldr	r1, [sp, #20]
  4049d6:	f8ca b000 	str.w	fp, [sl]
  4049da:	440a      	add	r2, r1
  4049dc:	2807      	cmp	r0, #7
  4049de:	9211      	str	r2, [sp, #68]	; 0x44
  4049e0:	f8ca 1004 	str.w	r1, [sl, #4]
  4049e4:	9010      	str	r0, [sp, #64]	; 0x40
  4049e6:	f340 8082 	ble.w	404aee <_vfiprintf_r+0x8d2>
  4049ea:	2a00      	cmp	r2, #0
  4049ec:	f040 8118 	bne.w	404c20 <_vfiprintf_r+0xa04>
  4049f0:	9b02      	ldr	r3, [sp, #8]
  4049f2:	9210      	str	r2, [sp, #64]	; 0x40
  4049f4:	0758      	lsls	r0, r3, #29
  4049f6:	d535      	bpl.n	404a64 <_vfiprintf_r+0x848>
  4049f8:	9b08      	ldr	r3, [sp, #32]
  4049fa:	9901      	ldr	r1, [sp, #4]
  4049fc:	1a5c      	subs	r4, r3, r1
  4049fe:	2c00      	cmp	r4, #0
  404a00:	f340 80e7 	ble.w	404bd2 <_vfiprintf_r+0x9b6>
  404a04:	46ca      	mov	sl, r9
  404a06:	2c10      	cmp	r4, #16
  404a08:	f340 8218 	ble.w	404e3c <_vfiprintf_r+0xc20>
  404a0c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404a0e:	4e8f      	ldr	r6, [pc, #572]	; (404c4c <_vfiprintf_r+0xa30>)
  404a10:	9f06      	ldr	r7, [sp, #24]
  404a12:	f8dd b010 	ldr.w	fp, [sp, #16]
  404a16:	2510      	movs	r5, #16
  404a18:	e006      	b.n	404a28 <_vfiprintf_r+0x80c>
  404a1a:	1c88      	adds	r0, r1, #2
  404a1c:	f10a 0a08 	add.w	sl, sl, #8
  404a20:	4619      	mov	r1, r3
  404a22:	3c10      	subs	r4, #16
  404a24:	2c10      	cmp	r4, #16
  404a26:	dd11      	ble.n	404a4c <_vfiprintf_r+0x830>
  404a28:	1c4b      	adds	r3, r1, #1
  404a2a:	3210      	adds	r2, #16
  404a2c:	2b07      	cmp	r3, #7
  404a2e:	9211      	str	r2, [sp, #68]	; 0x44
  404a30:	f8ca 6000 	str.w	r6, [sl]
  404a34:	f8ca 5004 	str.w	r5, [sl, #4]
  404a38:	9310      	str	r3, [sp, #64]	; 0x40
  404a3a:	ddee      	ble.n	404a1a <_vfiprintf_r+0x7fe>
  404a3c:	bb42      	cbnz	r2, 404a90 <_vfiprintf_r+0x874>
  404a3e:	3c10      	subs	r4, #16
  404a40:	2c10      	cmp	r4, #16
  404a42:	f04f 0001 	mov.w	r0, #1
  404a46:	4611      	mov	r1, r2
  404a48:	46ca      	mov	sl, r9
  404a4a:	dced      	bgt.n	404a28 <_vfiprintf_r+0x80c>
  404a4c:	4422      	add	r2, r4
  404a4e:	2807      	cmp	r0, #7
  404a50:	9211      	str	r2, [sp, #68]	; 0x44
  404a52:	f8ca 6000 	str.w	r6, [sl]
  404a56:	f8ca 4004 	str.w	r4, [sl, #4]
  404a5a:	9010      	str	r0, [sp, #64]	; 0x40
  404a5c:	dd51      	ble.n	404b02 <_vfiprintf_r+0x8e6>
  404a5e:	2a00      	cmp	r2, #0
  404a60:	f040 819b 	bne.w	404d9a <_vfiprintf_r+0xb7e>
  404a64:	9b03      	ldr	r3, [sp, #12]
  404a66:	9a08      	ldr	r2, [sp, #32]
  404a68:	9901      	ldr	r1, [sp, #4]
  404a6a:	428a      	cmp	r2, r1
  404a6c:	bfac      	ite	ge
  404a6e:	189b      	addge	r3, r3, r2
  404a70:	185b      	addlt	r3, r3, r1
  404a72:	9303      	str	r3, [sp, #12]
  404a74:	e04e      	b.n	404b14 <_vfiprintf_r+0x8f8>
  404a76:	aa0f      	add	r2, sp, #60	; 0x3c
  404a78:	4651      	mov	r1, sl
  404a7a:	4638      	mov	r0, r7
  404a7c:	f7ff fb8e 	bl	40419c <__sprint_r.part.0>
  404a80:	2800      	cmp	r0, #0
  404a82:	f040 813f 	bne.w	404d04 <_vfiprintf_r+0xae8>
  404a86:	9910      	ldr	r1, [sp, #64]	; 0x40
  404a88:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404a8a:	1c48      	adds	r0, r1, #1
  404a8c:	46ce      	mov	lr, r9
  404a8e:	e77f      	b.n	404990 <_vfiprintf_r+0x774>
  404a90:	aa0f      	add	r2, sp, #60	; 0x3c
  404a92:	4659      	mov	r1, fp
  404a94:	4638      	mov	r0, r7
  404a96:	f7ff fb81 	bl	40419c <__sprint_r.part.0>
  404a9a:	b960      	cbnz	r0, 404ab6 <_vfiprintf_r+0x89a>
  404a9c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404a9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404aa0:	1c48      	adds	r0, r1, #1
  404aa2:	46ca      	mov	sl, r9
  404aa4:	e7bd      	b.n	404a22 <_vfiprintf_r+0x806>
  404aa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404aa8:	f8dd b010 	ldr.w	fp, [sp, #16]
  404aac:	2b00      	cmp	r3, #0
  404aae:	f040 81d4 	bne.w	404e5a <_vfiprintf_r+0xc3e>
  404ab2:	2300      	movs	r3, #0
  404ab4:	9310      	str	r3, [sp, #64]	; 0x40
  404ab6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404aba:	f013 0f01 	tst.w	r3, #1
  404abe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404ac2:	d102      	bne.n	404aca <_vfiprintf_r+0x8ae>
  404ac4:	059a      	lsls	r2, r3, #22
  404ac6:	f140 80de 	bpl.w	404c86 <_vfiprintf_r+0xa6a>
  404aca:	065b      	lsls	r3, r3, #25
  404acc:	f53f acb2 	bmi.w	404434 <_vfiprintf_r+0x218>
  404ad0:	9803      	ldr	r0, [sp, #12]
  404ad2:	b02d      	add	sp, #180	; 0xb4
  404ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ad8:	2a00      	cmp	r2, #0
  404ada:	f040 8106 	bne.w	404cea <_vfiprintf_r+0xace>
  404ade:	9a05      	ldr	r2, [sp, #20]
  404ae0:	921d      	str	r2, [sp, #116]	; 0x74
  404ae2:	2301      	movs	r3, #1
  404ae4:	9211      	str	r2, [sp, #68]	; 0x44
  404ae6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  404aea:	9310      	str	r3, [sp, #64]	; 0x40
  404aec:	46ca      	mov	sl, r9
  404aee:	f10a 0a08 	add.w	sl, sl, #8
  404af2:	9b02      	ldr	r3, [sp, #8]
  404af4:	0759      	lsls	r1, r3, #29
  404af6:	d504      	bpl.n	404b02 <_vfiprintf_r+0x8e6>
  404af8:	9b08      	ldr	r3, [sp, #32]
  404afa:	9901      	ldr	r1, [sp, #4]
  404afc:	1a5c      	subs	r4, r3, r1
  404afe:	2c00      	cmp	r4, #0
  404b00:	dc81      	bgt.n	404a06 <_vfiprintf_r+0x7ea>
  404b02:	9b03      	ldr	r3, [sp, #12]
  404b04:	9908      	ldr	r1, [sp, #32]
  404b06:	9801      	ldr	r0, [sp, #4]
  404b08:	4281      	cmp	r1, r0
  404b0a:	bfac      	ite	ge
  404b0c:	185b      	addge	r3, r3, r1
  404b0e:	181b      	addlt	r3, r3, r0
  404b10:	9303      	str	r3, [sp, #12]
  404b12:	bb72      	cbnz	r2, 404b72 <_vfiprintf_r+0x956>
  404b14:	2300      	movs	r3, #0
  404b16:	9310      	str	r3, [sp, #64]	; 0x40
  404b18:	46ca      	mov	sl, r9
  404b1a:	f7ff bbbc 	b.w	404296 <_vfiprintf_r+0x7a>
  404b1e:	aa0f      	add	r2, sp, #60	; 0x3c
  404b20:	9904      	ldr	r1, [sp, #16]
  404b22:	4620      	mov	r0, r4
  404b24:	f7ff fb3a 	bl	40419c <__sprint_r.part.0>
  404b28:	bb50      	cbnz	r0, 404b80 <_vfiprintf_r+0x964>
  404b2a:	9910      	ldr	r1, [sp, #64]	; 0x40
  404b2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404b2e:	f101 0e01 	add.w	lr, r1, #1
  404b32:	46cc      	mov	ip, r9
  404b34:	e548      	b.n	4045c8 <_vfiprintf_r+0x3ac>
  404b36:	2a00      	cmp	r2, #0
  404b38:	f040 8140 	bne.w	404dbc <_vfiprintf_r+0xba0>
  404b3c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  404b40:	2900      	cmp	r1, #0
  404b42:	f000 811b 	beq.w	404d7c <_vfiprintf_r+0xb60>
  404b46:	2201      	movs	r2, #1
  404b48:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  404b4c:	4610      	mov	r0, r2
  404b4e:	921d      	str	r2, [sp, #116]	; 0x74
  404b50:	911c      	str	r1, [sp, #112]	; 0x70
  404b52:	46ca      	mov	sl, r9
  404b54:	4601      	mov	r1, r0
  404b56:	f10a 0a08 	add.w	sl, sl, #8
  404b5a:	3001      	adds	r0, #1
  404b5c:	e507      	b.n	40456e <_vfiprintf_r+0x352>
  404b5e:	9b02      	ldr	r3, [sp, #8]
  404b60:	2a01      	cmp	r2, #1
  404b62:	f000 8098 	beq.w	404c96 <_vfiprintf_r+0xa7a>
  404b66:	2a02      	cmp	r2, #2
  404b68:	d10d      	bne.n	404b86 <_vfiprintf_r+0x96a>
  404b6a:	9302      	str	r3, [sp, #8]
  404b6c:	2600      	movs	r6, #0
  404b6e:	2700      	movs	r7, #0
  404b70:	e5b0      	b.n	4046d4 <_vfiprintf_r+0x4b8>
  404b72:	aa0f      	add	r2, sp, #60	; 0x3c
  404b74:	9904      	ldr	r1, [sp, #16]
  404b76:	9806      	ldr	r0, [sp, #24]
  404b78:	f7ff fb10 	bl	40419c <__sprint_r.part.0>
  404b7c:	2800      	cmp	r0, #0
  404b7e:	d0c9      	beq.n	404b14 <_vfiprintf_r+0x8f8>
  404b80:	f8dd b010 	ldr.w	fp, [sp, #16]
  404b84:	e797      	b.n	404ab6 <_vfiprintf_r+0x89a>
  404b86:	9302      	str	r3, [sp, #8]
  404b88:	2600      	movs	r6, #0
  404b8a:	2700      	movs	r7, #0
  404b8c:	4649      	mov	r1, r9
  404b8e:	e000      	b.n	404b92 <_vfiprintf_r+0x976>
  404b90:	4659      	mov	r1, fp
  404b92:	08f2      	lsrs	r2, r6, #3
  404b94:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404b98:	08f8      	lsrs	r0, r7, #3
  404b9a:	f006 0307 	and.w	r3, r6, #7
  404b9e:	4607      	mov	r7, r0
  404ba0:	4616      	mov	r6, r2
  404ba2:	3330      	adds	r3, #48	; 0x30
  404ba4:	ea56 0207 	orrs.w	r2, r6, r7
  404ba8:	f801 3c01 	strb.w	r3, [r1, #-1]
  404bac:	f101 3bff 	add.w	fp, r1, #4294967295
  404bb0:	d1ee      	bne.n	404b90 <_vfiprintf_r+0x974>
  404bb2:	9a02      	ldr	r2, [sp, #8]
  404bb4:	07d6      	lsls	r6, r2, #31
  404bb6:	f57f ad9d 	bpl.w	4046f4 <_vfiprintf_r+0x4d8>
  404bba:	2b30      	cmp	r3, #48	; 0x30
  404bbc:	f43f ad9a 	beq.w	4046f4 <_vfiprintf_r+0x4d8>
  404bc0:	3902      	subs	r1, #2
  404bc2:	2330      	movs	r3, #48	; 0x30
  404bc4:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404bc8:	eba9 0301 	sub.w	r3, r9, r1
  404bcc:	9305      	str	r3, [sp, #20]
  404bce:	468b      	mov	fp, r1
  404bd0:	e476      	b.n	4044c0 <_vfiprintf_r+0x2a4>
  404bd2:	9b03      	ldr	r3, [sp, #12]
  404bd4:	9a08      	ldr	r2, [sp, #32]
  404bd6:	428a      	cmp	r2, r1
  404bd8:	bfac      	ite	ge
  404bda:	189b      	addge	r3, r3, r2
  404bdc:	185b      	addlt	r3, r3, r1
  404bde:	9303      	str	r3, [sp, #12]
  404be0:	e798      	b.n	404b14 <_vfiprintf_r+0x8f8>
  404be2:	2202      	movs	r2, #2
  404be4:	e44d      	b.n	404482 <_vfiprintf_r+0x266>
  404be6:	2f00      	cmp	r7, #0
  404be8:	bf08      	it	eq
  404bea:	2e0a      	cmpeq	r6, #10
  404bec:	d352      	bcc.n	404c94 <_vfiprintf_r+0xa78>
  404bee:	46cb      	mov	fp, r9
  404bf0:	4630      	mov	r0, r6
  404bf2:	4639      	mov	r1, r7
  404bf4:	220a      	movs	r2, #10
  404bf6:	2300      	movs	r3, #0
  404bf8:	f001 fbc6 	bl	406388 <__aeabi_uldivmod>
  404bfc:	3230      	adds	r2, #48	; 0x30
  404bfe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404c02:	4630      	mov	r0, r6
  404c04:	4639      	mov	r1, r7
  404c06:	2300      	movs	r3, #0
  404c08:	220a      	movs	r2, #10
  404c0a:	f001 fbbd 	bl	406388 <__aeabi_uldivmod>
  404c0e:	4606      	mov	r6, r0
  404c10:	460f      	mov	r7, r1
  404c12:	ea56 0307 	orrs.w	r3, r6, r7
  404c16:	d1eb      	bne.n	404bf0 <_vfiprintf_r+0x9d4>
  404c18:	e56c      	b.n	4046f4 <_vfiprintf_r+0x4d8>
  404c1a:	9405      	str	r4, [sp, #20]
  404c1c:	46cb      	mov	fp, r9
  404c1e:	e44f      	b.n	4044c0 <_vfiprintf_r+0x2a4>
  404c20:	aa0f      	add	r2, sp, #60	; 0x3c
  404c22:	9904      	ldr	r1, [sp, #16]
  404c24:	9806      	ldr	r0, [sp, #24]
  404c26:	f7ff fab9 	bl	40419c <__sprint_r.part.0>
  404c2a:	2800      	cmp	r0, #0
  404c2c:	d1a8      	bne.n	404b80 <_vfiprintf_r+0x964>
  404c2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404c30:	46ca      	mov	sl, r9
  404c32:	e75e      	b.n	404af2 <_vfiprintf_r+0x8d6>
  404c34:	aa0f      	add	r2, sp, #60	; 0x3c
  404c36:	9904      	ldr	r1, [sp, #16]
  404c38:	9806      	ldr	r0, [sp, #24]
  404c3a:	f7ff faaf 	bl	40419c <__sprint_r.part.0>
  404c3e:	2800      	cmp	r0, #0
  404c40:	d19e      	bne.n	404b80 <_vfiprintf_r+0x964>
  404c42:	46ca      	mov	sl, r9
  404c44:	f7ff bbc0 	b.w	4043c8 <_vfiprintf_r+0x1ac>
  404c48:	00406838 	.word	0x00406838
  404c4c:	00406828 	.word	0x00406828
  404c50:	3104      	adds	r1, #4
  404c52:	6816      	ldr	r6, [r2, #0]
  404c54:	9107      	str	r1, [sp, #28]
  404c56:	2201      	movs	r2, #1
  404c58:	2700      	movs	r7, #0
  404c5a:	e412      	b.n	404482 <_vfiprintf_r+0x266>
  404c5c:	9807      	ldr	r0, [sp, #28]
  404c5e:	4601      	mov	r1, r0
  404c60:	3104      	adds	r1, #4
  404c62:	6806      	ldr	r6, [r0, #0]
  404c64:	9107      	str	r1, [sp, #28]
  404c66:	2700      	movs	r7, #0
  404c68:	e40b      	b.n	404482 <_vfiprintf_r+0x266>
  404c6a:	680e      	ldr	r6, [r1, #0]
  404c6c:	3104      	adds	r1, #4
  404c6e:	9107      	str	r1, [sp, #28]
  404c70:	2700      	movs	r7, #0
  404c72:	e591      	b.n	404798 <_vfiprintf_r+0x57c>
  404c74:	9907      	ldr	r1, [sp, #28]
  404c76:	680e      	ldr	r6, [r1, #0]
  404c78:	460a      	mov	r2, r1
  404c7a:	17f7      	asrs	r7, r6, #31
  404c7c:	3204      	adds	r2, #4
  404c7e:	9207      	str	r2, [sp, #28]
  404c80:	4630      	mov	r0, r6
  404c82:	4639      	mov	r1, r7
  404c84:	e50f      	b.n	4046a6 <_vfiprintf_r+0x48a>
  404c86:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404c8a:	f000 fe7f 	bl	40598c <__retarget_lock_release_recursive>
  404c8e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404c92:	e71a      	b.n	404aca <_vfiprintf_r+0x8ae>
  404c94:	9b02      	ldr	r3, [sp, #8]
  404c96:	9302      	str	r3, [sp, #8]
  404c98:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404c9c:	3630      	adds	r6, #48	; 0x30
  404c9e:	2301      	movs	r3, #1
  404ca0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  404ca4:	9305      	str	r3, [sp, #20]
  404ca6:	e40b      	b.n	4044c0 <_vfiprintf_r+0x2a4>
  404ca8:	aa0f      	add	r2, sp, #60	; 0x3c
  404caa:	9904      	ldr	r1, [sp, #16]
  404cac:	9806      	ldr	r0, [sp, #24]
  404cae:	f7ff fa75 	bl	40419c <__sprint_r.part.0>
  404cb2:	2800      	cmp	r0, #0
  404cb4:	f47f af64 	bne.w	404b80 <_vfiprintf_r+0x964>
  404cb8:	9910      	ldr	r1, [sp, #64]	; 0x40
  404cba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404cbc:	1c48      	adds	r0, r1, #1
  404cbe:	46ca      	mov	sl, r9
  404cc0:	e651      	b.n	404966 <_vfiprintf_r+0x74a>
  404cc2:	aa0f      	add	r2, sp, #60	; 0x3c
  404cc4:	9904      	ldr	r1, [sp, #16]
  404cc6:	9806      	ldr	r0, [sp, #24]
  404cc8:	f7ff fa68 	bl	40419c <__sprint_r.part.0>
  404ccc:	2800      	cmp	r0, #0
  404cce:	f47f af57 	bne.w	404b80 <_vfiprintf_r+0x964>
  404cd2:	9910      	ldr	r1, [sp, #64]	; 0x40
  404cd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404cd6:	1c48      	adds	r0, r1, #1
  404cd8:	46ca      	mov	sl, r9
  404cda:	e448      	b.n	40456e <_vfiprintf_r+0x352>
  404cdc:	2a00      	cmp	r2, #0
  404cde:	f040 8091 	bne.w	404e04 <_vfiprintf_r+0xbe8>
  404ce2:	2001      	movs	r0, #1
  404ce4:	4611      	mov	r1, r2
  404ce6:	46ca      	mov	sl, r9
  404ce8:	e641      	b.n	40496e <_vfiprintf_r+0x752>
  404cea:	aa0f      	add	r2, sp, #60	; 0x3c
  404cec:	9904      	ldr	r1, [sp, #16]
  404cee:	9806      	ldr	r0, [sp, #24]
  404cf0:	f7ff fa54 	bl	40419c <__sprint_r.part.0>
  404cf4:	2800      	cmp	r0, #0
  404cf6:	f47f af43 	bne.w	404b80 <_vfiprintf_r+0x964>
  404cfa:	9810      	ldr	r0, [sp, #64]	; 0x40
  404cfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404cfe:	3001      	adds	r0, #1
  404d00:	46ca      	mov	sl, r9
  404d02:	e667      	b.n	4049d4 <_vfiprintf_r+0x7b8>
  404d04:	46d3      	mov	fp, sl
  404d06:	e6d6      	b.n	404ab6 <_vfiprintf_r+0x89a>
  404d08:	9e07      	ldr	r6, [sp, #28]
  404d0a:	3607      	adds	r6, #7
  404d0c:	f026 0207 	bic.w	r2, r6, #7
  404d10:	f102 0108 	add.w	r1, r2, #8
  404d14:	e9d2 6700 	ldrd	r6, r7, [r2]
  404d18:	9107      	str	r1, [sp, #28]
  404d1a:	2201      	movs	r2, #1
  404d1c:	f7ff bbb1 	b.w	404482 <_vfiprintf_r+0x266>
  404d20:	9e07      	ldr	r6, [sp, #28]
  404d22:	3607      	adds	r6, #7
  404d24:	f026 0607 	bic.w	r6, r6, #7
  404d28:	e9d6 0100 	ldrd	r0, r1, [r6]
  404d2c:	f106 0208 	add.w	r2, r6, #8
  404d30:	9207      	str	r2, [sp, #28]
  404d32:	4606      	mov	r6, r0
  404d34:	460f      	mov	r7, r1
  404d36:	e4b6      	b.n	4046a6 <_vfiprintf_r+0x48a>
  404d38:	9e07      	ldr	r6, [sp, #28]
  404d3a:	3607      	adds	r6, #7
  404d3c:	f026 0207 	bic.w	r2, r6, #7
  404d40:	f102 0108 	add.w	r1, r2, #8
  404d44:	e9d2 6700 	ldrd	r6, r7, [r2]
  404d48:	9107      	str	r1, [sp, #28]
  404d4a:	2200      	movs	r2, #0
  404d4c:	f7ff bb99 	b.w	404482 <_vfiprintf_r+0x266>
  404d50:	9e07      	ldr	r6, [sp, #28]
  404d52:	3607      	adds	r6, #7
  404d54:	f026 0107 	bic.w	r1, r6, #7
  404d58:	f101 0008 	add.w	r0, r1, #8
  404d5c:	9007      	str	r0, [sp, #28]
  404d5e:	e9d1 6700 	ldrd	r6, r7, [r1]
  404d62:	e519      	b.n	404798 <_vfiprintf_r+0x57c>
  404d64:	46cb      	mov	fp, r9
  404d66:	f7ff bbab 	b.w	4044c0 <_vfiprintf_r+0x2a4>
  404d6a:	252d      	movs	r5, #45	; 0x2d
  404d6c:	4276      	negs	r6, r6
  404d6e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  404d72:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404d76:	2201      	movs	r2, #1
  404d78:	f7ff bb88 	b.w	40448c <_vfiprintf_r+0x270>
  404d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404d7e:	b9b3      	cbnz	r3, 404dae <_vfiprintf_r+0xb92>
  404d80:	4611      	mov	r1, r2
  404d82:	2001      	movs	r0, #1
  404d84:	46ca      	mov	sl, r9
  404d86:	e5f2      	b.n	40496e <_vfiprintf_r+0x752>
  404d88:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404d8c:	f000 fdfe 	bl	40598c <__retarget_lock_release_recursive>
  404d90:	f04f 33ff 	mov.w	r3, #4294967295
  404d94:	9303      	str	r3, [sp, #12]
  404d96:	f7ff bb50 	b.w	40443a <_vfiprintf_r+0x21e>
  404d9a:	aa0f      	add	r2, sp, #60	; 0x3c
  404d9c:	9904      	ldr	r1, [sp, #16]
  404d9e:	9806      	ldr	r0, [sp, #24]
  404da0:	f7ff f9fc 	bl	40419c <__sprint_r.part.0>
  404da4:	2800      	cmp	r0, #0
  404da6:	f47f aeeb 	bne.w	404b80 <_vfiprintf_r+0x964>
  404daa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404dac:	e6a9      	b.n	404b02 <_vfiprintf_r+0x8e6>
  404dae:	ab0e      	add	r3, sp, #56	; 0x38
  404db0:	2202      	movs	r2, #2
  404db2:	931c      	str	r3, [sp, #112]	; 0x70
  404db4:	921d      	str	r2, [sp, #116]	; 0x74
  404db6:	2001      	movs	r0, #1
  404db8:	46ca      	mov	sl, r9
  404dba:	e5d0      	b.n	40495e <_vfiprintf_r+0x742>
  404dbc:	aa0f      	add	r2, sp, #60	; 0x3c
  404dbe:	9904      	ldr	r1, [sp, #16]
  404dc0:	9806      	ldr	r0, [sp, #24]
  404dc2:	f7ff f9eb 	bl	40419c <__sprint_r.part.0>
  404dc6:	2800      	cmp	r0, #0
  404dc8:	f47f aeda 	bne.w	404b80 <_vfiprintf_r+0x964>
  404dcc:	9910      	ldr	r1, [sp, #64]	; 0x40
  404dce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404dd0:	1c48      	adds	r0, r1, #1
  404dd2:	46ca      	mov	sl, r9
  404dd4:	e5a4      	b.n	404920 <_vfiprintf_r+0x704>
  404dd6:	9a07      	ldr	r2, [sp, #28]
  404dd8:	9903      	ldr	r1, [sp, #12]
  404dda:	6813      	ldr	r3, [r2, #0]
  404ddc:	17cd      	asrs	r5, r1, #31
  404dde:	4608      	mov	r0, r1
  404de0:	3204      	adds	r2, #4
  404de2:	4629      	mov	r1, r5
  404de4:	9207      	str	r2, [sp, #28]
  404de6:	e9c3 0100 	strd	r0, r1, [r3]
  404dea:	f7ff ba54 	b.w	404296 <_vfiprintf_r+0x7a>
  404dee:	4658      	mov	r0, fp
  404df0:	9607      	str	r6, [sp, #28]
  404df2:	9302      	str	r3, [sp, #8]
  404df4:	f7ff f964 	bl	4040c0 <strlen>
  404df8:	2400      	movs	r4, #0
  404dfa:	9005      	str	r0, [sp, #20]
  404dfc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404e00:	f7ff bb5e 	b.w	4044c0 <_vfiprintf_r+0x2a4>
  404e04:	aa0f      	add	r2, sp, #60	; 0x3c
  404e06:	9904      	ldr	r1, [sp, #16]
  404e08:	9806      	ldr	r0, [sp, #24]
  404e0a:	f7ff f9c7 	bl	40419c <__sprint_r.part.0>
  404e0e:	2800      	cmp	r0, #0
  404e10:	f47f aeb6 	bne.w	404b80 <_vfiprintf_r+0x964>
  404e14:	9910      	ldr	r1, [sp, #64]	; 0x40
  404e16:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e18:	1c48      	adds	r0, r1, #1
  404e1a:	46ca      	mov	sl, r9
  404e1c:	e5a7      	b.n	40496e <_vfiprintf_r+0x752>
  404e1e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404e20:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e22:	4e20      	ldr	r6, [pc, #128]	; (404ea4 <_vfiprintf_r+0xc88>)
  404e24:	3101      	adds	r1, #1
  404e26:	f7ff bb90 	b.w	40454a <_vfiprintf_r+0x32e>
  404e2a:	2c06      	cmp	r4, #6
  404e2c:	bf28      	it	cs
  404e2e:	2406      	movcs	r4, #6
  404e30:	9405      	str	r4, [sp, #20]
  404e32:	9607      	str	r6, [sp, #28]
  404e34:	9401      	str	r4, [sp, #4]
  404e36:	f8df b070 	ldr.w	fp, [pc, #112]	; 404ea8 <_vfiprintf_r+0xc8c>
  404e3a:	e4d5      	b.n	4047e8 <_vfiprintf_r+0x5cc>
  404e3c:	9810      	ldr	r0, [sp, #64]	; 0x40
  404e3e:	4e19      	ldr	r6, [pc, #100]	; (404ea4 <_vfiprintf_r+0xc88>)
  404e40:	3001      	adds	r0, #1
  404e42:	e603      	b.n	404a4c <_vfiprintf_r+0x830>
  404e44:	9405      	str	r4, [sp, #20]
  404e46:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404e4a:	9607      	str	r6, [sp, #28]
  404e4c:	9302      	str	r3, [sp, #8]
  404e4e:	4604      	mov	r4, r0
  404e50:	f7ff bb36 	b.w	4044c0 <_vfiprintf_r+0x2a4>
  404e54:	4686      	mov	lr, r0
  404e56:	f7ff bbce 	b.w	4045f6 <_vfiprintf_r+0x3da>
  404e5a:	9806      	ldr	r0, [sp, #24]
  404e5c:	aa0f      	add	r2, sp, #60	; 0x3c
  404e5e:	4659      	mov	r1, fp
  404e60:	f7ff f99c 	bl	40419c <__sprint_r.part.0>
  404e64:	2800      	cmp	r0, #0
  404e66:	f43f ae24 	beq.w	404ab2 <_vfiprintf_r+0x896>
  404e6a:	e624      	b.n	404ab6 <_vfiprintf_r+0x89a>
  404e6c:	9907      	ldr	r1, [sp, #28]
  404e6e:	f898 2001 	ldrb.w	r2, [r8, #1]
  404e72:	680c      	ldr	r4, [r1, #0]
  404e74:	3104      	adds	r1, #4
  404e76:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  404e7a:	46b8      	mov	r8, r7
  404e7c:	9107      	str	r1, [sp, #28]
  404e7e:	f7ff ba3f 	b.w	404300 <_vfiprintf_r+0xe4>
  404e82:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404e86:	e43c      	b.n	404702 <_vfiprintf_r+0x4e6>
  404e88:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404e8c:	e521      	b.n	4048d2 <_vfiprintf_r+0x6b6>
  404e8e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404e92:	f7ff bbf4 	b.w	40467e <_vfiprintf_r+0x462>
  404e96:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404e9a:	e491      	b.n	4047c0 <_vfiprintf_r+0x5a4>
  404e9c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404ea0:	e469      	b.n	404776 <_vfiprintf_r+0x55a>
  404ea2:	bf00      	nop
  404ea4:	00406828 	.word	0x00406828
  404ea8:	00406820 	.word	0x00406820

00404eac <__sbprintf>:
  404eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404eb0:	460c      	mov	r4, r1
  404eb2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  404eb6:	8989      	ldrh	r1, [r1, #12]
  404eb8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404eba:	89e5      	ldrh	r5, [r4, #14]
  404ebc:	9619      	str	r6, [sp, #100]	; 0x64
  404ebe:	f021 0102 	bic.w	r1, r1, #2
  404ec2:	4606      	mov	r6, r0
  404ec4:	69e0      	ldr	r0, [r4, #28]
  404ec6:	f8ad 100c 	strh.w	r1, [sp, #12]
  404eca:	4617      	mov	r7, r2
  404ecc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  404ed0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  404ed2:	f8ad 500e 	strh.w	r5, [sp, #14]
  404ed6:	4698      	mov	r8, r3
  404ed8:	ad1a      	add	r5, sp, #104	; 0x68
  404eda:	2300      	movs	r3, #0
  404edc:	9007      	str	r0, [sp, #28]
  404ede:	a816      	add	r0, sp, #88	; 0x58
  404ee0:	9209      	str	r2, [sp, #36]	; 0x24
  404ee2:	9306      	str	r3, [sp, #24]
  404ee4:	9500      	str	r5, [sp, #0]
  404ee6:	9504      	str	r5, [sp, #16]
  404ee8:	9102      	str	r1, [sp, #8]
  404eea:	9105      	str	r1, [sp, #20]
  404eec:	f000 fd48 	bl	405980 <__retarget_lock_init_recursive>
  404ef0:	4643      	mov	r3, r8
  404ef2:	463a      	mov	r2, r7
  404ef4:	4669      	mov	r1, sp
  404ef6:	4630      	mov	r0, r6
  404ef8:	f7ff f990 	bl	40421c <_vfiprintf_r>
  404efc:	1e05      	subs	r5, r0, #0
  404efe:	db07      	blt.n	404f10 <__sbprintf+0x64>
  404f00:	4630      	mov	r0, r6
  404f02:	4669      	mov	r1, sp
  404f04:	f000 f928 	bl	405158 <_fflush_r>
  404f08:	2800      	cmp	r0, #0
  404f0a:	bf18      	it	ne
  404f0c:	f04f 35ff 	movne.w	r5, #4294967295
  404f10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  404f14:	065b      	lsls	r3, r3, #25
  404f16:	d503      	bpl.n	404f20 <__sbprintf+0x74>
  404f18:	89a3      	ldrh	r3, [r4, #12]
  404f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404f1e:	81a3      	strh	r3, [r4, #12]
  404f20:	9816      	ldr	r0, [sp, #88]	; 0x58
  404f22:	f000 fd2f 	bl	405984 <__retarget_lock_close_recursive>
  404f26:	4628      	mov	r0, r5
  404f28:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  404f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404f30 <__swsetup_r>:
  404f30:	b538      	push	{r3, r4, r5, lr}
  404f32:	4b30      	ldr	r3, [pc, #192]	; (404ff4 <__swsetup_r+0xc4>)
  404f34:	681b      	ldr	r3, [r3, #0]
  404f36:	4605      	mov	r5, r0
  404f38:	460c      	mov	r4, r1
  404f3a:	b113      	cbz	r3, 404f42 <__swsetup_r+0x12>
  404f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  404f3e:	2a00      	cmp	r2, #0
  404f40:	d038      	beq.n	404fb4 <__swsetup_r+0x84>
  404f42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404f46:	b293      	uxth	r3, r2
  404f48:	0718      	lsls	r0, r3, #28
  404f4a:	d50c      	bpl.n	404f66 <__swsetup_r+0x36>
  404f4c:	6920      	ldr	r0, [r4, #16]
  404f4e:	b1a8      	cbz	r0, 404f7c <__swsetup_r+0x4c>
  404f50:	f013 0201 	ands.w	r2, r3, #1
  404f54:	d01e      	beq.n	404f94 <__swsetup_r+0x64>
  404f56:	6963      	ldr	r3, [r4, #20]
  404f58:	2200      	movs	r2, #0
  404f5a:	425b      	negs	r3, r3
  404f5c:	61a3      	str	r3, [r4, #24]
  404f5e:	60a2      	str	r2, [r4, #8]
  404f60:	b1f0      	cbz	r0, 404fa0 <__swsetup_r+0x70>
  404f62:	2000      	movs	r0, #0
  404f64:	bd38      	pop	{r3, r4, r5, pc}
  404f66:	06d9      	lsls	r1, r3, #27
  404f68:	d53c      	bpl.n	404fe4 <__swsetup_r+0xb4>
  404f6a:	0758      	lsls	r0, r3, #29
  404f6c:	d426      	bmi.n	404fbc <__swsetup_r+0x8c>
  404f6e:	6920      	ldr	r0, [r4, #16]
  404f70:	f042 0308 	orr.w	r3, r2, #8
  404f74:	81a3      	strh	r3, [r4, #12]
  404f76:	b29b      	uxth	r3, r3
  404f78:	2800      	cmp	r0, #0
  404f7a:	d1e9      	bne.n	404f50 <__swsetup_r+0x20>
  404f7c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  404f80:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404f84:	d0e4      	beq.n	404f50 <__swsetup_r+0x20>
  404f86:	4628      	mov	r0, r5
  404f88:	4621      	mov	r1, r4
  404f8a:	f000 fd2f 	bl	4059ec <__smakebuf_r>
  404f8e:	89a3      	ldrh	r3, [r4, #12]
  404f90:	6920      	ldr	r0, [r4, #16]
  404f92:	e7dd      	b.n	404f50 <__swsetup_r+0x20>
  404f94:	0799      	lsls	r1, r3, #30
  404f96:	bf58      	it	pl
  404f98:	6962      	ldrpl	r2, [r4, #20]
  404f9a:	60a2      	str	r2, [r4, #8]
  404f9c:	2800      	cmp	r0, #0
  404f9e:	d1e0      	bne.n	404f62 <__swsetup_r+0x32>
  404fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404fa4:	061a      	lsls	r2, r3, #24
  404fa6:	d5dd      	bpl.n	404f64 <__swsetup_r+0x34>
  404fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404fac:	81a3      	strh	r3, [r4, #12]
  404fae:	f04f 30ff 	mov.w	r0, #4294967295
  404fb2:	bd38      	pop	{r3, r4, r5, pc}
  404fb4:	4618      	mov	r0, r3
  404fb6:	f000 f927 	bl	405208 <__sinit>
  404fba:	e7c2      	b.n	404f42 <__swsetup_r+0x12>
  404fbc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404fbe:	b151      	cbz	r1, 404fd6 <__swsetup_r+0xa6>
  404fc0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404fc4:	4299      	cmp	r1, r3
  404fc6:	d004      	beq.n	404fd2 <__swsetup_r+0xa2>
  404fc8:	4628      	mov	r0, r5
  404fca:	f000 fa43 	bl	405454 <_free_r>
  404fce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404fd2:	2300      	movs	r3, #0
  404fd4:	6323      	str	r3, [r4, #48]	; 0x30
  404fd6:	2300      	movs	r3, #0
  404fd8:	6920      	ldr	r0, [r4, #16]
  404fda:	6063      	str	r3, [r4, #4]
  404fdc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  404fe0:	6020      	str	r0, [r4, #0]
  404fe2:	e7c5      	b.n	404f70 <__swsetup_r+0x40>
  404fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  404fe8:	2309      	movs	r3, #9
  404fea:	602b      	str	r3, [r5, #0]
  404fec:	f04f 30ff 	mov.w	r0, #4294967295
  404ff0:	81a2      	strh	r2, [r4, #12]
  404ff2:	bd38      	pop	{r3, r4, r5, pc}
  404ff4:	2040000c 	.word	0x2040000c

00404ff8 <register_fini>:
  404ff8:	4b02      	ldr	r3, [pc, #8]	; (405004 <register_fini+0xc>)
  404ffa:	b113      	cbz	r3, 405002 <register_fini+0xa>
  404ffc:	4802      	ldr	r0, [pc, #8]	; (405008 <register_fini+0x10>)
  404ffe:	f000 b805 	b.w	40500c <atexit>
  405002:	4770      	bx	lr
  405004:	00000000 	.word	0x00000000
  405008:	00405279 	.word	0x00405279

0040500c <atexit>:
  40500c:	2300      	movs	r3, #0
  40500e:	4601      	mov	r1, r0
  405010:	461a      	mov	r2, r3
  405012:	4618      	mov	r0, r3
  405014:	f001 b890 	b.w	406138 <__register_exitproc>

00405018 <__sflush_r>:
  405018:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40501c:	b29a      	uxth	r2, r3
  40501e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405022:	460d      	mov	r5, r1
  405024:	0711      	lsls	r1, r2, #28
  405026:	4680      	mov	r8, r0
  405028:	d43a      	bmi.n	4050a0 <__sflush_r+0x88>
  40502a:	686a      	ldr	r2, [r5, #4]
  40502c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  405030:	2a00      	cmp	r2, #0
  405032:	81ab      	strh	r3, [r5, #12]
  405034:	dd6f      	ble.n	405116 <__sflush_r+0xfe>
  405036:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405038:	2c00      	cmp	r4, #0
  40503a:	d049      	beq.n	4050d0 <__sflush_r+0xb8>
  40503c:	2200      	movs	r2, #0
  40503e:	b29b      	uxth	r3, r3
  405040:	f8d8 6000 	ldr.w	r6, [r8]
  405044:	f8c8 2000 	str.w	r2, [r8]
  405048:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40504c:	d067      	beq.n	40511e <__sflush_r+0x106>
  40504e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405050:	075f      	lsls	r7, r3, #29
  405052:	d505      	bpl.n	405060 <__sflush_r+0x48>
  405054:	6869      	ldr	r1, [r5, #4]
  405056:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405058:	1a52      	subs	r2, r2, r1
  40505a:	b10b      	cbz	r3, 405060 <__sflush_r+0x48>
  40505c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40505e:	1ad2      	subs	r2, r2, r3
  405060:	2300      	movs	r3, #0
  405062:	69e9      	ldr	r1, [r5, #28]
  405064:	4640      	mov	r0, r8
  405066:	47a0      	blx	r4
  405068:	1c44      	adds	r4, r0, #1
  40506a:	d03c      	beq.n	4050e6 <__sflush_r+0xce>
  40506c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405070:	692a      	ldr	r2, [r5, #16]
  405072:	602a      	str	r2, [r5, #0]
  405074:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405078:	2200      	movs	r2, #0
  40507a:	81ab      	strh	r3, [r5, #12]
  40507c:	04db      	lsls	r3, r3, #19
  40507e:	606a      	str	r2, [r5, #4]
  405080:	d447      	bmi.n	405112 <__sflush_r+0xfa>
  405082:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405084:	f8c8 6000 	str.w	r6, [r8]
  405088:	b311      	cbz	r1, 4050d0 <__sflush_r+0xb8>
  40508a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40508e:	4299      	cmp	r1, r3
  405090:	d002      	beq.n	405098 <__sflush_r+0x80>
  405092:	4640      	mov	r0, r8
  405094:	f000 f9de 	bl	405454 <_free_r>
  405098:	2000      	movs	r0, #0
  40509a:	6328      	str	r0, [r5, #48]	; 0x30
  40509c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050a0:	692e      	ldr	r6, [r5, #16]
  4050a2:	b1ae      	cbz	r6, 4050d0 <__sflush_r+0xb8>
  4050a4:	682c      	ldr	r4, [r5, #0]
  4050a6:	602e      	str	r6, [r5, #0]
  4050a8:	0791      	lsls	r1, r2, #30
  4050aa:	bf0c      	ite	eq
  4050ac:	696b      	ldreq	r3, [r5, #20]
  4050ae:	2300      	movne	r3, #0
  4050b0:	1ba4      	subs	r4, r4, r6
  4050b2:	60ab      	str	r3, [r5, #8]
  4050b4:	e00a      	b.n	4050cc <__sflush_r+0xb4>
  4050b6:	4623      	mov	r3, r4
  4050b8:	4632      	mov	r2, r6
  4050ba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4050bc:	69e9      	ldr	r1, [r5, #28]
  4050be:	4640      	mov	r0, r8
  4050c0:	47b8      	blx	r7
  4050c2:	2800      	cmp	r0, #0
  4050c4:	eba4 0400 	sub.w	r4, r4, r0
  4050c8:	4406      	add	r6, r0
  4050ca:	dd04      	ble.n	4050d6 <__sflush_r+0xbe>
  4050cc:	2c00      	cmp	r4, #0
  4050ce:	dcf2      	bgt.n	4050b6 <__sflush_r+0x9e>
  4050d0:	2000      	movs	r0, #0
  4050d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050d6:	89ab      	ldrh	r3, [r5, #12]
  4050d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4050dc:	81ab      	strh	r3, [r5, #12]
  4050de:	f04f 30ff 	mov.w	r0, #4294967295
  4050e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050e6:	f8d8 4000 	ldr.w	r4, [r8]
  4050ea:	2c1d      	cmp	r4, #29
  4050ec:	d8f3      	bhi.n	4050d6 <__sflush_r+0xbe>
  4050ee:	4b19      	ldr	r3, [pc, #100]	; (405154 <__sflush_r+0x13c>)
  4050f0:	40e3      	lsrs	r3, r4
  4050f2:	43db      	mvns	r3, r3
  4050f4:	f013 0301 	ands.w	r3, r3, #1
  4050f8:	d1ed      	bne.n	4050d6 <__sflush_r+0xbe>
  4050fa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4050fe:	606b      	str	r3, [r5, #4]
  405100:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  405104:	6929      	ldr	r1, [r5, #16]
  405106:	81ab      	strh	r3, [r5, #12]
  405108:	04da      	lsls	r2, r3, #19
  40510a:	6029      	str	r1, [r5, #0]
  40510c:	d5b9      	bpl.n	405082 <__sflush_r+0x6a>
  40510e:	2c00      	cmp	r4, #0
  405110:	d1b7      	bne.n	405082 <__sflush_r+0x6a>
  405112:	6528      	str	r0, [r5, #80]	; 0x50
  405114:	e7b5      	b.n	405082 <__sflush_r+0x6a>
  405116:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405118:	2a00      	cmp	r2, #0
  40511a:	dc8c      	bgt.n	405036 <__sflush_r+0x1e>
  40511c:	e7d8      	b.n	4050d0 <__sflush_r+0xb8>
  40511e:	2301      	movs	r3, #1
  405120:	69e9      	ldr	r1, [r5, #28]
  405122:	4640      	mov	r0, r8
  405124:	47a0      	blx	r4
  405126:	1c43      	adds	r3, r0, #1
  405128:	4602      	mov	r2, r0
  40512a:	d002      	beq.n	405132 <__sflush_r+0x11a>
  40512c:	89ab      	ldrh	r3, [r5, #12]
  40512e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405130:	e78e      	b.n	405050 <__sflush_r+0x38>
  405132:	f8d8 3000 	ldr.w	r3, [r8]
  405136:	2b00      	cmp	r3, #0
  405138:	d0f8      	beq.n	40512c <__sflush_r+0x114>
  40513a:	2b1d      	cmp	r3, #29
  40513c:	d001      	beq.n	405142 <__sflush_r+0x12a>
  40513e:	2b16      	cmp	r3, #22
  405140:	d102      	bne.n	405148 <__sflush_r+0x130>
  405142:	f8c8 6000 	str.w	r6, [r8]
  405146:	e7c3      	b.n	4050d0 <__sflush_r+0xb8>
  405148:	89ab      	ldrh	r3, [r5, #12]
  40514a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40514e:	81ab      	strh	r3, [r5, #12]
  405150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405154:	20400001 	.word	0x20400001

00405158 <_fflush_r>:
  405158:	b538      	push	{r3, r4, r5, lr}
  40515a:	460d      	mov	r5, r1
  40515c:	4604      	mov	r4, r0
  40515e:	b108      	cbz	r0, 405164 <_fflush_r+0xc>
  405160:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405162:	b1bb      	cbz	r3, 405194 <_fflush_r+0x3c>
  405164:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  405168:	b188      	cbz	r0, 40518e <_fflush_r+0x36>
  40516a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40516c:	07db      	lsls	r3, r3, #31
  40516e:	d401      	bmi.n	405174 <_fflush_r+0x1c>
  405170:	0581      	lsls	r1, r0, #22
  405172:	d517      	bpl.n	4051a4 <_fflush_r+0x4c>
  405174:	4620      	mov	r0, r4
  405176:	4629      	mov	r1, r5
  405178:	f7ff ff4e 	bl	405018 <__sflush_r>
  40517c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40517e:	07da      	lsls	r2, r3, #31
  405180:	4604      	mov	r4, r0
  405182:	d402      	bmi.n	40518a <_fflush_r+0x32>
  405184:	89ab      	ldrh	r3, [r5, #12]
  405186:	059b      	lsls	r3, r3, #22
  405188:	d507      	bpl.n	40519a <_fflush_r+0x42>
  40518a:	4620      	mov	r0, r4
  40518c:	bd38      	pop	{r3, r4, r5, pc}
  40518e:	4604      	mov	r4, r0
  405190:	4620      	mov	r0, r4
  405192:	bd38      	pop	{r3, r4, r5, pc}
  405194:	f000 f838 	bl	405208 <__sinit>
  405198:	e7e4      	b.n	405164 <_fflush_r+0xc>
  40519a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40519c:	f000 fbf6 	bl	40598c <__retarget_lock_release_recursive>
  4051a0:	4620      	mov	r0, r4
  4051a2:	bd38      	pop	{r3, r4, r5, pc}
  4051a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4051a6:	f000 fbef 	bl	405988 <__retarget_lock_acquire_recursive>
  4051aa:	e7e3      	b.n	405174 <_fflush_r+0x1c>

004051ac <_cleanup_r>:
  4051ac:	4901      	ldr	r1, [pc, #4]	; (4051b4 <_cleanup_r+0x8>)
  4051ae:	f000 bbaf 	b.w	405910 <_fwalk_reent>
  4051b2:	bf00      	nop
  4051b4:	00406221 	.word	0x00406221

004051b8 <std.isra.0>:
  4051b8:	b510      	push	{r4, lr}
  4051ba:	2300      	movs	r3, #0
  4051bc:	4604      	mov	r4, r0
  4051be:	8181      	strh	r1, [r0, #12]
  4051c0:	81c2      	strh	r2, [r0, #14]
  4051c2:	6003      	str	r3, [r0, #0]
  4051c4:	6043      	str	r3, [r0, #4]
  4051c6:	6083      	str	r3, [r0, #8]
  4051c8:	6643      	str	r3, [r0, #100]	; 0x64
  4051ca:	6103      	str	r3, [r0, #16]
  4051cc:	6143      	str	r3, [r0, #20]
  4051ce:	6183      	str	r3, [r0, #24]
  4051d0:	4619      	mov	r1, r3
  4051d2:	2208      	movs	r2, #8
  4051d4:	305c      	adds	r0, #92	; 0x5c
  4051d6:	f7fe fe1d 	bl	403e14 <memset>
  4051da:	4807      	ldr	r0, [pc, #28]	; (4051f8 <std.isra.0+0x40>)
  4051dc:	4907      	ldr	r1, [pc, #28]	; (4051fc <std.isra.0+0x44>)
  4051de:	4a08      	ldr	r2, [pc, #32]	; (405200 <std.isra.0+0x48>)
  4051e0:	4b08      	ldr	r3, [pc, #32]	; (405204 <std.isra.0+0x4c>)
  4051e2:	6220      	str	r0, [r4, #32]
  4051e4:	61e4      	str	r4, [r4, #28]
  4051e6:	6261      	str	r1, [r4, #36]	; 0x24
  4051e8:	62a2      	str	r2, [r4, #40]	; 0x28
  4051ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  4051ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4051f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4051f4:	f000 bbc4 	b.w	405980 <__retarget_lock_init_recursive>
  4051f8:	00405f65 	.word	0x00405f65
  4051fc:	00405f89 	.word	0x00405f89
  405200:	00405fc5 	.word	0x00405fc5
  405204:	00405fe5 	.word	0x00405fe5

00405208 <__sinit>:
  405208:	b510      	push	{r4, lr}
  40520a:	4604      	mov	r4, r0
  40520c:	4812      	ldr	r0, [pc, #72]	; (405258 <__sinit+0x50>)
  40520e:	f000 fbbb 	bl	405988 <__retarget_lock_acquire_recursive>
  405212:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  405214:	b9d2      	cbnz	r2, 40524c <__sinit+0x44>
  405216:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40521a:	4810      	ldr	r0, [pc, #64]	; (40525c <__sinit+0x54>)
  40521c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  405220:	2103      	movs	r1, #3
  405222:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  405226:	63e0      	str	r0, [r4, #60]	; 0x3c
  405228:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40522c:	6860      	ldr	r0, [r4, #4]
  40522e:	2104      	movs	r1, #4
  405230:	f7ff ffc2 	bl	4051b8 <std.isra.0>
  405234:	2201      	movs	r2, #1
  405236:	2109      	movs	r1, #9
  405238:	68a0      	ldr	r0, [r4, #8]
  40523a:	f7ff ffbd 	bl	4051b8 <std.isra.0>
  40523e:	2202      	movs	r2, #2
  405240:	2112      	movs	r1, #18
  405242:	68e0      	ldr	r0, [r4, #12]
  405244:	f7ff ffb8 	bl	4051b8 <std.isra.0>
  405248:	2301      	movs	r3, #1
  40524a:	63a3      	str	r3, [r4, #56]	; 0x38
  40524c:	4802      	ldr	r0, [pc, #8]	; (405258 <__sinit+0x50>)
  40524e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405252:	f000 bb9b 	b.w	40598c <__retarget_lock_release_recursive>
  405256:	bf00      	nop
  405258:	20400cc8 	.word	0x20400cc8
  40525c:	004051ad 	.word	0x004051ad

00405260 <__sfp_lock_acquire>:
  405260:	4801      	ldr	r0, [pc, #4]	; (405268 <__sfp_lock_acquire+0x8>)
  405262:	f000 bb91 	b.w	405988 <__retarget_lock_acquire_recursive>
  405266:	bf00      	nop
  405268:	20400cdc 	.word	0x20400cdc

0040526c <__sfp_lock_release>:
  40526c:	4801      	ldr	r0, [pc, #4]	; (405274 <__sfp_lock_release+0x8>)
  40526e:	f000 bb8d 	b.w	40598c <__retarget_lock_release_recursive>
  405272:	bf00      	nop
  405274:	20400cdc 	.word	0x20400cdc

00405278 <__libc_fini_array>:
  405278:	b538      	push	{r3, r4, r5, lr}
  40527a:	4c0a      	ldr	r4, [pc, #40]	; (4052a4 <__libc_fini_array+0x2c>)
  40527c:	4d0a      	ldr	r5, [pc, #40]	; (4052a8 <__libc_fini_array+0x30>)
  40527e:	1b64      	subs	r4, r4, r5
  405280:	10a4      	asrs	r4, r4, #2
  405282:	d00a      	beq.n	40529a <__libc_fini_array+0x22>
  405284:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405288:	3b01      	subs	r3, #1
  40528a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40528e:	3c01      	subs	r4, #1
  405290:	f855 3904 	ldr.w	r3, [r5], #-4
  405294:	4798      	blx	r3
  405296:	2c00      	cmp	r4, #0
  405298:	d1f9      	bne.n	40528e <__libc_fini_array+0x16>
  40529a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40529e:	f001 bb67 	b.w	406970 <_fini>
  4052a2:	bf00      	nop
  4052a4:	00406980 	.word	0x00406980
  4052a8:	0040697c 	.word	0x0040697c

004052ac <__fputwc>:
  4052ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4052b0:	b082      	sub	sp, #8
  4052b2:	4680      	mov	r8, r0
  4052b4:	4689      	mov	r9, r1
  4052b6:	4614      	mov	r4, r2
  4052b8:	f000 fb54 	bl	405964 <__locale_mb_cur_max>
  4052bc:	2801      	cmp	r0, #1
  4052be:	d036      	beq.n	40532e <__fputwc+0x82>
  4052c0:	464a      	mov	r2, r9
  4052c2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4052c6:	a901      	add	r1, sp, #4
  4052c8:	4640      	mov	r0, r8
  4052ca:	f000 fee7 	bl	40609c <_wcrtomb_r>
  4052ce:	1c42      	adds	r2, r0, #1
  4052d0:	4606      	mov	r6, r0
  4052d2:	d025      	beq.n	405320 <__fputwc+0x74>
  4052d4:	b3a8      	cbz	r0, 405342 <__fputwc+0x96>
  4052d6:	f89d e004 	ldrb.w	lr, [sp, #4]
  4052da:	2500      	movs	r5, #0
  4052dc:	f10d 0a04 	add.w	sl, sp, #4
  4052e0:	e009      	b.n	4052f6 <__fputwc+0x4a>
  4052e2:	6823      	ldr	r3, [r4, #0]
  4052e4:	1c5a      	adds	r2, r3, #1
  4052e6:	6022      	str	r2, [r4, #0]
  4052e8:	f883 e000 	strb.w	lr, [r3]
  4052ec:	3501      	adds	r5, #1
  4052ee:	42b5      	cmp	r5, r6
  4052f0:	d227      	bcs.n	405342 <__fputwc+0x96>
  4052f2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4052f6:	68a3      	ldr	r3, [r4, #8]
  4052f8:	3b01      	subs	r3, #1
  4052fa:	2b00      	cmp	r3, #0
  4052fc:	60a3      	str	r3, [r4, #8]
  4052fe:	daf0      	bge.n	4052e2 <__fputwc+0x36>
  405300:	69a7      	ldr	r7, [r4, #24]
  405302:	42bb      	cmp	r3, r7
  405304:	4671      	mov	r1, lr
  405306:	4622      	mov	r2, r4
  405308:	4640      	mov	r0, r8
  40530a:	db02      	blt.n	405312 <__fputwc+0x66>
  40530c:	f1be 0f0a 	cmp.w	lr, #10
  405310:	d1e7      	bne.n	4052e2 <__fputwc+0x36>
  405312:	f000 fe6b 	bl	405fec <__swbuf_r>
  405316:	1c43      	adds	r3, r0, #1
  405318:	d1e8      	bne.n	4052ec <__fputwc+0x40>
  40531a:	b002      	add	sp, #8
  40531c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405320:	89a3      	ldrh	r3, [r4, #12]
  405322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405326:	81a3      	strh	r3, [r4, #12]
  405328:	b002      	add	sp, #8
  40532a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40532e:	f109 33ff 	add.w	r3, r9, #4294967295
  405332:	2bfe      	cmp	r3, #254	; 0xfe
  405334:	d8c4      	bhi.n	4052c0 <__fputwc+0x14>
  405336:	fa5f fe89 	uxtb.w	lr, r9
  40533a:	4606      	mov	r6, r0
  40533c:	f88d e004 	strb.w	lr, [sp, #4]
  405340:	e7cb      	b.n	4052da <__fputwc+0x2e>
  405342:	4648      	mov	r0, r9
  405344:	b002      	add	sp, #8
  405346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40534a:	bf00      	nop

0040534c <_fputwc_r>:
  40534c:	b530      	push	{r4, r5, lr}
  40534e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  405350:	f013 0f01 	tst.w	r3, #1
  405354:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  405358:	4614      	mov	r4, r2
  40535a:	b083      	sub	sp, #12
  40535c:	4605      	mov	r5, r0
  40535e:	b29a      	uxth	r2, r3
  405360:	d101      	bne.n	405366 <_fputwc_r+0x1a>
  405362:	0590      	lsls	r0, r2, #22
  405364:	d51c      	bpl.n	4053a0 <_fputwc_r+0x54>
  405366:	0490      	lsls	r0, r2, #18
  405368:	d406      	bmi.n	405378 <_fputwc_r+0x2c>
  40536a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40536c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405374:	81a3      	strh	r3, [r4, #12]
  405376:	6662      	str	r2, [r4, #100]	; 0x64
  405378:	4628      	mov	r0, r5
  40537a:	4622      	mov	r2, r4
  40537c:	f7ff ff96 	bl	4052ac <__fputwc>
  405380:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405382:	07da      	lsls	r2, r3, #31
  405384:	4605      	mov	r5, r0
  405386:	d402      	bmi.n	40538e <_fputwc_r+0x42>
  405388:	89a3      	ldrh	r3, [r4, #12]
  40538a:	059b      	lsls	r3, r3, #22
  40538c:	d502      	bpl.n	405394 <_fputwc_r+0x48>
  40538e:	4628      	mov	r0, r5
  405390:	b003      	add	sp, #12
  405392:	bd30      	pop	{r4, r5, pc}
  405394:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405396:	f000 faf9 	bl	40598c <__retarget_lock_release_recursive>
  40539a:	4628      	mov	r0, r5
  40539c:	b003      	add	sp, #12
  40539e:	bd30      	pop	{r4, r5, pc}
  4053a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4053a2:	9101      	str	r1, [sp, #4]
  4053a4:	f000 faf0 	bl	405988 <__retarget_lock_acquire_recursive>
  4053a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4053ac:	9901      	ldr	r1, [sp, #4]
  4053ae:	b29a      	uxth	r2, r3
  4053b0:	e7d9      	b.n	405366 <_fputwc_r+0x1a>
  4053b2:	bf00      	nop

004053b4 <_malloc_trim_r>:
  4053b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4053b6:	4f24      	ldr	r7, [pc, #144]	; (405448 <_malloc_trim_r+0x94>)
  4053b8:	460c      	mov	r4, r1
  4053ba:	4606      	mov	r6, r0
  4053bc:	f7fe fd78 	bl	403eb0 <__malloc_lock>
  4053c0:	68bb      	ldr	r3, [r7, #8]
  4053c2:	685d      	ldr	r5, [r3, #4]
  4053c4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4053c8:	310f      	adds	r1, #15
  4053ca:	f025 0503 	bic.w	r5, r5, #3
  4053ce:	4429      	add	r1, r5
  4053d0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4053d4:	f021 010f 	bic.w	r1, r1, #15
  4053d8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4053dc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4053e0:	db07      	blt.n	4053f2 <_malloc_trim_r+0x3e>
  4053e2:	2100      	movs	r1, #0
  4053e4:	4630      	mov	r0, r6
  4053e6:	f7fe fd6f 	bl	403ec8 <_sbrk_r>
  4053ea:	68bb      	ldr	r3, [r7, #8]
  4053ec:	442b      	add	r3, r5
  4053ee:	4298      	cmp	r0, r3
  4053f0:	d004      	beq.n	4053fc <_malloc_trim_r+0x48>
  4053f2:	4630      	mov	r0, r6
  4053f4:	f7fe fd62 	bl	403ebc <__malloc_unlock>
  4053f8:	2000      	movs	r0, #0
  4053fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4053fc:	4261      	negs	r1, r4
  4053fe:	4630      	mov	r0, r6
  405400:	f7fe fd62 	bl	403ec8 <_sbrk_r>
  405404:	3001      	adds	r0, #1
  405406:	d00d      	beq.n	405424 <_malloc_trim_r+0x70>
  405408:	4b10      	ldr	r3, [pc, #64]	; (40544c <_malloc_trim_r+0x98>)
  40540a:	68ba      	ldr	r2, [r7, #8]
  40540c:	6819      	ldr	r1, [r3, #0]
  40540e:	1b2d      	subs	r5, r5, r4
  405410:	f045 0501 	orr.w	r5, r5, #1
  405414:	4630      	mov	r0, r6
  405416:	1b09      	subs	r1, r1, r4
  405418:	6055      	str	r5, [r2, #4]
  40541a:	6019      	str	r1, [r3, #0]
  40541c:	f7fe fd4e 	bl	403ebc <__malloc_unlock>
  405420:	2001      	movs	r0, #1
  405422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405424:	2100      	movs	r1, #0
  405426:	4630      	mov	r0, r6
  405428:	f7fe fd4e 	bl	403ec8 <_sbrk_r>
  40542c:	68ba      	ldr	r2, [r7, #8]
  40542e:	1a83      	subs	r3, r0, r2
  405430:	2b0f      	cmp	r3, #15
  405432:	ddde      	ble.n	4053f2 <_malloc_trim_r+0x3e>
  405434:	4c06      	ldr	r4, [pc, #24]	; (405450 <_malloc_trim_r+0x9c>)
  405436:	4905      	ldr	r1, [pc, #20]	; (40544c <_malloc_trim_r+0x98>)
  405438:	6824      	ldr	r4, [r4, #0]
  40543a:	f043 0301 	orr.w	r3, r3, #1
  40543e:	1b00      	subs	r0, r0, r4
  405440:	6053      	str	r3, [r2, #4]
  405442:	6008      	str	r0, [r1, #0]
  405444:	e7d5      	b.n	4053f2 <_malloc_trim_r+0x3e>
  405446:	bf00      	nop
  405448:	20400438 	.word	0x20400438
  40544c:	20400ba0 	.word	0x20400ba0
  405450:	20400840 	.word	0x20400840

00405454 <_free_r>:
  405454:	2900      	cmp	r1, #0
  405456:	d044      	beq.n	4054e2 <_free_r+0x8e>
  405458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40545c:	460d      	mov	r5, r1
  40545e:	4680      	mov	r8, r0
  405460:	f7fe fd26 	bl	403eb0 <__malloc_lock>
  405464:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405468:	4969      	ldr	r1, [pc, #420]	; (405610 <_free_r+0x1bc>)
  40546a:	f027 0301 	bic.w	r3, r7, #1
  40546e:	f1a5 0408 	sub.w	r4, r5, #8
  405472:	18e2      	adds	r2, r4, r3
  405474:	688e      	ldr	r6, [r1, #8]
  405476:	6850      	ldr	r0, [r2, #4]
  405478:	42b2      	cmp	r2, r6
  40547a:	f020 0003 	bic.w	r0, r0, #3
  40547e:	d05e      	beq.n	40553e <_free_r+0xea>
  405480:	07fe      	lsls	r6, r7, #31
  405482:	6050      	str	r0, [r2, #4]
  405484:	d40b      	bmi.n	40549e <_free_r+0x4a>
  405486:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40548a:	1be4      	subs	r4, r4, r7
  40548c:	f101 0e08 	add.w	lr, r1, #8
  405490:	68a5      	ldr	r5, [r4, #8]
  405492:	4575      	cmp	r5, lr
  405494:	443b      	add	r3, r7
  405496:	d06d      	beq.n	405574 <_free_r+0x120>
  405498:	68e7      	ldr	r7, [r4, #12]
  40549a:	60ef      	str	r7, [r5, #12]
  40549c:	60bd      	str	r5, [r7, #8]
  40549e:	1815      	adds	r5, r2, r0
  4054a0:	686d      	ldr	r5, [r5, #4]
  4054a2:	07ed      	lsls	r5, r5, #31
  4054a4:	d53e      	bpl.n	405524 <_free_r+0xd0>
  4054a6:	f043 0201 	orr.w	r2, r3, #1
  4054aa:	6062      	str	r2, [r4, #4]
  4054ac:	50e3      	str	r3, [r4, r3]
  4054ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4054b2:	d217      	bcs.n	4054e4 <_free_r+0x90>
  4054b4:	08db      	lsrs	r3, r3, #3
  4054b6:	1c58      	adds	r0, r3, #1
  4054b8:	109a      	asrs	r2, r3, #2
  4054ba:	684d      	ldr	r5, [r1, #4]
  4054bc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4054c0:	60a7      	str	r7, [r4, #8]
  4054c2:	2301      	movs	r3, #1
  4054c4:	4093      	lsls	r3, r2
  4054c6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4054ca:	432b      	orrs	r3, r5
  4054cc:	3a08      	subs	r2, #8
  4054ce:	60e2      	str	r2, [r4, #12]
  4054d0:	604b      	str	r3, [r1, #4]
  4054d2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4054d6:	60fc      	str	r4, [r7, #12]
  4054d8:	4640      	mov	r0, r8
  4054da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4054de:	f7fe bced 	b.w	403ebc <__malloc_unlock>
  4054e2:	4770      	bx	lr
  4054e4:	0a5a      	lsrs	r2, r3, #9
  4054e6:	2a04      	cmp	r2, #4
  4054e8:	d852      	bhi.n	405590 <_free_r+0x13c>
  4054ea:	099a      	lsrs	r2, r3, #6
  4054ec:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4054f0:	00ff      	lsls	r7, r7, #3
  4054f2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4054f6:	19c8      	adds	r0, r1, r7
  4054f8:	59ca      	ldr	r2, [r1, r7]
  4054fa:	3808      	subs	r0, #8
  4054fc:	4290      	cmp	r0, r2
  4054fe:	d04f      	beq.n	4055a0 <_free_r+0x14c>
  405500:	6851      	ldr	r1, [r2, #4]
  405502:	f021 0103 	bic.w	r1, r1, #3
  405506:	428b      	cmp	r3, r1
  405508:	d232      	bcs.n	405570 <_free_r+0x11c>
  40550a:	6892      	ldr	r2, [r2, #8]
  40550c:	4290      	cmp	r0, r2
  40550e:	d1f7      	bne.n	405500 <_free_r+0xac>
  405510:	68c3      	ldr	r3, [r0, #12]
  405512:	60a0      	str	r0, [r4, #8]
  405514:	60e3      	str	r3, [r4, #12]
  405516:	609c      	str	r4, [r3, #8]
  405518:	60c4      	str	r4, [r0, #12]
  40551a:	4640      	mov	r0, r8
  40551c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405520:	f7fe bccc 	b.w	403ebc <__malloc_unlock>
  405524:	6895      	ldr	r5, [r2, #8]
  405526:	4f3b      	ldr	r7, [pc, #236]	; (405614 <_free_r+0x1c0>)
  405528:	42bd      	cmp	r5, r7
  40552a:	4403      	add	r3, r0
  40552c:	d040      	beq.n	4055b0 <_free_r+0x15c>
  40552e:	68d0      	ldr	r0, [r2, #12]
  405530:	60e8      	str	r0, [r5, #12]
  405532:	f043 0201 	orr.w	r2, r3, #1
  405536:	6085      	str	r5, [r0, #8]
  405538:	6062      	str	r2, [r4, #4]
  40553a:	50e3      	str	r3, [r4, r3]
  40553c:	e7b7      	b.n	4054ae <_free_r+0x5a>
  40553e:	07ff      	lsls	r7, r7, #31
  405540:	4403      	add	r3, r0
  405542:	d407      	bmi.n	405554 <_free_r+0x100>
  405544:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405548:	1aa4      	subs	r4, r4, r2
  40554a:	4413      	add	r3, r2
  40554c:	68a0      	ldr	r0, [r4, #8]
  40554e:	68e2      	ldr	r2, [r4, #12]
  405550:	60c2      	str	r2, [r0, #12]
  405552:	6090      	str	r0, [r2, #8]
  405554:	4a30      	ldr	r2, [pc, #192]	; (405618 <_free_r+0x1c4>)
  405556:	6812      	ldr	r2, [r2, #0]
  405558:	f043 0001 	orr.w	r0, r3, #1
  40555c:	4293      	cmp	r3, r2
  40555e:	6060      	str	r0, [r4, #4]
  405560:	608c      	str	r4, [r1, #8]
  405562:	d3b9      	bcc.n	4054d8 <_free_r+0x84>
  405564:	4b2d      	ldr	r3, [pc, #180]	; (40561c <_free_r+0x1c8>)
  405566:	4640      	mov	r0, r8
  405568:	6819      	ldr	r1, [r3, #0]
  40556a:	f7ff ff23 	bl	4053b4 <_malloc_trim_r>
  40556e:	e7b3      	b.n	4054d8 <_free_r+0x84>
  405570:	4610      	mov	r0, r2
  405572:	e7cd      	b.n	405510 <_free_r+0xbc>
  405574:	1811      	adds	r1, r2, r0
  405576:	6849      	ldr	r1, [r1, #4]
  405578:	07c9      	lsls	r1, r1, #31
  40557a:	d444      	bmi.n	405606 <_free_r+0x1b2>
  40557c:	6891      	ldr	r1, [r2, #8]
  40557e:	68d2      	ldr	r2, [r2, #12]
  405580:	60ca      	str	r2, [r1, #12]
  405582:	4403      	add	r3, r0
  405584:	f043 0001 	orr.w	r0, r3, #1
  405588:	6091      	str	r1, [r2, #8]
  40558a:	6060      	str	r0, [r4, #4]
  40558c:	50e3      	str	r3, [r4, r3]
  40558e:	e7a3      	b.n	4054d8 <_free_r+0x84>
  405590:	2a14      	cmp	r2, #20
  405592:	d816      	bhi.n	4055c2 <_free_r+0x16e>
  405594:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405598:	00ff      	lsls	r7, r7, #3
  40559a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40559e:	e7aa      	b.n	4054f6 <_free_r+0xa2>
  4055a0:	10aa      	asrs	r2, r5, #2
  4055a2:	2301      	movs	r3, #1
  4055a4:	684d      	ldr	r5, [r1, #4]
  4055a6:	4093      	lsls	r3, r2
  4055a8:	432b      	orrs	r3, r5
  4055aa:	604b      	str	r3, [r1, #4]
  4055ac:	4603      	mov	r3, r0
  4055ae:	e7b0      	b.n	405512 <_free_r+0xbe>
  4055b0:	f043 0201 	orr.w	r2, r3, #1
  4055b4:	614c      	str	r4, [r1, #20]
  4055b6:	610c      	str	r4, [r1, #16]
  4055b8:	60e5      	str	r5, [r4, #12]
  4055ba:	60a5      	str	r5, [r4, #8]
  4055bc:	6062      	str	r2, [r4, #4]
  4055be:	50e3      	str	r3, [r4, r3]
  4055c0:	e78a      	b.n	4054d8 <_free_r+0x84>
  4055c2:	2a54      	cmp	r2, #84	; 0x54
  4055c4:	d806      	bhi.n	4055d4 <_free_r+0x180>
  4055c6:	0b1a      	lsrs	r2, r3, #12
  4055c8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4055cc:	00ff      	lsls	r7, r7, #3
  4055ce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4055d2:	e790      	b.n	4054f6 <_free_r+0xa2>
  4055d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4055d8:	d806      	bhi.n	4055e8 <_free_r+0x194>
  4055da:	0bda      	lsrs	r2, r3, #15
  4055dc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4055e0:	00ff      	lsls	r7, r7, #3
  4055e2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4055e6:	e786      	b.n	4054f6 <_free_r+0xa2>
  4055e8:	f240 5054 	movw	r0, #1364	; 0x554
  4055ec:	4282      	cmp	r2, r0
  4055ee:	d806      	bhi.n	4055fe <_free_r+0x1aa>
  4055f0:	0c9a      	lsrs	r2, r3, #18
  4055f2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4055f6:	00ff      	lsls	r7, r7, #3
  4055f8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4055fc:	e77b      	b.n	4054f6 <_free_r+0xa2>
  4055fe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405602:	257e      	movs	r5, #126	; 0x7e
  405604:	e777      	b.n	4054f6 <_free_r+0xa2>
  405606:	f043 0101 	orr.w	r1, r3, #1
  40560a:	6061      	str	r1, [r4, #4]
  40560c:	6013      	str	r3, [r2, #0]
  40560e:	e763      	b.n	4054d8 <_free_r+0x84>
  405610:	20400438 	.word	0x20400438
  405614:	20400440 	.word	0x20400440
  405618:	20400844 	.word	0x20400844
  40561c:	20400bd0 	.word	0x20400bd0

00405620 <__sfvwrite_r>:
  405620:	6893      	ldr	r3, [r2, #8]
  405622:	2b00      	cmp	r3, #0
  405624:	d073      	beq.n	40570e <__sfvwrite_r+0xee>
  405626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40562a:	898b      	ldrh	r3, [r1, #12]
  40562c:	b083      	sub	sp, #12
  40562e:	460c      	mov	r4, r1
  405630:	0719      	lsls	r1, r3, #28
  405632:	9000      	str	r0, [sp, #0]
  405634:	4616      	mov	r6, r2
  405636:	d526      	bpl.n	405686 <__sfvwrite_r+0x66>
  405638:	6922      	ldr	r2, [r4, #16]
  40563a:	b322      	cbz	r2, 405686 <__sfvwrite_r+0x66>
  40563c:	f013 0002 	ands.w	r0, r3, #2
  405640:	6835      	ldr	r5, [r6, #0]
  405642:	d02c      	beq.n	40569e <__sfvwrite_r+0x7e>
  405644:	f04f 0900 	mov.w	r9, #0
  405648:	4fb0      	ldr	r7, [pc, #704]	; (40590c <__sfvwrite_r+0x2ec>)
  40564a:	46c8      	mov	r8, r9
  40564c:	46b2      	mov	sl, r6
  40564e:	45b8      	cmp	r8, r7
  405650:	4643      	mov	r3, r8
  405652:	464a      	mov	r2, r9
  405654:	bf28      	it	cs
  405656:	463b      	movcs	r3, r7
  405658:	9800      	ldr	r0, [sp, #0]
  40565a:	f1b8 0f00 	cmp.w	r8, #0
  40565e:	d050      	beq.n	405702 <__sfvwrite_r+0xe2>
  405660:	69e1      	ldr	r1, [r4, #28]
  405662:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405664:	47b0      	blx	r6
  405666:	2800      	cmp	r0, #0
  405668:	dd58      	ble.n	40571c <__sfvwrite_r+0xfc>
  40566a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40566e:	1a1b      	subs	r3, r3, r0
  405670:	4481      	add	r9, r0
  405672:	eba8 0800 	sub.w	r8, r8, r0
  405676:	f8ca 3008 	str.w	r3, [sl, #8]
  40567a:	2b00      	cmp	r3, #0
  40567c:	d1e7      	bne.n	40564e <__sfvwrite_r+0x2e>
  40567e:	2000      	movs	r0, #0
  405680:	b003      	add	sp, #12
  405682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405686:	4621      	mov	r1, r4
  405688:	9800      	ldr	r0, [sp, #0]
  40568a:	f7ff fc51 	bl	404f30 <__swsetup_r>
  40568e:	2800      	cmp	r0, #0
  405690:	f040 8133 	bne.w	4058fa <__sfvwrite_r+0x2da>
  405694:	89a3      	ldrh	r3, [r4, #12]
  405696:	6835      	ldr	r5, [r6, #0]
  405698:	f013 0002 	ands.w	r0, r3, #2
  40569c:	d1d2      	bne.n	405644 <__sfvwrite_r+0x24>
  40569e:	f013 0901 	ands.w	r9, r3, #1
  4056a2:	d145      	bne.n	405730 <__sfvwrite_r+0x110>
  4056a4:	464f      	mov	r7, r9
  4056a6:	9601      	str	r6, [sp, #4]
  4056a8:	b337      	cbz	r7, 4056f8 <__sfvwrite_r+0xd8>
  4056aa:	059a      	lsls	r2, r3, #22
  4056ac:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4056b0:	f140 8083 	bpl.w	4057ba <__sfvwrite_r+0x19a>
  4056b4:	4547      	cmp	r7, r8
  4056b6:	46c3      	mov	fp, r8
  4056b8:	f0c0 80ab 	bcc.w	405812 <__sfvwrite_r+0x1f2>
  4056bc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4056c0:	f040 80ac 	bne.w	40581c <__sfvwrite_r+0x1fc>
  4056c4:	6820      	ldr	r0, [r4, #0]
  4056c6:	46ba      	mov	sl, r7
  4056c8:	465a      	mov	r2, fp
  4056ca:	4649      	mov	r1, r9
  4056cc:	f000 fa40 	bl	405b50 <memmove>
  4056d0:	68a2      	ldr	r2, [r4, #8]
  4056d2:	6823      	ldr	r3, [r4, #0]
  4056d4:	eba2 0208 	sub.w	r2, r2, r8
  4056d8:	445b      	add	r3, fp
  4056da:	60a2      	str	r2, [r4, #8]
  4056dc:	6023      	str	r3, [r4, #0]
  4056de:	9a01      	ldr	r2, [sp, #4]
  4056e0:	6893      	ldr	r3, [r2, #8]
  4056e2:	eba3 030a 	sub.w	r3, r3, sl
  4056e6:	44d1      	add	r9, sl
  4056e8:	eba7 070a 	sub.w	r7, r7, sl
  4056ec:	6093      	str	r3, [r2, #8]
  4056ee:	2b00      	cmp	r3, #0
  4056f0:	d0c5      	beq.n	40567e <__sfvwrite_r+0x5e>
  4056f2:	89a3      	ldrh	r3, [r4, #12]
  4056f4:	2f00      	cmp	r7, #0
  4056f6:	d1d8      	bne.n	4056aa <__sfvwrite_r+0x8a>
  4056f8:	f8d5 9000 	ldr.w	r9, [r5]
  4056fc:	686f      	ldr	r7, [r5, #4]
  4056fe:	3508      	adds	r5, #8
  405700:	e7d2      	b.n	4056a8 <__sfvwrite_r+0x88>
  405702:	f8d5 9000 	ldr.w	r9, [r5]
  405706:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40570a:	3508      	adds	r5, #8
  40570c:	e79f      	b.n	40564e <__sfvwrite_r+0x2e>
  40570e:	2000      	movs	r0, #0
  405710:	4770      	bx	lr
  405712:	4621      	mov	r1, r4
  405714:	9800      	ldr	r0, [sp, #0]
  405716:	f7ff fd1f 	bl	405158 <_fflush_r>
  40571a:	b370      	cbz	r0, 40577a <__sfvwrite_r+0x15a>
  40571c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405724:	f04f 30ff 	mov.w	r0, #4294967295
  405728:	81a3      	strh	r3, [r4, #12]
  40572a:	b003      	add	sp, #12
  40572c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405730:	4681      	mov	r9, r0
  405732:	4633      	mov	r3, r6
  405734:	464e      	mov	r6, r9
  405736:	46a8      	mov	r8, r5
  405738:	469a      	mov	sl, r3
  40573a:	464d      	mov	r5, r9
  40573c:	b34e      	cbz	r6, 405792 <__sfvwrite_r+0x172>
  40573e:	b380      	cbz	r0, 4057a2 <__sfvwrite_r+0x182>
  405740:	6820      	ldr	r0, [r4, #0]
  405742:	6923      	ldr	r3, [r4, #16]
  405744:	6962      	ldr	r2, [r4, #20]
  405746:	45b1      	cmp	r9, r6
  405748:	46cb      	mov	fp, r9
  40574a:	bf28      	it	cs
  40574c:	46b3      	movcs	fp, r6
  40574e:	4298      	cmp	r0, r3
  405750:	465f      	mov	r7, fp
  405752:	d904      	bls.n	40575e <__sfvwrite_r+0x13e>
  405754:	68a3      	ldr	r3, [r4, #8]
  405756:	4413      	add	r3, r2
  405758:	459b      	cmp	fp, r3
  40575a:	f300 80a6 	bgt.w	4058aa <__sfvwrite_r+0x28a>
  40575e:	4593      	cmp	fp, r2
  405760:	db4b      	blt.n	4057fa <__sfvwrite_r+0x1da>
  405762:	4613      	mov	r3, r2
  405764:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405766:	69e1      	ldr	r1, [r4, #28]
  405768:	9800      	ldr	r0, [sp, #0]
  40576a:	462a      	mov	r2, r5
  40576c:	47b8      	blx	r7
  40576e:	1e07      	subs	r7, r0, #0
  405770:	ddd4      	ble.n	40571c <__sfvwrite_r+0xfc>
  405772:	ebb9 0907 	subs.w	r9, r9, r7
  405776:	d0cc      	beq.n	405712 <__sfvwrite_r+0xf2>
  405778:	2001      	movs	r0, #1
  40577a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40577e:	1bdb      	subs	r3, r3, r7
  405780:	443d      	add	r5, r7
  405782:	1bf6      	subs	r6, r6, r7
  405784:	f8ca 3008 	str.w	r3, [sl, #8]
  405788:	2b00      	cmp	r3, #0
  40578a:	f43f af78 	beq.w	40567e <__sfvwrite_r+0x5e>
  40578e:	2e00      	cmp	r6, #0
  405790:	d1d5      	bne.n	40573e <__sfvwrite_r+0x11e>
  405792:	f108 0308 	add.w	r3, r8, #8
  405796:	e913 0060 	ldmdb	r3, {r5, r6}
  40579a:	4698      	mov	r8, r3
  40579c:	3308      	adds	r3, #8
  40579e:	2e00      	cmp	r6, #0
  4057a0:	d0f9      	beq.n	405796 <__sfvwrite_r+0x176>
  4057a2:	4632      	mov	r2, r6
  4057a4:	210a      	movs	r1, #10
  4057a6:	4628      	mov	r0, r5
  4057a8:	f000 f982 	bl	405ab0 <memchr>
  4057ac:	2800      	cmp	r0, #0
  4057ae:	f000 80a1 	beq.w	4058f4 <__sfvwrite_r+0x2d4>
  4057b2:	3001      	adds	r0, #1
  4057b4:	eba0 0905 	sub.w	r9, r0, r5
  4057b8:	e7c2      	b.n	405740 <__sfvwrite_r+0x120>
  4057ba:	6820      	ldr	r0, [r4, #0]
  4057bc:	6923      	ldr	r3, [r4, #16]
  4057be:	4298      	cmp	r0, r3
  4057c0:	d802      	bhi.n	4057c8 <__sfvwrite_r+0x1a8>
  4057c2:	6963      	ldr	r3, [r4, #20]
  4057c4:	429f      	cmp	r7, r3
  4057c6:	d25d      	bcs.n	405884 <__sfvwrite_r+0x264>
  4057c8:	45b8      	cmp	r8, r7
  4057ca:	bf28      	it	cs
  4057cc:	46b8      	movcs	r8, r7
  4057ce:	4642      	mov	r2, r8
  4057d0:	4649      	mov	r1, r9
  4057d2:	f000 f9bd 	bl	405b50 <memmove>
  4057d6:	68a3      	ldr	r3, [r4, #8]
  4057d8:	6822      	ldr	r2, [r4, #0]
  4057da:	eba3 0308 	sub.w	r3, r3, r8
  4057de:	4442      	add	r2, r8
  4057e0:	60a3      	str	r3, [r4, #8]
  4057e2:	6022      	str	r2, [r4, #0]
  4057e4:	b10b      	cbz	r3, 4057ea <__sfvwrite_r+0x1ca>
  4057e6:	46c2      	mov	sl, r8
  4057e8:	e779      	b.n	4056de <__sfvwrite_r+0xbe>
  4057ea:	4621      	mov	r1, r4
  4057ec:	9800      	ldr	r0, [sp, #0]
  4057ee:	f7ff fcb3 	bl	405158 <_fflush_r>
  4057f2:	2800      	cmp	r0, #0
  4057f4:	d192      	bne.n	40571c <__sfvwrite_r+0xfc>
  4057f6:	46c2      	mov	sl, r8
  4057f8:	e771      	b.n	4056de <__sfvwrite_r+0xbe>
  4057fa:	465a      	mov	r2, fp
  4057fc:	4629      	mov	r1, r5
  4057fe:	f000 f9a7 	bl	405b50 <memmove>
  405802:	68a2      	ldr	r2, [r4, #8]
  405804:	6823      	ldr	r3, [r4, #0]
  405806:	eba2 020b 	sub.w	r2, r2, fp
  40580a:	445b      	add	r3, fp
  40580c:	60a2      	str	r2, [r4, #8]
  40580e:	6023      	str	r3, [r4, #0]
  405810:	e7af      	b.n	405772 <__sfvwrite_r+0x152>
  405812:	6820      	ldr	r0, [r4, #0]
  405814:	46b8      	mov	r8, r7
  405816:	46ba      	mov	sl, r7
  405818:	46bb      	mov	fp, r7
  40581a:	e755      	b.n	4056c8 <__sfvwrite_r+0xa8>
  40581c:	6962      	ldr	r2, [r4, #20]
  40581e:	6820      	ldr	r0, [r4, #0]
  405820:	6921      	ldr	r1, [r4, #16]
  405822:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405826:	eba0 0a01 	sub.w	sl, r0, r1
  40582a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40582e:	f10a 0001 	add.w	r0, sl, #1
  405832:	ea4f 0868 	mov.w	r8, r8, asr #1
  405836:	4438      	add	r0, r7
  405838:	4540      	cmp	r0, r8
  40583a:	4642      	mov	r2, r8
  40583c:	bf84      	itt	hi
  40583e:	4680      	movhi	r8, r0
  405840:	4642      	movhi	r2, r8
  405842:	055b      	lsls	r3, r3, #21
  405844:	d544      	bpl.n	4058d0 <__sfvwrite_r+0x2b0>
  405846:	4611      	mov	r1, r2
  405848:	9800      	ldr	r0, [sp, #0]
  40584a:	f7fd ff99 	bl	403780 <_malloc_r>
  40584e:	4683      	mov	fp, r0
  405850:	2800      	cmp	r0, #0
  405852:	d055      	beq.n	405900 <__sfvwrite_r+0x2e0>
  405854:	4652      	mov	r2, sl
  405856:	6921      	ldr	r1, [r4, #16]
  405858:	f7fe fa42 	bl	403ce0 <memcpy>
  40585c:	89a3      	ldrh	r3, [r4, #12]
  40585e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405866:	81a3      	strh	r3, [r4, #12]
  405868:	eb0b 000a 	add.w	r0, fp, sl
  40586c:	eba8 030a 	sub.w	r3, r8, sl
  405870:	f8c4 b010 	str.w	fp, [r4, #16]
  405874:	f8c4 8014 	str.w	r8, [r4, #20]
  405878:	6020      	str	r0, [r4, #0]
  40587a:	60a3      	str	r3, [r4, #8]
  40587c:	46b8      	mov	r8, r7
  40587e:	46ba      	mov	sl, r7
  405880:	46bb      	mov	fp, r7
  405882:	e721      	b.n	4056c8 <__sfvwrite_r+0xa8>
  405884:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405888:	42b9      	cmp	r1, r7
  40588a:	bf28      	it	cs
  40588c:	4639      	movcs	r1, r7
  40588e:	464a      	mov	r2, r9
  405890:	fb91 f1f3 	sdiv	r1, r1, r3
  405894:	9800      	ldr	r0, [sp, #0]
  405896:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405898:	fb03 f301 	mul.w	r3, r3, r1
  40589c:	69e1      	ldr	r1, [r4, #28]
  40589e:	47b0      	blx	r6
  4058a0:	f1b0 0a00 	subs.w	sl, r0, #0
  4058a4:	f73f af1b 	bgt.w	4056de <__sfvwrite_r+0xbe>
  4058a8:	e738      	b.n	40571c <__sfvwrite_r+0xfc>
  4058aa:	461a      	mov	r2, r3
  4058ac:	4629      	mov	r1, r5
  4058ae:	9301      	str	r3, [sp, #4]
  4058b0:	f000 f94e 	bl	405b50 <memmove>
  4058b4:	6822      	ldr	r2, [r4, #0]
  4058b6:	9b01      	ldr	r3, [sp, #4]
  4058b8:	9800      	ldr	r0, [sp, #0]
  4058ba:	441a      	add	r2, r3
  4058bc:	6022      	str	r2, [r4, #0]
  4058be:	4621      	mov	r1, r4
  4058c0:	f7ff fc4a 	bl	405158 <_fflush_r>
  4058c4:	9b01      	ldr	r3, [sp, #4]
  4058c6:	2800      	cmp	r0, #0
  4058c8:	f47f af28 	bne.w	40571c <__sfvwrite_r+0xfc>
  4058cc:	461f      	mov	r7, r3
  4058ce:	e750      	b.n	405772 <__sfvwrite_r+0x152>
  4058d0:	9800      	ldr	r0, [sp, #0]
  4058d2:	f000 f9a1 	bl	405c18 <_realloc_r>
  4058d6:	4683      	mov	fp, r0
  4058d8:	2800      	cmp	r0, #0
  4058da:	d1c5      	bne.n	405868 <__sfvwrite_r+0x248>
  4058dc:	9d00      	ldr	r5, [sp, #0]
  4058de:	6921      	ldr	r1, [r4, #16]
  4058e0:	4628      	mov	r0, r5
  4058e2:	f7ff fdb7 	bl	405454 <_free_r>
  4058e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4058ea:	220c      	movs	r2, #12
  4058ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4058f0:	602a      	str	r2, [r5, #0]
  4058f2:	e715      	b.n	405720 <__sfvwrite_r+0x100>
  4058f4:	f106 0901 	add.w	r9, r6, #1
  4058f8:	e722      	b.n	405740 <__sfvwrite_r+0x120>
  4058fa:	f04f 30ff 	mov.w	r0, #4294967295
  4058fe:	e6bf      	b.n	405680 <__sfvwrite_r+0x60>
  405900:	9a00      	ldr	r2, [sp, #0]
  405902:	230c      	movs	r3, #12
  405904:	6013      	str	r3, [r2, #0]
  405906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40590a:	e709      	b.n	405720 <__sfvwrite_r+0x100>
  40590c:	7ffffc00 	.word	0x7ffffc00

00405910 <_fwalk_reent>:
  405910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405914:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405918:	d01f      	beq.n	40595a <_fwalk_reent+0x4a>
  40591a:	4688      	mov	r8, r1
  40591c:	4606      	mov	r6, r0
  40591e:	f04f 0900 	mov.w	r9, #0
  405922:	687d      	ldr	r5, [r7, #4]
  405924:	68bc      	ldr	r4, [r7, #8]
  405926:	3d01      	subs	r5, #1
  405928:	d411      	bmi.n	40594e <_fwalk_reent+0x3e>
  40592a:	89a3      	ldrh	r3, [r4, #12]
  40592c:	2b01      	cmp	r3, #1
  40592e:	f105 35ff 	add.w	r5, r5, #4294967295
  405932:	d908      	bls.n	405946 <_fwalk_reent+0x36>
  405934:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  405938:	3301      	adds	r3, #1
  40593a:	4621      	mov	r1, r4
  40593c:	4630      	mov	r0, r6
  40593e:	d002      	beq.n	405946 <_fwalk_reent+0x36>
  405940:	47c0      	blx	r8
  405942:	ea49 0900 	orr.w	r9, r9, r0
  405946:	1c6b      	adds	r3, r5, #1
  405948:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40594c:	d1ed      	bne.n	40592a <_fwalk_reent+0x1a>
  40594e:	683f      	ldr	r7, [r7, #0]
  405950:	2f00      	cmp	r7, #0
  405952:	d1e6      	bne.n	405922 <_fwalk_reent+0x12>
  405954:	4648      	mov	r0, r9
  405956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40595a:	46b9      	mov	r9, r7
  40595c:	4648      	mov	r0, r9
  40595e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405962:	bf00      	nop

00405964 <__locale_mb_cur_max>:
  405964:	4b04      	ldr	r3, [pc, #16]	; (405978 <__locale_mb_cur_max+0x14>)
  405966:	4a05      	ldr	r2, [pc, #20]	; (40597c <__locale_mb_cur_max+0x18>)
  405968:	681b      	ldr	r3, [r3, #0]
  40596a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40596c:	2b00      	cmp	r3, #0
  40596e:	bf08      	it	eq
  405970:	4613      	moveq	r3, r2
  405972:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  405976:	4770      	bx	lr
  405978:	2040000c 	.word	0x2040000c
  40597c:	2040084c 	.word	0x2040084c

00405980 <__retarget_lock_init_recursive>:
  405980:	4770      	bx	lr
  405982:	bf00      	nop

00405984 <__retarget_lock_close_recursive>:
  405984:	4770      	bx	lr
  405986:	bf00      	nop

00405988 <__retarget_lock_acquire_recursive>:
  405988:	4770      	bx	lr
  40598a:	bf00      	nop

0040598c <__retarget_lock_release_recursive>:
  40598c:	4770      	bx	lr
  40598e:	bf00      	nop

00405990 <__swhatbuf_r>:
  405990:	b570      	push	{r4, r5, r6, lr}
  405992:	460c      	mov	r4, r1
  405994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405998:	2900      	cmp	r1, #0
  40599a:	b090      	sub	sp, #64	; 0x40
  40599c:	4615      	mov	r5, r2
  40599e:	461e      	mov	r6, r3
  4059a0:	db14      	blt.n	4059cc <__swhatbuf_r+0x3c>
  4059a2:	aa01      	add	r2, sp, #4
  4059a4:	f000 fc9e 	bl	4062e4 <_fstat_r>
  4059a8:	2800      	cmp	r0, #0
  4059aa:	db0f      	blt.n	4059cc <__swhatbuf_r+0x3c>
  4059ac:	9a02      	ldr	r2, [sp, #8]
  4059ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4059b2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4059b6:	fab2 f282 	clz	r2, r2
  4059ba:	0952      	lsrs	r2, r2, #5
  4059bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4059c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4059c4:	6032      	str	r2, [r6, #0]
  4059c6:	602b      	str	r3, [r5, #0]
  4059c8:	b010      	add	sp, #64	; 0x40
  4059ca:	bd70      	pop	{r4, r5, r6, pc}
  4059cc:	89a2      	ldrh	r2, [r4, #12]
  4059ce:	2300      	movs	r3, #0
  4059d0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4059d4:	6033      	str	r3, [r6, #0]
  4059d6:	d004      	beq.n	4059e2 <__swhatbuf_r+0x52>
  4059d8:	2240      	movs	r2, #64	; 0x40
  4059da:	4618      	mov	r0, r3
  4059dc:	602a      	str	r2, [r5, #0]
  4059de:	b010      	add	sp, #64	; 0x40
  4059e0:	bd70      	pop	{r4, r5, r6, pc}
  4059e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4059e6:	602b      	str	r3, [r5, #0]
  4059e8:	b010      	add	sp, #64	; 0x40
  4059ea:	bd70      	pop	{r4, r5, r6, pc}

004059ec <__smakebuf_r>:
  4059ec:	898a      	ldrh	r2, [r1, #12]
  4059ee:	0792      	lsls	r2, r2, #30
  4059f0:	460b      	mov	r3, r1
  4059f2:	d506      	bpl.n	405a02 <__smakebuf_r+0x16>
  4059f4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4059f8:	2101      	movs	r1, #1
  4059fa:	601a      	str	r2, [r3, #0]
  4059fc:	611a      	str	r2, [r3, #16]
  4059fe:	6159      	str	r1, [r3, #20]
  405a00:	4770      	bx	lr
  405a02:	b5f0      	push	{r4, r5, r6, r7, lr}
  405a04:	b083      	sub	sp, #12
  405a06:	ab01      	add	r3, sp, #4
  405a08:	466a      	mov	r2, sp
  405a0a:	460c      	mov	r4, r1
  405a0c:	4606      	mov	r6, r0
  405a0e:	f7ff ffbf 	bl	405990 <__swhatbuf_r>
  405a12:	9900      	ldr	r1, [sp, #0]
  405a14:	4605      	mov	r5, r0
  405a16:	4630      	mov	r0, r6
  405a18:	f7fd feb2 	bl	403780 <_malloc_r>
  405a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405a20:	b1d8      	cbz	r0, 405a5a <__smakebuf_r+0x6e>
  405a22:	9a01      	ldr	r2, [sp, #4]
  405a24:	4f15      	ldr	r7, [pc, #84]	; (405a7c <__smakebuf_r+0x90>)
  405a26:	9900      	ldr	r1, [sp, #0]
  405a28:	63f7      	str	r7, [r6, #60]	; 0x3c
  405a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405a2e:	81a3      	strh	r3, [r4, #12]
  405a30:	6020      	str	r0, [r4, #0]
  405a32:	6120      	str	r0, [r4, #16]
  405a34:	6161      	str	r1, [r4, #20]
  405a36:	b91a      	cbnz	r2, 405a40 <__smakebuf_r+0x54>
  405a38:	432b      	orrs	r3, r5
  405a3a:	81a3      	strh	r3, [r4, #12]
  405a3c:	b003      	add	sp, #12
  405a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405a40:	4630      	mov	r0, r6
  405a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405a46:	f000 fc61 	bl	40630c <_isatty_r>
  405a4a:	b1a0      	cbz	r0, 405a76 <__smakebuf_r+0x8a>
  405a4c:	89a3      	ldrh	r3, [r4, #12]
  405a4e:	f023 0303 	bic.w	r3, r3, #3
  405a52:	f043 0301 	orr.w	r3, r3, #1
  405a56:	b21b      	sxth	r3, r3
  405a58:	e7ee      	b.n	405a38 <__smakebuf_r+0x4c>
  405a5a:	059a      	lsls	r2, r3, #22
  405a5c:	d4ee      	bmi.n	405a3c <__smakebuf_r+0x50>
  405a5e:	f023 0303 	bic.w	r3, r3, #3
  405a62:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405a66:	f043 0302 	orr.w	r3, r3, #2
  405a6a:	2101      	movs	r1, #1
  405a6c:	81a3      	strh	r3, [r4, #12]
  405a6e:	6022      	str	r2, [r4, #0]
  405a70:	6122      	str	r2, [r4, #16]
  405a72:	6161      	str	r1, [r4, #20]
  405a74:	e7e2      	b.n	405a3c <__smakebuf_r+0x50>
  405a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405a7a:	e7dd      	b.n	405a38 <__smakebuf_r+0x4c>
  405a7c:	004051ad 	.word	0x004051ad

00405a80 <__ascii_mbtowc>:
  405a80:	b082      	sub	sp, #8
  405a82:	b149      	cbz	r1, 405a98 <__ascii_mbtowc+0x18>
  405a84:	b15a      	cbz	r2, 405a9e <__ascii_mbtowc+0x1e>
  405a86:	b16b      	cbz	r3, 405aa4 <__ascii_mbtowc+0x24>
  405a88:	7813      	ldrb	r3, [r2, #0]
  405a8a:	600b      	str	r3, [r1, #0]
  405a8c:	7812      	ldrb	r2, [r2, #0]
  405a8e:	1c10      	adds	r0, r2, #0
  405a90:	bf18      	it	ne
  405a92:	2001      	movne	r0, #1
  405a94:	b002      	add	sp, #8
  405a96:	4770      	bx	lr
  405a98:	a901      	add	r1, sp, #4
  405a9a:	2a00      	cmp	r2, #0
  405a9c:	d1f3      	bne.n	405a86 <__ascii_mbtowc+0x6>
  405a9e:	4610      	mov	r0, r2
  405aa0:	b002      	add	sp, #8
  405aa2:	4770      	bx	lr
  405aa4:	f06f 0001 	mvn.w	r0, #1
  405aa8:	e7f4      	b.n	405a94 <__ascii_mbtowc+0x14>
  405aaa:	bf00      	nop
  405aac:	0000      	movs	r0, r0
	...

00405ab0 <memchr>:
  405ab0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405ab4:	2a10      	cmp	r2, #16
  405ab6:	db2b      	blt.n	405b10 <memchr+0x60>
  405ab8:	f010 0f07 	tst.w	r0, #7
  405abc:	d008      	beq.n	405ad0 <memchr+0x20>
  405abe:	f810 3b01 	ldrb.w	r3, [r0], #1
  405ac2:	3a01      	subs	r2, #1
  405ac4:	428b      	cmp	r3, r1
  405ac6:	d02d      	beq.n	405b24 <memchr+0x74>
  405ac8:	f010 0f07 	tst.w	r0, #7
  405acc:	b342      	cbz	r2, 405b20 <memchr+0x70>
  405ace:	d1f6      	bne.n	405abe <memchr+0xe>
  405ad0:	b4f0      	push	{r4, r5, r6, r7}
  405ad2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405ad6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405ada:	f022 0407 	bic.w	r4, r2, #7
  405ade:	f07f 0700 	mvns.w	r7, #0
  405ae2:	2300      	movs	r3, #0
  405ae4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405ae8:	3c08      	subs	r4, #8
  405aea:	ea85 0501 	eor.w	r5, r5, r1
  405aee:	ea86 0601 	eor.w	r6, r6, r1
  405af2:	fa85 f547 	uadd8	r5, r5, r7
  405af6:	faa3 f587 	sel	r5, r3, r7
  405afa:	fa86 f647 	uadd8	r6, r6, r7
  405afe:	faa5 f687 	sel	r6, r5, r7
  405b02:	b98e      	cbnz	r6, 405b28 <memchr+0x78>
  405b04:	d1ee      	bne.n	405ae4 <memchr+0x34>
  405b06:	bcf0      	pop	{r4, r5, r6, r7}
  405b08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405b0c:	f002 0207 	and.w	r2, r2, #7
  405b10:	b132      	cbz	r2, 405b20 <memchr+0x70>
  405b12:	f810 3b01 	ldrb.w	r3, [r0], #1
  405b16:	3a01      	subs	r2, #1
  405b18:	ea83 0301 	eor.w	r3, r3, r1
  405b1c:	b113      	cbz	r3, 405b24 <memchr+0x74>
  405b1e:	d1f8      	bne.n	405b12 <memchr+0x62>
  405b20:	2000      	movs	r0, #0
  405b22:	4770      	bx	lr
  405b24:	3801      	subs	r0, #1
  405b26:	4770      	bx	lr
  405b28:	2d00      	cmp	r5, #0
  405b2a:	bf06      	itte	eq
  405b2c:	4635      	moveq	r5, r6
  405b2e:	3803      	subeq	r0, #3
  405b30:	3807      	subne	r0, #7
  405b32:	f015 0f01 	tst.w	r5, #1
  405b36:	d107      	bne.n	405b48 <memchr+0x98>
  405b38:	3001      	adds	r0, #1
  405b3a:	f415 7f80 	tst.w	r5, #256	; 0x100
  405b3e:	bf02      	ittt	eq
  405b40:	3001      	addeq	r0, #1
  405b42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405b46:	3001      	addeq	r0, #1
  405b48:	bcf0      	pop	{r4, r5, r6, r7}
  405b4a:	3801      	subs	r0, #1
  405b4c:	4770      	bx	lr
  405b4e:	bf00      	nop

00405b50 <memmove>:
  405b50:	4288      	cmp	r0, r1
  405b52:	b5f0      	push	{r4, r5, r6, r7, lr}
  405b54:	d90d      	bls.n	405b72 <memmove+0x22>
  405b56:	188b      	adds	r3, r1, r2
  405b58:	4298      	cmp	r0, r3
  405b5a:	d20a      	bcs.n	405b72 <memmove+0x22>
  405b5c:	1884      	adds	r4, r0, r2
  405b5e:	2a00      	cmp	r2, #0
  405b60:	d051      	beq.n	405c06 <memmove+0xb6>
  405b62:	4622      	mov	r2, r4
  405b64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405b68:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405b6c:	4299      	cmp	r1, r3
  405b6e:	d1f9      	bne.n	405b64 <memmove+0x14>
  405b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405b72:	2a0f      	cmp	r2, #15
  405b74:	d948      	bls.n	405c08 <memmove+0xb8>
  405b76:	ea41 0300 	orr.w	r3, r1, r0
  405b7a:	079b      	lsls	r3, r3, #30
  405b7c:	d146      	bne.n	405c0c <memmove+0xbc>
  405b7e:	f100 0410 	add.w	r4, r0, #16
  405b82:	f101 0310 	add.w	r3, r1, #16
  405b86:	4615      	mov	r5, r2
  405b88:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405b8c:	f844 6c10 	str.w	r6, [r4, #-16]
  405b90:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405b94:	f844 6c0c 	str.w	r6, [r4, #-12]
  405b98:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405b9c:	f844 6c08 	str.w	r6, [r4, #-8]
  405ba0:	3d10      	subs	r5, #16
  405ba2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405ba6:	f844 6c04 	str.w	r6, [r4, #-4]
  405baa:	2d0f      	cmp	r5, #15
  405bac:	f103 0310 	add.w	r3, r3, #16
  405bb0:	f104 0410 	add.w	r4, r4, #16
  405bb4:	d8e8      	bhi.n	405b88 <memmove+0x38>
  405bb6:	f1a2 0310 	sub.w	r3, r2, #16
  405bba:	f023 030f 	bic.w	r3, r3, #15
  405bbe:	f002 0e0f 	and.w	lr, r2, #15
  405bc2:	3310      	adds	r3, #16
  405bc4:	f1be 0f03 	cmp.w	lr, #3
  405bc8:	4419      	add	r1, r3
  405bca:	4403      	add	r3, r0
  405bcc:	d921      	bls.n	405c12 <memmove+0xc2>
  405bce:	1f1e      	subs	r6, r3, #4
  405bd0:	460d      	mov	r5, r1
  405bd2:	4674      	mov	r4, lr
  405bd4:	3c04      	subs	r4, #4
  405bd6:	f855 7b04 	ldr.w	r7, [r5], #4
  405bda:	f846 7f04 	str.w	r7, [r6, #4]!
  405bde:	2c03      	cmp	r4, #3
  405be0:	d8f8      	bhi.n	405bd4 <memmove+0x84>
  405be2:	f1ae 0404 	sub.w	r4, lr, #4
  405be6:	f024 0403 	bic.w	r4, r4, #3
  405bea:	3404      	adds	r4, #4
  405bec:	4421      	add	r1, r4
  405bee:	4423      	add	r3, r4
  405bf0:	f002 0203 	and.w	r2, r2, #3
  405bf4:	b162      	cbz	r2, 405c10 <memmove+0xc0>
  405bf6:	3b01      	subs	r3, #1
  405bf8:	440a      	add	r2, r1
  405bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
  405bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
  405c02:	428a      	cmp	r2, r1
  405c04:	d1f9      	bne.n	405bfa <memmove+0xaa>
  405c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405c08:	4603      	mov	r3, r0
  405c0a:	e7f3      	b.n	405bf4 <memmove+0xa4>
  405c0c:	4603      	mov	r3, r0
  405c0e:	e7f2      	b.n	405bf6 <memmove+0xa6>
  405c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405c12:	4672      	mov	r2, lr
  405c14:	e7ee      	b.n	405bf4 <memmove+0xa4>
  405c16:	bf00      	nop

00405c18 <_realloc_r>:
  405c18:	2900      	cmp	r1, #0
  405c1a:	f000 8095 	beq.w	405d48 <_realloc_r+0x130>
  405c1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405c22:	460d      	mov	r5, r1
  405c24:	4616      	mov	r6, r2
  405c26:	b083      	sub	sp, #12
  405c28:	4680      	mov	r8, r0
  405c2a:	f106 070b 	add.w	r7, r6, #11
  405c2e:	f7fe f93f 	bl	403eb0 <__malloc_lock>
  405c32:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405c36:	2f16      	cmp	r7, #22
  405c38:	f02e 0403 	bic.w	r4, lr, #3
  405c3c:	f1a5 0908 	sub.w	r9, r5, #8
  405c40:	d83c      	bhi.n	405cbc <_realloc_r+0xa4>
  405c42:	2210      	movs	r2, #16
  405c44:	4617      	mov	r7, r2
  405c46:	42be      	cmp	r6, r7
  405c48:	d83d      	bhi.n	405cc6 <_realloc_r+0xae>
  405c4a:	4294      	cmp	r4, r2
  405c4c:	da43      	bge.n	405cd6 <_realloc_r+0xbe>
  405c4e:	4bc4      	ldr	r3, [pc, #784]	; (405f60 <_realloc_r+0x348>)
  405c50:	6899      	ldr	r1, [r3, #8]
  405c52:	eb09 0004 	add.w	r0, r9, r4
  405c56:	4288      	cmp	r0, r1
  405c58:	f000 80b4 	beq.w	405dc4 <_realloc_r+0x1ac>
  405c5c:	6843      	ldr	r3, [r0, #4]
  405c5e:	f023 0101 	bic.w	r1, r3, #1
  405c62:	4401      	add	r1, r0
  405c64:	6849      	ldr	r1, [r1, #4]
  405c66:	07c9      	lsls	r1, r1, #31
  405c68:	d54c      	bpl.n	405d04 <_realloc_r+0xec>
  405c6a:	f01e 0f01 	tst.w	lr, #1
  405c6e:	f000 809b 	beq.w	405da8 <_realloc_r+0x190>
  405c72:	4631      	mov	r1, r6
  405c74:	4640      	mov	r0, r8
  405c76:	f7fd fd83 	bl	403780 <_malloc_r>
  405c7a:	4606      	mov	r6, r0
  405c7c:	2800      	cmp	r0, #0
  405c7e:	d03a      	beq.n	405cf6 <_realloc_r+0xde>
  405c80:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405c84:	f023 0301 	bic.w	r3, r3, #1
  405c88:	444b      	add	r3, r9
  405c8a:	f1a0 0208 	sub.w	r2, r0, #8
  405c8e:	429a      	cmp	r2, r3
  405c90:	f000 8121 	beq.w	405ed6 <_realloc_r+0x2be>
  405c94:	1f22      	subs	r2, r4, #4
  405c96:	2a24      	cmp	r2, #36	; 0x24
  405c98:	f200 8107 	bhi.w	405eaa <_realloc_r+0x292>
  405c9c:	2a13      	cmp	r2, #19
  405c9e:	f200 80db 	bhi.w	405e58 <_realloc_r+0x240>
  405ca2:	4603      	mov	r3, r0
  405ca4:	462a      	mov	r2, r5
  405ca6:	6811      	ldr	r1, [r2, #0]
  405ca8:	6019      	str	r1, [r3, #0]
  405caa:	6851      	ldr	r1, [r2, #4]
  405cac:	6059      	str	r1, [r3, #4]
  405cae:	6892      	ldr	r2, [r2, #8]
  405cb0:	609a      	str	r2, [r3, #8]
  405cb2:	4629      	mov	r1, r5
  405cb4:	4640      	mov	r0, r8
  405cb6:	f7ff fbcd 	bl	405454 <_free_r>
  405cba:	e01c      	b.n	405cf6 <_realloc_r+0xde>
  405cbc:	f027 0707 	bic.w	r7, r7, #7
  405cc0:	2f00      	cmp	r7, #0
  405cc2:	463a      	mov	r2, r7
  405cc4:	dabf      	bge.n	405c46 <_realloc_r+0x2e>
  405cc6:	2600      	movs	r6, #0
  405cc8:	230c      	movs	r3, #12
  405cca:	4630      	mov	r0, r6
  405ccc:	f8c8 3000 	str.w	r3, [r8]
  405cd0:	b003      	add	sp, #12
  405cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405cd6:	462e      	mov	r6, r5
  405cd8:	1be3      	subs	r3, r4, r7
  405cda:	2b0f      	cmp	r3, #15
  405cdc:	d81e      	bhi.n	405d1c <_realloc_r+0x104>
  405cde:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405ce2:	f003 0301 	and.w	r3, r3, #1
  405ce6:	4323      	orrs	r3, r4
  405ce8:	444c      	add	r4, r9
  405cea:	f8c9 3004 	str.w	r3, [r9, #4]
  405cee:	6863      	ldr	r3, [r4, #4]
  405cf0:	f043 0301 	orr.w	r3, r3, #1
  405cf4:	6063      	str	r3, [r4, #4]
  405cf6:	4640      	mov	r0, r8
  405cf8:	f7fe f8e0 	bl	403ebc <__malloc_unlock>
  405cfc:	4630      	mov	r0, r6
  405cfe:	b003      	add	sp, #12
  405d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d04:	f023 0303 	bic.w	r3, r3, #3
  405d08:	18e1      	adds	r1, r4, r3
  405d0a:	4291      	cmp	r1, r2
  405d0c:	db1f      	blt.n	405d4e <_realloc_r+0x136>
  405d0e:	68c3      	ldr	r3, [r0, #12]
  405d10:	6882      	ldr	r2, [r0, #8]
  405d12:	462e      	mov	r6, r5
  405d14:	60d3      	str	r3, [r2, #12]
  405d16:	460c      	mov	r4, r1
  405d18:	609a      	str	r2, [r3, #8]
  405d1a:	e7dd      	b.n	405cd8 <_realloc_r+0xc0>
  405d1c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405d20:	eb09 0107 	add.w	r1, r9, r7
  405d24:	f002 0201 	and.w	r2, r2, #1
  405d28:	444c      	add	r4, r9
  405d2a:	f043 0301 	orr.w	r3, r3, #1
  405d2e:	4317      	orrs	r7, r2
  405d30:	f8c9 7004 	str.w	r7, [r9, #4]
  405d34:	604b      	str	r3, [r1, #4]
  405d36:	6863      	ldr	r3, [r4, #4]
  405d38:	f043 0301 	orr.w	r3, r3, #1
  405d3c:	3108      	adds	r1, #8
  405d3e:	6063      	str	r3, [r4, #4]
  405d40:	4640      	mov	r0, r8
  405d42:	f7ff fb87 	bl	405454 <_free_r>
  405d46:	e7d6      	b.n	405cf6 <_realloc_r+0xde>
  405d48:	4611      	mov	r1, r2
  405d4a:	f7fd bd19 	b.w	403780 <_malloc_r>
  405d4e:	f01e 0f01 	tst.w	lr, #1
  405d52:	d18e      	bne.n	405c72 <_realloc_r+0x5a>
  405d54:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405d58:	eba9 0a01 	sub.w	sl, r9, r1
  405d5c:	f8da 1004 	ldr.w	r1, [sl, #4]
  405d60:	f021 0103 	bic.w	r1, r1, #3
  405d64:	440b      	add	r3, r1
  405d66:	4423      	add	r3, r4
  405d68:	4293      	cmp	r3, r2
  405d6a:	db25      	blt.n	405db8 <_realloc_r+0x1a0>
  405d6c:	68c2      	ldr	r2, [r0, #12]
  405d6e:	6881      	ldr	r1, [r0, #8]
  405d70:	4656      	mov	r6, sl
  405d72:	60ca      	str	r2, [r1, #12]
  405d74:	6091      	str	r1, [r2, #8]
  405d76:	f8da 100c 	ldr.w	r1, [sl, #12]
  405d7a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405d7e:	1f22      	subs	r2, r4, #4
  405d80:	2a24      	cmp	r2, #36	; 0x24
  405d82:	60c1      	str	r1, [r0, #12]
  405d84:	6088      	str	r0, [r1, #8]
  405d86:	f200 8094 	bhi.w	405eb2 <_realloc_r+0x29a>
  405d8a:	2a13      	cmp	r2, #19
  405d8c:	d96f      	bls.n	405e6e <_realloc_r+0x256>
  405d8e:	6829      	ldr	r1, [r5, #0]
  405d90:	f8ca 1008 	str.w	r1, [sl, #8]
  405d94:	6869      	ldr	r1, [r5, #4]
  405d96:	f8ca 100c 	str.w	r1, [sl, #12]
  405d9a:	2a1b      	cmp	r2, #27
  405d9c:	f200 80a2 	bhi.w	405ee4 <_realloc_r+0x2cc>
  405da0:	3508      	adds	r5, #8
  405da2:	f10a 0210 	add.w	r2, sl, #16
  405da6:	e063      	b.n	405e70 <_realloc_r+0x258>
  405da8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405dac:	eba9 0a03 	sub.w	sl, r9, r3
  405db0:	f8da 1004 	ldr.w	r1, [sl, #4]
  405db4:	f021 0103 	bic.w	r1, r1, #3
  405db8:	1863      	adds	r3, r4, r1
  405dba:	4293      	cmp	r3, r2
  405dbc:	f6ff af59 	blt.w	405c72 <_realloc_r+0x5a>
  405dc0:	4656      	mov	r6, sl
  405dc2:	e7d8      	b.n	405d76 <_realloc_r+0x15e>
  405dc4:	6841      	ldr	r1, [r0, #4]
  405dc6:	f021 0b03 	bic.w	fp, r1, #3
  405dca:	44a3      	add	fp, r4
  405dcc:	f107 0010 	add.w	r0, r7, #16
  405dd0:	4583      	cmp	fp, r0
  405dd2:	da56      	bge.n	405e82 <_realloc_r+0x26a>
  405dd4:	f01e 0f01 	tst.w	lr, #1
  405dd8:	f47f af4b 	bne.w	405c72 <_realloc_r+0x5a>
  405ddc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405de0:	eba9 0a01 	sub.w	sl, r9, r1
  405de4:	f8da 1004 	ldr.w	r1, [sl, #4]
  405de8:	f021 0103 	bic.w	r1, r1, #3
  405dec:	448b      	add	fp, r1
  405dee:	4558      	cmp	r0, fp
  405df0:	dce2      	bgt.n	405db8 <_realloc_r+0x1a0>
  405df2:	4656      	mov	r6, sl
  405df4:	f8da 100c 	ldr.w	r1, [sl, #12]
  405df8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405dfc:	1f22      	subs	r2, r4, #4
  405dfe:	2a24      	cmp	r2, #36	; 0x24
  405e00:	60c1      	str	r1, [r0, #12]
  405e02:	6088      	str	r0, [r1, #8]
  405e04:	f200 808f 	bhi.w	405f26 <_realloc_r+0x30e>
  405e08:	2a13      	cmp	r2, #19
  405e0a:	f240 808a 	bls.w	405f22 <_realloc_r+0x30a>
  405e0e:	6829      	ldr	r1, [r5, #0]
  405e10:	f8ca 1008 	str.w	r1, [sl, #8]
  405e14:	6869      	ldr	r1, [r5, #4]
  405e16:	f8ca 100c 	str.w	r1, [sl, #12]
  405e1a:	2a1b      	cmp	r2, #27
  405e1c:	f200 808a 	bhi.w	405f34 <_realloc_r+0x31c>
  405e20:	3508      	adds	r5, #8
  405e22:	f10a 0210 	add.w	r2, sl, #16
  405e26:	6829      	ldr	r1, [r5, #0]
  405e28:	6011      	str	r1, [r2, #0]
  405e2a:	6869      	ldr	r1, [r5, #4]
  405e2c:	6051      	str	r1, [r2, #4]
  405e2e:	68a9      	ldr	r1, [r5, #8]
  405e30:	6091      	str	r1, [r2, #8]
  405e32:	eb0a 0107 	add.w	r1, sl, r7
  405e36:	ebab 0207 	sub.w	r2, fp, r7
  405e3a:	f042 0201 	orr.w	r2, r2, #1
  405e3e:	6099      	str	r1, [r3, #8]
  405e40:	604a      	str	r2, [r1, #4]
  405e42:	f8da 3004 	ldr.w	r3, [sl, #4]
  405e46:	f003 0301 	and.w	r3, r3, #1
  405e4a:	431f      	orrs	r7, r3
  405e4c:	4640      	mov	r0, r8
  405e4e:	f8ca 7004 	str.w	r7, [sl, #4]
  405e52:	f7fe f833 	bl	403ebc <__malloc_unlock>
  405e56:	e751      	b.n	405cfc <_realloc_r+0xe4>
  405e58:	682b      	ldr	r3, [r5, #0]
  405e5a:	6003      	str	r3, [r0, #0]
  405e5c:	686b      	ldr	r3, [r5, #4]
  405e5e:	6043      	str	r3, [r0, #4]
  405e60:	2a1b      	cmp	r2, #27
  405e62:	d82d      	bhi.n	405ec0 <_realloc_r+0x2a8>
  405e64:	f100 0308 	add.w	r3, r0, #8
  405e68:	f105 0208 	add.w	r2, r5, #8
  405e6c:	e71b      	b.n	405ca6 <_realloc_r+0x8e>
  405e6e:	4632      	mov	r2, r6
  405e70:	6829      	ldr	r1, [r5, #0]
  405e72:	6011      	str	r1, [r2, #0]
  405e74:	6869      	ldr	r1, [r5, #4]
  405e76:	6051      	str	r1, [r2, #4]
  405e78:	68a9      	ldr	r1, [r5, #8]
  405e7a:	6091      	str	r1, [r2, #8]
  405e7c:	461c      	mov	r4, r3
  405e7e:	46d1      	mov	r9, sl
  405e80:	e72a      	b.n	405cd8 <_realloc_r+0xc0>
  405e82:	eb09 0107 	add.w	r1, r9, r7
  405e86:	ebab 0b07 	sub.w	fp, fp, r7
  405e8a:	f04b 0201 	orr.w	r2, fp, #1
  405e8e:	6099      	str	r1, [r3, #8]
  405e90:	604a      	str	r2, [r1, #4]
  405e92:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405e96:	f003 0301 	and.w	r3, r3, #1
  405e9a:	431f      	orrs	r7, r3
  405e9c:	4640      	mov	r0, r8
  405e9e:	f845 7c04 	str.w	r7, [r5, #-4]
  405ea2:	f7fe f80b 	bl	403ebc <__malloc_unlock>
  405ea6:	462e      	mov	r6, r5
  405ea8:	e728      	b.n	405cfc <_realloc_r+0xe4>
  405eaa:	4629      	mov	r1, r5
  405eac:	f7ff fe50 	bl	405b50 <memmove>
  405eb0:	e6ff      	b.n	405cb2 <_realloc_r+0x9a>
  405eb2:	4629      	mov	r1, r5
  405eb4:	4630      	mov	r0, r6
  405eb6:	461c      	mov	r4, r3
  405eb8:	46d1      	mov	r9, sl
  405eba:	f7ff fe49 	bl	405b50 <memmove>
  405ebe:	e70b      	b.n	405cd8 <_realloc_r+0xc0>
  405ec0:	68ab      	ldr	r3, [r5, #8]
  405ec2:	6083      	str	r3, [r0, #8]
  405ec4:	68eb      	ldr	r3, [r5, #12]
  405ec6:	60c3      	str	r3, [r0, #12]
  405ec8:	2a24      	cmp	r2, #36	; 0x24
  405eca:	d017      	beq.n	405efc <_realloc_r+0x2e4>
  405ecc:	f100 0310 	add.w	r3, r0, #16
  405ed0:	f105 0210 	add.w	r2, r5, #16
  405ed4:	e6e7      	b.n	405ca6 <_realloc_r+0x8e>
  405ed6:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405eda:	f023 0303 	bic.w	r3, r3, #3
  405ede:	441c      	add	r4, r3
  405ee0:	462e      	mov	r6, r5
  405ee2:	e6f9      	b.n	405cd8 <_realloc_r+0xc0>
  405ee4:	68a9      	ldr	r1, [r5, #8]
  405ee6:	f8ca 1010 	str.w	r1, [sl, #16]
  405eea:	68e9      	ldr	r1, [r5, #12]
  405eec:	f8ca 1014 	str.w	r1, [sl, #20]
  405ef0:	2a24      	cmp	r2, #36	; 0x24
  405ef2:	d00c      	beq.n	405f0e <_realloc_r+0x2f6>
  405ef4:	3510      	adds	r5, #16
  405ef6:	f10a 0218 	add.w	r2, sl, #24
  405efa:	e7b9      	b.n	405e70 <_realloc_r+0x258>
  405efc:	692b      	ldr	r3, [r5, #16]
  405efe:	6103      	str	r3, [r0, #16]
  405f00:	696b      	ldr	r3, [r5, #20]
  405f02:	6143      	str	r3, [r0, #20]
  405f04:	f105 0218 	add.w	r2, r5, #24
  405f08:	f100 0318 	add.w	r3, r0, #24
  405f0c:	e6cb      	b.n	405ca6 <_realloc_r+0x8e>
  405f0e:	692a      	ldr	r2, [r5, #16]
  405f10:	f8ca 2018 	str.w	r2, [sl, #24]
  405f14:	696a      	ldr	r2, [r5, #20]
  405f16:	f8ca 201c 	str.w	r2, [sl, #28]
  405f1a:	3518      	adds	r5, #24
  405f1c:	f10a 0220 	add.w	r2, sl, #32
  405f20:	e7a6      	b.n	405e70 <_realloc_r+0x258>
  405f22:	4632      	mov	r2, r6
  405f24:	e77f      	b.n	405e26 <_realloc_r+0x20e>
  405f26:	4629      	mov	r1, r5
  405f28:	4630      	mov	r0, r6
  405f2a:	9301      	str	r3, [sp, #4]
  405f2c:	f7ff fe10 	bl	405b50 <memmove>
  405f30:	9b01      	ldr	r3, [sp, #4]
  405f32:	e77e      	b.n	405e32 <_realloc_r+0x21a>
  405f34:	68a9      	ldr	r1, [r5, #8]
  405f36:	f8ca 1010 	str.w	r1, [sl, #16]
  405f3a:	68e9      	ldr	r1, [r5, #12]
  405f3c:	f8ca 1014 	str.w	r1, [sl, #20]
  405f40:	2a24      	cmp	r2, #36	; 0x24
  405f42:	d003      	beq.n	405f4c <_realloc_r+0x334>
  405f44:	3510      	adds	r5, #16
  405f46:	f10a 0218 	add.w	r2, sl, #24
  405f4a:	e76c      	b.n	405e26 <_realloc_r+0x20e>
  405f4c:	692a      	ldr	r2, [r5, #16]
  405f4e:	f8ca 2018 	str.w	r2, [sl, #24]
  405f52:	696a      	ldr	r2, [r5, #20]
  405f54:	f8ca 201c 	str.w	r2, [sl, #28]
  405f58:	3518      	adds	r5, #24
  405f5a:	f10a 0220 	add.w	r2, sl, #32
  405f5e:	e762      	b.n	405e26 <_realloc_r+0x20e>
  405f60:	20400438 	.word	0x20400438

00405f64 <__sread>:
  405f64:	b510      	push	{r4, lr}
  405f66:	460c      	mov	r4, r1
  405f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405f6c:	f000 f9f6 	bl	40635c <_read_r>
  405f70:	2800      	cmp	r0, #0
  405f72:	db03      	blt.n	405f7c <__sread+0x18>
  405f74:	6d23      	ldr	r3, [r4, #80]	; 0x50
  405f76:	4403      	add	r3, r0
  405f78:	6523      	str	r3, [r4, #80]	; 0x50
  405f7a:	bd10      	pop	{r4, pc}
  405f7c:	89a3      	ldrh	r3, [r4, #12]
  405f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  405f82:	81a3      	strh	r3, [r4, #12]
  405f84:	bd10      	pop	{r4, pc}
  405f86:	bf00      	nop

00405f88 <__swrite>:
  405f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405f8c:	4616      	mov	r6, r2
  405f8e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  405f92:	461f      	mov	r7, r3
  405f94:	05d3      	lsls	r3, r2, #23
  405f96:	460c      	mov	r4, r1
  405f98:	4605      	mov	r5, r0
  405f9a:	d507      	bpl.n	405fac <__swrite+0x24>
  405f9c:	2200      	movs	r2, #0
  405f9e:	2302      	movs	r3, #2
  405fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405fa4:	f000 f9c4 	bl	406330 <_lseek_r>
  405fa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405fac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405fb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  405fb4:	81a2      	strh	r2, [r4, #12]
  405fb6:	463b      	mov	r3, r7
  405fb8:	4632      	mov	r2, r6
  405fba:	4628      	mov	r0, r5
  405fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405fc0:	f000 b8a4 	b.w	40610c <_write_r>

00405fc4 <__sseek>:
  405fc4:	b510      	push	{r4, lr}
  405fc6:	460c      	mov	r4, r1
  405fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405fcc:	f000 f9b0 	bl	406330 <_lseek_r>
  405fd0:	89a3      	ldrh	r3, [r4, #12]
  405fd2:	1c42      	adds	r2, r0, #1
  405fd4:	bf0e      	itee	eq
  405fd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  405fda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  405fde:	6520      	strne	r0, [r4, #80]	; 0x50
  405fe0:	81a3      	strh	r3, [r4, #12]
  405fe2:	bd10      	pop	{r4, pc}

00405fe4 <__sclose>:
  405fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405fe8:	f000 b908 	b.w	4061fc <_close_r>

00405fec <__swbuf_r>:
  405fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405fee:	460d      	mov	r5, r1
  405ff0:	4614      	mov	r4, r2
  405ff2:	4606      	mov	r6, r0
  405ff4:	b110      	cbz	r0, 405ffc <__swbuf_r+0x10>
  405ff6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405ff8:	2b00      	cmp	r3, #0
  405ffa:	d04b      	beq.n	406094 <__swbuf_r+0xa8>
  405ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406000:	69a3      	ldr	r3, [r4, #24]
  406002:	60a3      	str	r3, [r4, #8]
  406004:	b291      	uxth	r1, r2
  406006:	0708      	lsls	r0, r1, #28
  406008:	d539      	bpl.n	40607e <__swbuf_r+0x92>
  40600a:	6923      	ldr	r3, [r4, #16]
  40600c:	2b00      	cmp	r3, #0
  40600e:	d036      	beq.n	40607e <__swbuf_r+0x92>
  406010:	b2ed      	uxtb	r5, r5
  406012:	0489      	lsls	r1, r1, #18
  406014:	462f      	mov	r7, r5
  406016:	d515      	bpl.n	406044 <__swbuf_r+0x58>
  406018:	6822      	ldr	r2, [r4, #0]
  40601a:	6961      	ldr	r1, [r4, #20]
  40601c:	1ad3      	subs	r3, r2, r3
  40601e:	428b      	cmp	r3, r1
  406020:	da1c      	bge.n	40605c <__swbuf_r+0x70>
  406022:	3301      	adds	r3, #1
  406024:	68a1      	ldr	r1, [r4, #8]
  406026:	1c50      	adds	r0, r2, #1
  406028:	3901      	subs	r1, #1
  40602a:	60a1      	str	r1, [r4, #8]
  40602c:	6020      	str	r0, [r4, #0]
  40602e:	7015      	strb	r5, [r2, #0]
  406030:	6962      	ldr	r2, [r4, #20]
  406032:	429a      	cmp	r2, r3
  406034:	d01a      	beq.n	40606c <__swbuf_r+0x80>
  406036:	89a3      	ldrh	r3, [r4, #12]
  406038:	07db      	lsls	r3, r3, #31
  40603a:	d501      	bpl.n	406040 <__swbuf_r+0x54>
  40603c:	2d0a      	cmp	r5, #10
  40603e:	d015      	beq.n	40606c <__swbuf_r+0x80>
  406040:	4638      	mov	r0, r7
  406042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406044:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406046:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40604a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40604e:	81a2      	strh	r2, [r4, #12]
  406050:	6822      	ldr	r2, [r4, #0]
  406052:	6661      	str	r1, [r4, #100]	; 0x64
  406054:	6961      	ldr	r1, [r4, #20]
  406056:	1ad3      	subs	r3, r2, r3
  406058:	428b      	cmp	r3, r1
  40605a:	dbe2      	blt.n	406022 <__swbuf_r+0x36>
  40605c:	4621      	mov	r1, r4
  40605e:	4630      	mov	r0, r6
  406060:	f7ff f87a 	bl	405158 <_fflush_r>
  406064:	b940      	cbnz	r0, 406078 <__swbuf_r+0x8c>
  406066:	6822      	ldr	r2, [r4, #0]
  406068:	2301      	movs	r3, #1
  40606a:	e7db      	b.n	406024 <__swbuf_r+0x38>
  40606c:	4621      	mov	r1, r4
  40606e:	4630      	mov	r0, r6
  406070:	f7ff f872 	bl	405158 <_fflush_r>
  406074:	2800      	cmp	r0, #0
  406076:	d0e3      	beq.n	406040 <__swbuf_r+0x54>
  406078:	f04f 37ff 	mov.w	r7, #4294967295
  40607c:	e7e0      	b.n	406040 <__swbuf_r+0x54>
  40607e:	4621      	mov	r1, r4
  406080:	4630      	mov	r0, r6
  406082:	f7fe ff55 	bl	404f30 <__swsetup_r>
  406086:	2800      	cmp	r0, #0
  406088:	d1f6      	bne.n	406078 <__swbuf_r+0x8c>
  40608a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40608e:	6923      	ldr	r3, [r4, #16]
  406090:	b291      	uxth	r1, r2
  406092:	e7bd      	b.n	406010 <__swbuf_r+0x24>
  406094:	f7ff f8b8 	bl	405208 <__sinit>
  406098:	e7b0      	b.n	405ffc <__swbuf_r+0x10>
  40609a:	bf00      	nop

0040609c <_wcrtomb_r>:
  40609c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40609e:	4606      	mov	r6, r0
  4060a0:	b085      	sub	sp, #20
  4060a2:	461f      	mov	r7, r3
  4060a4:	b189      	cbz	r1, 4060ca <_wcrtomb_r+0x2e>
  4060a6:	4c10      	ldr	r4, [pc, #64]	; (4060e8 <_wcrtomb_r+0x4c>)
  4060a8:	4d10      	ldr	r5, [pc, #64]	; (4060ec <_wcrtomb_r+0x50>)
  4060aa:	6824      	ldr	r4, [r4, #0]
  4060ac:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4060ae:	2c00      	cmp	r4, #0
  4060b0:	bf08      	it	eq
  4060b2:	462c      	moveq	r4, r5
  4060b4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4060b8:	47a0      	blx	r4
  4060ba:	1c43      	adds	r3, r0, #1
  4060bc:	d103      	bne.n	4060c6 <_wcrtomb_r+0x2a>
  4060be:	2200      	movs	r2, #0
  4060c0:	238a      	movs	r3, #138	; 0x8a
  4060c2:	603a      	str	r2, [r7, #0]
  4060c4:	6033      	str	r3, [r6, #0]
  4060c6:	b005      	add	sp, #20
  4060c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4060ca:	460c      	mov	r4, r1
  4060cc:	4906      	ldr	r1, [pc, #24]	; (4060e8 <_wcrtomb_r+0x4c>)
  4060ce:	4a07      	ldr	r2, [pc, #28]	; (4060ec <_wcrtomb_r+0x50>)
  4060d0:	6809      	ldr	r1, [r1, #0]
  4060d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4060d4:	2900      	cmp	r1, #0
  4060d6:	bf08      	it	eq
  4060d8:	4611      	moveq	r1, r2
  4060da:	4622      	mov	r2, r4
  4060dc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4060e0:	a901      	add	r1, sp, #4
  4060e2:	47a0      	blx	r4
  4060e4:	e7e9      	b.n	4060ba <_wcrtomb_r+0x1e>
  4060e6:	bf00      	nop
  4060e8:	2040000c 	.word	0x2040000c
  4060ec:	2040084c 	.word	0x2040084c

004060f0 <__ascii_wctomb>:
  4060f0:	b121      	cbz	r1, 4060fc <__ascii_wctomb+0xc>
  4060f2:	2aff      	cmp	r2, #255	; 0xff
  4060f4:	d804      	bhi.n	406100 <__ascii_wctomb+0x10>
  4060f6:	700a      	strb	r2, [r1, #0]
  4060f8:	2001      	movs	r0, #1
  4060fa:	4770      	bx	lr
  4060fc:	4608      	mov	r0, r1
  4060fe:	4770      	bx	lr
  406100:	238a      	movs	r3, #138	; 0x8a
  406102:	6003      	str	r3, [r0, #0]
  406104:	f04f 30ff 	mov.w	r0, #4294967295
  406108:	4770      	bx	lr
  40610a:	bf00      	nop

0040610c <_write_r>:
  40610c:	b570      	push	{r4, r5, r6, lr}
  40610e:	460d      	mov	r5, r1
  406110:	4c08      	ldr	r4, [pc, #32]	; (406134 <_write_r+0x28>)
  406112:	4611      	mov	r1, r2
  406114:	4606      	mov	r6, r0
  406116:	461a      	mov	r2, r3
  406118:	4628      	mov	r0, r5
  40611a:	2300      	movs	r3, #0
  40611c:	6023      	str	r3, [r4, #0]
  40611e:	f7fa f8af 	bl	400280 <_write>
  406122:	1c43      	adds	r3, r0, #1
  406124:	d000      	beq.n	406128 <_write_r+0x1c>
  406126:	bd70      	pop	{r4, r5, r6, pc}
  406128:	6823      	ldr	r3, [r4, #0]
  40612a:	2b00      	cmp	r3, #0
  40612c:	d0fb      	beq.n	406126 <_write_r+0x1a>
  40612e:	6033      	str	r3, [r6, #0]
  406130:	bd70      	pop	{r4, r5, r6, pc}
  406132:	bf00      	nop
  406134:	20400ce0 	.word	0x20400ce0

00406138 <__register_exitproc>:
  406138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40613c:	4d2c      	ldr	r5, [pc, #176]	; (4061f0 <__register_exitproc+0xb8>)
  40613e:	4606      	mov	r6, r0
  406140:	6828      	ldr	r0, [r5, #0]
  406142:	4698      	mov	r8, r3
  406144:	460f      	mov	r7, r1
  406146:	4691      	mov	r9, r2
  406148:	f7ff fc1e 	bl	405988 <__retarget_lock_acquire_recursive>
  40614c:	4b29      	ldr	r3, [pc, #164]	; (4061f4 <__register_exitproc+0xbc>)
  40614e:	681c      	ldr	r4, [r3, #0]
  406150:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406154:	2b00      	cmp	r3, #0
  406156:	d03e      	beq.n	4061d6 <__register_exitproc+0x9e>
  406158:	685a      	ldr	r2, [r3, #4]
  40615a:	2a1f      	cmp	r2, #31
  40615c:	dc1c      	bgt.n	406198 <__register_exitproc+0x60>
  40615e:	f102 0e01 	add.w	lr, r2, #1
  406162:	b176      	cbz	r6, 406182 <__register_exitproc+0x4a>
  406164:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406168:	2401      	movs	r4, #1
  40616a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40616e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406172:	4094      	lsls	r4, r2
  406174:	4320      	orrs	r0, r4
  406176:	2e02      	cmp	r6, #2
  406178:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40617c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406180:	d023      	beq.n	4061ca <__register_exitproc+0x92>
  406182:	3202      	adds	r2, #2
  406184:	f8c3 e004 	str.w	lr, [r3, #4]
  406188:	6828      	ldr	r0, [r5, #0]
  40618a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40618e:	f7ff fbfd 	bl	40598c <__retarget_lock_release_recursive>
  406192:	2000      	movs	r0, #0
  406194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406198:	4b17      	ldr	r3, [pc, #92]	; (4061f8 <__register_exitproc+0xc0>)
  40619a:	b30b      	cbz	r3, 4061e0 <__register_exitproc+0xa8>
  40619c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4061a0:	f7fd fade 	bl	403760 <malloc>
  4061a4:	4603      	mov	r3, r0
  4061a6:	b1d8      	cbz	r0, 4061e0 <__register_exitproc+0xa8>
  4061a8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4061ac:	6002      	str	r2, [r0, #0]
  4061ae:	2100      	movs	r1, #0
  4061b0:	6041      	str	r1, [r0, #4]
  4061b2:	460a      	mov	r2, r1
  4061b4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4061b8:	f04f 0e01 	mov.w	lr, #1
  4061bc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4061c0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4061c4:	2e00      	cmp	r6, #0
  4061c6:	d0dc      	beq.n	406182 <__register_exitproc+0x4a>
  4061c8:	e7cc      	b.n	406164 <__register_exitproc+0x2c>
  4061ca:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4061ce:	430c      	orrs	r4, r1
  4061d0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4061d4:	e7d5      	b.n	406182 <__register_exitproc+0x4a>
  4061d6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4061da:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4061de:	e7bb      	b.n	406158 <__register_exitproc+0x20>
  4061e0:	6828      	ldr	r0, [r5, #0]
  4061e2:	f7ff fbd3 	bl	40598c <__retarget_lock_release_recursive>
  4061e6:	f04f 30ff 	mov.w	r0, #4294967295
  4061ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4061ee:	bf00      	nop
  4061f0:	20400848 	.word	0x20400848
  4061f4:	004067f4 	.word	0x004067f4
  4061f8:	00403761 	.word	0x00403761

004061fc <_close_r>:
  4061fc:	b538      	push	{r3, r4, r5, lr}
  4061fe:	4c07      	ldr	r4, [pc, #28]	; (40621c <_close_r+0x20>)
  406200:	2300      	movs	r3, #0
  406202:	4605      	mov	r5, r0
  406204:	4608      	mov	r0, r1
  406206:	6023      	str	r3, [r4, #0]
  406208:	f7fa fe2e 	bl	400e68 <_close>
  40620c:	1c43      	adds	r3, r0, #1
  40620e:	d000      	beq.n	406212 <_close_r+0x16>
  406210:	bd38      	pop	{r3, r4, r5, pc}
  406212:	6823      	ldr	r3, [r4, #0]
  406214:	2b00      	cmp	r3, #0
  406216:	d0fb      	beq.n	406210 <_close_r+0x14>
  406218:	602b      	str	r3, [r5, #0]
  40621a:	bd38      	pop	{r3, r4, r5, pc}
  40621c:	20400ce0 	.word	0x20400ce0

00406220 <_fclose_r>:
  406220:	b570      	push	{r4, r5, r6, lr}
  406222:	b159      	cbz	r1, 40623c <_fclose_r+0x1c>
  406224:	4605      	mov	r5, r0
  406226:	460c      	mov	r4, r1
  406228:	b110      	cbz	r0, 406230 <_fclose_r+0x10>
  40622a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40622c:	2b00      	cmp	r3, #0
  40622e:	d03c      	beq.n	4062aa <_fclose_r+0x8a>
  406230:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406232:	07d8      	lsls	r0, r3, #31
  406234:	d505      	bpl.n	406242 <_fclose_r+0x22>
  406236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40623a:	b92b      	cbnz	r3, 406248 <_fclose_r+0x28>
  40623c:	2600      	movs	r6, #0
  40623e:	4630      	mov	r0, r6
  406240:	bd70      	pop	{r4, r5, r6, pc}
  406242:	89a3      	ldrh	r3, [r4, #12]
  406244:	0599      	lsls	r1, r3, #22
  406246:	d53c      	bpl.n	4062c2 <_fclose_r+0xa2>
  406248:	4621      	mov	r1, r4
  40624a:	4628      	mov	r0, r5
  40624c:	f7fe fee4 	bl	405018 <__sflush_r>
  406250:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406252:	4606      	mov	r6, r0
  406254:	b133      	cbz	r3, 406264 <_fclose_r+0x44>
  406256:	69e1      	ldr	r1, [r4, #28]
  406258:	4628      	mov	r0, r5
  40625a:	4798      	blx	r3
  40625c:	2800      	cmp	r0, #0
  40625e:	bfb8      	it	lt
  406260:	f04f 36ff 	movlt.w	r6, #4294967295
  406264:	89a3      	ldrh	r3, [r4, #12]
  406266:	061a      	lsls	r2, r3, #24
  406268:	d422      	bmi.n	4062b0 <_fclose_r+0x90>
  40626a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40626c:	b141      	cbz	r1, 406280 <_fclose_r+0x60>
  40626e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406272:	4299      	cmp	r1, r3
  406274:	d002      	beq.n	40627c <_fclose_r+0x5c>
  406276:	4628      	mov	r0, r5
  406278:	f7ff f8ec 	bl	405454 <_free_r>
  40627c:	2300      	movs	r3, #0
  40627e:	6323      	str	r3, [r4, #48]	; 0x30
  406280:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406282:	b121      	cbz	r1, 40628e <_fclose_r+0x6e>
  406284:	4628      	mov	r0, r5
  406286:	f7ff f8e5 	bl	405454 <_free_r>
  40628a:	2300      	movs	r3, #0
  40628c:	6463      	str	r3, [r4, #68]	; 0x44
  40628e:	f7fe ffe7 	bl	405260 <__sfp_lock_acquire>
  406292:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406294:	2200      	movs	r2, #0
  406296:	07db      	lsls	r3, r3, #31
  406298:	81a2      	strh	r2, [r4, #12]
  40629a:	d50e      	bpl.n	4062ba <_fclose_r+0x9a>
  40629c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40629e:	f7ff fb71 	bl	405984 <__retarget_lock_close_recursive>
  4062a2:	f7fe ffe3 	bl	40526c <__sfp_lock_release>
  4062a6:	4630      	mov	r0, r6
  4062a8:	bd70      	pop	{r4, r5, r6, pc}
  4062aa:	f7fe ffad 	bl	405208 <__sinit>
  4062ae:	e7bf      	b.n	406230 <_fclose_r+0x10>
  4062b0:	6921      	ldr	r1, [r4, #16]
  4062b2:	4628      	mov	r0, r5
  4062b4:	f7ff f8ce 	bl	405454 <_free_r>
  4062b8:	e7d7      	b.n	40626a <_fclose_r+0x4a>
  4062ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4062bc:	f7ff fb66 	bl	40598c <__retarget_lock_release_recursive>
  4062c0:	e7ec      	b.n	40629c <_fclose_r+0x7c>
  4062c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4062c4:	f7ff fb60 	bl	405988 <__retarget_lock_acquire_recursive>
  4062c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4062cc:	2b00      	cmp	r3, #0
  4062ce:	d1bb      	bne.n	406248 <_fclose_r+0x28>
  4062d0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4062d2:	f016 0601 	ands.w	r6, r6, #1
  4062d6:	d1b1      	bne.n	40623c <_fclose_r+0x1c>
  4062d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4062da:	f7ff fb57 	bl	40598c <__retarget_lock_release_recursive>
  4062de:	4630      	mov	r0, r6
  4062e0:	bd70      	pop	{r4, r5, r6, pc}
  4062e2:	bf00      	nop

004062e4 <_fstat_r>:
  4062e4:	b538      	push	{r3, r4, r5, lr}
  4062e6:	460b      	mov	r3, r1
  4062e8:	4c07      	ldr	r4, [pc, #28]	; (406308 <_fstat_r+0x24>)
  4062ea:	4605      	mov	r5, r0
  4062ec:	4611      	mov	r1, r2
  4062ee:	4618      	mov	r0, r3
  4062f0:	2300      	movs	r3, #0
  4062f2:	6023      	str	r3, [r4, #0]
  4062f4:	f7fa fdbb 	bl	400e6e <_fstat>
  4062f8:	1c43      	adds	r3, r0, #1
  4062fa:	d000      	beq.n	4062fe <_fstat_r+0x1a>
  4062fc:	bd38      	pop	{r3, r4, r5, pc}
  4062fe:	6823      	ldr	r3, [r4, #0]
  406300:	2b00      	cmp	r3, #0
  406302:	d0fb      	beq.n	4062fc <_fstat_r+0x18>
  406304:	602b      	str	r3, [r5, #0]
  406306:	bd38      	pop	{r3, r4, r5, pc}
  406308:	20400ce0 	.word	0x20400ce0

0040630c <_isatty_r>:
  40630c:	b538      	push	{r3, r4, r5, lr}
  40630e:	4c07      	ldr	r4, [pc, #28]	; (40632c <_isatty_r+0x20>)
  406310:	2300      	movs	r3, #0
  406312:	4605      	mov	r5, r0
  406314:	4608      	mov	r0, r1
  406316:	6023      	str	r3, [r4, #0]
  406318:	f7fa fdae 	bl	400e78 <_isatty>
  40631c:	1c43      	adds	r3, r0, #1
  40631e:	d000      	beq.n	406322 <_isatty_r+0x16>
  406320:	bd38      	pop	{r3, r4, r5, pc}
  406322:	6823      	ldr	r3, [r4, #0]
  406324:	2b00      	cmp	r3, #0
  406326:	d0fb      	beq.n	406320 <_isatty_r+0x14>
  406328:	602b      	str	r3, [r5, #0]
  40632a:	bd38      	pop	{r3, r4, r5, pc}
  40632c:	20400ce0 	.word	0x20400ce0

00406330 <_lseek_r>:
  406330:	b570      	push	{r4, r5, r6, lr}
  406332:	460d      	mov	r5, r1
  406334:	4c08      	ldr	r4, [pc, #32]	; (406358 <_lseek_r+0x28>)
  406336:	4611      	mov	r1, r2
  406338:	4606      	mov	r6, r0
  40633a:	461a      	mov	r2, r3
  40633c:	4628      	mov	r0, r5
  40633e:	2300      	movs	r3, #0
  406340:	6023      	str	r3, [r4, #0]
  406342:	f7fa fd9b 	bl	400e7c <_lseek>
  406346:	1c43      	adds	r3, r0, #1
  406348:	d000      	beq.n	40634c <_lseek_r+0x1c>
  40634a:	bd70      	pop	{r4, r5, r6, pc}
  40634c:	6823      	ldr	r3, [r4, #0]
  40634e:	2b00      	cmp	r3, #0
  406350:	d0fb      	beq.n	40634a <_lseek_r+0x1a>
  406352:	6033      	str	r3, [r6, #0]
  406354:	bd70      	pop	{r4, r5, r6, pc}
  406356:	bf00      	nop
  406358:	20400ce0 	.word	0x20400ce0

0040635c <_read_r>:
  40635c:	b570      	push	{r4, r5, r6, lr}
  40635e:	460d      	mov	r5, r1
  406360:	4c08      	ldr	r4, [pc, #32]	; (406384 <_read_r+0x28>)
  406362:	4611      	mov	r1, r2
  406364:	4606      	mov	r6, r0
  406366:	461a      	mov	r2, r3
  406368:	4628      	mov	r0, r5
  40636a:	2300      	movs	r3, #0
  40636c:	6023      	str	r3, [r4, #0]
  40636e:	f7f9 ff69 	bl	400244 <_read>
  406372:	1c43      	adds	r3, r0, #1
  406374:	d000      	beq.n	406378 <_read_r+0x1c>
  406376:	bd70      	pop	{r4, r5, r6, pc}
  406378:	6823      	ldr	r3, [r4, #0]
  40637a:	2b00      	cmp	r3, #0
  40637c:	d0fb      	beq.n	406376 <_read_r+0x1a>
  40637e:	6033      	str	r3, [r6, #0]
  406380:	bd70      	pop	{r4, r5, r6, pc}
  406382:	bf00      	nop
  406384:	20400ce0 	.word	0x20400ce0

00406388 <__aeabi_uldivmod>:
  406388:	b953      	cbnz	r3, 4063a0 <__aeabi_uldivmod+0x18>
  40638a:	b94a      	cbnz	r2, 4063a0 <__aeabi_uldivmod+0x18>
  40638c:	2900      	cmp	r1, #0
  40638e:	bf08      	it	eq
  406390:	2800      	cmpeq	r0, #0
  406392:	bf1c      	itt	ne
  406394:	f04f 31ff 	movne.w	r1, #4294967295
  406398:	f04f 30ff 	movne.w	r0, #4294967295
  40639c:	f000 b97a 	b.w	406694 <__aeabi_idiv0>
  4063a0:	f1ad 0c08 	sub.w	ip, sp, #8
  4063a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4063a8:	f000 f806 	bl	4063b8 <__udivmoddi4>
  4063ac:	f8dd e004 	ldr.w	lr, [sp, #4]
  4063b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4063b4:	b004      	add	sp, #16
  4063b6:	4770      	bx	lr

004063b8 <__udivmoddi4>:
  4063b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4063bc:	468c      	mov	ip, r1
  4063be:	460d      	mov	r5, r1
  4063c0:	4604      	mov	r4, r0
  4063c2:	9e08      	ldr	r6, [sp, #32]
  4063c4:	2b00      	cmp	r3, #0
  4063c6:	d151      	bne.n	40646c <__udivmoddi4+0xb4>
  4063c8:	428a      	cmp	r2, r1
  4063ca:	4617      	mov	r7, r2
  4063cc:	d96d      	bls.n	4064aa <__udivmoddi4+0xf2>
  4063ce:	fab2 fe82 	clz	lr, r2
  4063d2:	f1be 0f00 	cmp.w	lr, #0
  4063d6:	d00b      	beq.n	4063f0 <__udivmoddi4+0x38>
  4063d8:	f1ce 0c20 	rsb	ip, lr, #32
  4063dc:	fa01 f50e 	lsl.w	r5, r1, lr
  4063e0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4063e4:	fa02 f70e 	lsl.w	r7, r2, lr
  4063e8:	ea4c 0c05 	orr.w	ip, ip, r5
  4063ec:	fa00 f40e 	lsl.w	r4, r0, lr
  4063f0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4063f4:	0c25      	lsrs	r5, r4, #16
  4063f6:	fbbc f8fa 	udiv	r8, ip, sl
  4063fa:	fa1f f987 	uxth.w	r9, r7
  4063fe:	fb0a cc18 	mls	ip, sl, r8, ip
  406402:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406406:	fb08 f309 	mul.w	r3, r8, r9
  40640a:	42ab      	cmp	r3, r5
  40640c:	d90a      	bls.n	406424 <__udivmoddi4+0x6c>
  40640e:	19ed      	adds	r5, r5, r7
  406410:	f108 32ff 	add.w	r2, r8, #4294967295
  406414:	f080 8123 	bcs.w	40665e <__udivmoddi4+0x2a6>
  406418:	42ab      	cmp	r3, r5
  40641a:	f240 8120 	bls.w	40665e <__udivmoddi4+0x2a6>
  40641e:	f1a8 0802 	sub.w	r8, r8, #2
  406422:	443d      	add	r5, r7
  406424:	1aed      	subs	r5, r5, r3
  406426:	b2a4      	uxth	r4, r4
  406428:	fbb5 f0fa 	udiv	r0, r5, sl
  40642c:	fb0a 5510 	mls	r5, sl, r0, r5
  406430:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  406434:	fb00 f909 	mul.w	r9, r0, r9
  406438:	45a1      	cmp	r9, r4
  40643a:	d909      	bls.n	406450 <__udivmoddi4+0x98>
  40643c:	19e4      	adds	r4, r4, r7
  40643e:	f100 33ff 	add.w	r3, r0, #4294967295
  406442:	f080 810a 	bcs.w	40665a <__udivmoddi4+0x2a2>
  406446:	45a1      	cmp	r9, r4
  406448:	f240 8107 	bls.w	40665a <__udivmoddi4+0x2a2>
  40644c:	3802      	subs	r0, #2
  40644e:	443c      	add	r4, r7
  406450:	eba4 0409 	sub.w	r4, r4, r9
  406454:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406458:	2100      	movs	r1, #0
  40645a:	2e00      	cmp	r6, #0
  40645c:	d061      	beq.n	406522 <__udivmoddi4+0x16a>
  40645e:	fa24 f40e 	lsr.w	r4, r4, lr
  406462:	2300      	movs	r3, #0
  406464:	6034      	str	r4, [r6, #0]
  406466:	6073      	str	r3, [r6, #4]
  406468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40646c:	428b      	cmp	r3, r1
  40646e:	d907      	bls.n	406480 <__udivmoddi4+0xc8>
  406470:	2e00      	cmp	r6, #0
  406472:	d054      	beq.n	40651e <__udivmoddi4+0x166>
  406474:	2100      	movs	r1, #0
  406476:	e886 0021 	stmia.w	r6, {r0, r5}
  40647a:	4608      	mov	r0, r1
  40647c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406480:	fab3 f183 	clz	r1, r3
  406484:	2900      	cmp	r1, #0
  406486:	f040 808e 	bne.w	4065a6 <__udivmoddi4+0x1ee>
  40648a:	42ab      	cmp	r3, r5
  40648c:	d302      	bcc.n	406494 <__udivmoddi4+0xdc>
  40648e:	4282      	cmp	r2, r0
  406490:	f200 80fa 	bhi.w	406688 <__udivmoddi4+0x2d0>
  406494:	1a84      	subs	r4, r0, r2
  406496:	eb65 0503 	sbc.w	r5, r5, r3
  40649a:	2001      	movs	r0, #1
  40649c:	46ac      	mov	ip, r5
  40649e:	2e00      	cmp	r6, #0
  4064a0:	d03f      	beq.n	406522 <__udivmoddi4+0x16a>
  4064a2:	e886 1010 	stmia.w	r6, {r4, ip}
  4064a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4064aa:	b912      	cbnz	r2, 4064b2 <__udivmoddi4+0xfa>
  4064ac:	2701      	movs	r7, #1
  4064ae:	fbb7 f7f2 	udiv	r7, r7, r2
  4064b2:	fab7 fe87 	clz	lr, r7
  4064b6:	f1be 0f00 	cmp.w	lr, #0
  4064ba:	d134      	bne.n	406526 <__udivmoddi4+0x16e>
  4064bc:	1beb      	subs	r3, r5, r7
  4064be:	0c3a      	lsrs	r2, r7, #16
  4064c0:	fa1f fc87 	uxth.w	ip, r7
  4064c4:	2101      	movs	r1, #1
  4064c6:	fbb3 f8f2 	udiv	r8, r3, r2
  4064ca:	0c25      	lsrs	r5, r4, #16
  4064cc:	fb02 3318 	mls	r3, r2, r8, r3
  4064d0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4064d4:	fb0c f308 	mul.w	r3, ip, r8
  4064d8:	42ab      	cmp	r3, r5
  4064da:	d907      	bls.n	4064ec <__udivmoddi4+0x134>
  4064dc:	19ed      	adds	r5, r5, r7
  4064de:	f108 30ff 	add.w	r0, r8, #4294967295
  4064e2:	d202      	bcs.n	4064ea <__udivmoddi4+0x132>
  4064e4:	42ab      	cmp	r3, r5
  4064e6:	f200 80d1 	bhi.w	40668c <__udivmoddi4+0x2d4>
  4064ea:	4680      	mov	r8, r0
  4064ec:	1aed      	subs	r5, r5, r3
  4064ee:	b2a3      	uxth	r3, r4
  4064f0:	fbb5 f0f2 	udiv	r0, r5, r2
  4064f4:	fb02 5510 	mls	r5, r2, r0, r5
  4064f8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4064fc:	fb0c fc00 	mul.w	ip, ip, r0
  406500:	45a4      	cmp	ip, r4
  406502:	d907      	bls.n	406514 <__udivmoddi4+0x15c>
  406504:	19e4      	adds	r4, r4, r7
  406506:	f100 33ff 	add.w	r3, r0, #4294967295
  40650a:	d202      	bcs.n	406512 <__udivmoddi4+0x15a>
  40650c:	45a4      	cmp	ip, r4
  40650e:	f200 80b8 	bhi.w	406682 <__udivmoddi4+0x2ca>
  406512:	4618      	mov	r0, r3
  406514:	eba4 040c 	sub.w	r4, r4, ip
  406518:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40651c:	e79d      	b.n	40645a <__udivmoddi4+0xa2>
  40651e:	4631      	mov	r1, r6
  406520:	4630      	mov	r0, r6
  406522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406526:	f1ce 0420 	rsb	r4, lr, #32
  40652a:	fa05 f30e 	lsl.w	r3, r5, lr
  40652e:	fa07 f70e 	lsl.w	r7, r7, lr
  406532:	fa20 f804 	lsr.w	r8, r0, r4
  406536:	0c3a      	lsrs	r2, r7, #16
  406538:	fa25 f404 	lsr.w	r4, r5, r4
  40653c:	ea48 0803 	orr.w	r8, r8, r3
  406540:	fbb4 f1f2 	udiv	r1, r4, r2
  406544:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406548:	fb02 4411 	mls	r4, r2, r1, r4
  40654c:	fa1f fc87 	uxth.w	ip, r7
  406550:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406554:	fb01 f30c 	mul.w	r3, r1, ip
  406558:	42ab      	cmp	r3, r5
  40655a:	fa00 f40e 	lsl.w	r4, r0, lr
  40655e:	d909      	bls.n	406574 <__udivmoddi4+0x1bc>
  406560:	19ed      	adds	r5, r5, r7
  406562:	f101 30ff 	add.w	r0, r1, #4294967295
  406566:	f080 808a 	bcs.w	40667e <__udivmoddi4+0x2c6>
  40656a:	42ab      	cmp	r3, r5
  40656c:	f240 8087 	bls.w	40667e <__udivmoddi4+0x2c6>
  406570:	3902      	subs	r1, #2
  406572:	443d      	add	r5, r7
  406574:	1aeb      	subs	r3, r5, r3
  406576:	fa1f f588 	uxth.w	r5, r8
  40657a:	fbb3 f0f2 	udiv	r0, r3, r2
  40657e:	fb02 3310 	mls	r3, r2, r0, r3
  406582:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406586:	fb00 f30c 	mul.w	r3, r0, ip
  40658a:	42ab      	cmp	r3, r5
  40658c:	d907      	bls.n	40659e <__udivmoddi4+0x1e6>
  40658e:	19ed      	adds	r5, r5, r7
  406590:	f100 38ff 	add.w	r8, r0, #4294967295
  406594:	d26f      	bcs.n	406676 <__udivmoddi4+0x2be>
  406596:	42ab      	cmp	r3, r5
  406598:	d96d      	bls.n	406676 <__udivmoddi4+0x2be>
  40659a:	3802      	subs	r0, #2
  40659c:	443d      	add	r5, r7
  40659e:	1aeb      	subs	r3, r5, r3
  4065a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4065a4:	e78f      	b.n	4064c6 <__udivmoddi4+0x10e>
  4065a6:	f1c1 0720 	rsb	r7, r1, #32
  4065aa:	fa22 f807 	lsr.w	r8, r2, r7
  4065ae:	408b      	lsls	r3, r1
  4065b0:	fa05 f401 	lsl.w	r4, r5, r1
  4065b4:	ea48 0303 	orr.w	r3, r8, r3
  4065b8:	fa20 fe07 	lsr.w	lr, r0, r7
  4065bc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4065c0:	40fd      	lsrs	r5, r7
  4065c2:	ea4e 0e04 	orr.w	lr, lr, r4
  4065c6:	fbb5 f9fc 	udiv	r9, r5, ip
  4065ca:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4065ce:	fb0c 5519 	mls	r5, ip, r9, r5
  4065d2:	fa1f f883 	uxth.w	r8, r3
  4065d6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4065da:	fb09 f408 	mul.w	r4, r9, r8
  4065de:	42ac      	cmp	r4, r5
  4065e0:	fa02 f201 	lsl.w	r2, r2, r1
  4065e4:	fa00 fa01 	lsl.w	sl, r0, r1
  4065e8:	d908      	bls.n	4065fc <__udivmoddi4+0x244>
  4065ea:	18ed      	adds	r5, r5, r3
  4065ec:	f109 30ff 	add.w	r0, r9, #4294967295
  4065f0:	d243      	bcs.n	40667a <__udivmoddi4+0x2c2>
  4065f2:	42ac      	cmp	r4, r5
  4065f4:	d941      	bls.n	40667a <__udivmoddi4+0x2c2>
  4065f6:	f1a9 0902 	sub.w	r9, r9, #2
  4065fa:	441d      	add	r5, r3
  4065fc:	1b2d      	subs	r5, r5, r4
  4065fe:	fa1f fe8e 	uxth.w	lr, lr
  406602:	fbb5 f0fc 	udiv	r0, r5, ip
  406606:	fb0c 5510 	mls	r5, ip, r0, r5
  40660a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40660e:	fb00 f808 	mul.w	r8, r0, r8
  406612:	45a0      	cmp	r8, r4
  406614:	d907      	bls.n	406626 <__udivmoddi4+0x26e>
  406616:	18e4      	adds	r4, r4, r3
  406618:	f100 35ff 	add.w	r5, r0, #4294967295
  40661c:	d229      	bcs.n	406672 <__udivmoddi4+0x2ba>
  40661e:	45a0      	cmp	r8, r4
  406620:	d927      	bls.n	406672 <__udivmoddi4+0x2ba>
  406622:	3802      	subs	r0, #2
  406624:	441c      	add	r4, r3
  406626:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40662a:	eba4 0408 	sub.w	r4, r4, r8
  40662e:	fba0 8902 	umull	r8, r9, r0, r2
  406632:	454c      	cmp	r4, r9
  406634:	46c6      	mov	lr, r8
  406636:	464d      	mov	r5, r9
  406638:	d315      	bcc.n	406666 <__udivmoddi4+0x2ae>
  40663a:	d012      	beq.n	406662 <__udivmoddi4+0x2aa>
  40663c:	b156      	cbz	r6, 406654 <__udivmoddi4+0x29c>
  40663e:	ebba 030e 	subs.w	r3, sl, lr
  406642:	eb64 0405 	sbc.w	r4, r4, r5
  406646:	fa04 f707 	lsl.w	r7, r4, r7
  40664a:	40cb      	lsrs	r3, r1
  40664c:	431f      	orrs	r7, r3
  40664e:	40cc      	lsrs	r4, r1
  406650:	6037      	str	r7, [r6, #0]
  406652:	6074      	str	r4, [r6, #4]
  406654:	2100      	movs	r1, #0
  406656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40665a:	4618      	mov	r0, r3
  40665c:	e6f8      	b.n	406450 <__udivmoddi4+0x98>
  40665e:	4690      	mov	r8, r2
  406660:	e6e0      	b.n	406424 <__udivmoddi4+0x6c>
  406662:	45c2      	cmp	sl, r8
  406664:	d2ea      	bcs.n	40663c <__udivmoddi4+0x284>
  406666:	ebb8 0e02 	subs.w	lr, r8, r2
  40666a:	eb69 0503 	sbc.w	r5, r9, r3
  40666e:	3801      	subs	r0, #1
  406670:	e7e4      	b.n	40663c <__udivmoddi4+0x284>
  406672:	4628      	mov	r0, r5
  406674:	e7d7      	b.n	406626 <__udivmoddi4+0x26e>
  406676:	4640      	mov	r0, r8
  406678:	e791      	b.n	40659e <__udivmoddi4+0x1e6>
  40667a:	4681      	mov	r9, r0
  40667c:	e7be      	b.n	4065fc <__udivmoddi4+0x244>
  40667e:	4601      	mov	r1, r0
  406680:	e778      	b.n	406574 <__udivmoddi4+0x1bc>
  406682:	3802      	subs	r0, #2
  406684:	443c      	add	r4, r7
  406686:	e745      	b.n	406514 <__udivmoddi4+0x15c>
  406688:	4608      	mov	r0, r1
  40668a:	e708      	b.n	40649e <__udivmoddi4+0xe6>
  40668c:	f1a8 0802 	sub.w	r8, r8, #2
  406690:	443d      	add	r5, r7
  406692:	e72b      	b.n	4064ec <__udivmoddi4+0x134>

00406694 <__aeabi_idiv0>:
  406694:	4770      	bx	lr
  406696:	bf00      	nop
  406698:	454c4449 	.word	0x454c4449
  40669c:	00000000 	.word	0x00000000
  4066a0:	51726d54 	.word	0x51726d54
  4066a4:	00000000 	.word	0x00000000
  4066a8:	20726d54 	.word	0x20726d54
  4066ac:	00637653 	.word	0x00637653
  4066b0:	46202d2d 	.word	0x46202d2d
  4066b4:	72656572 	.word	0x72656572
  4066b8:	20736f74 	.word	0x20736f74
  4066bc:	6d617845 	.word	0x6d617845
  4066c0:	20656c70 	.word	0x20656c70
  4066c4:	0d0a2d2d 	.word	0x0d0a2d2d
  4066c8:	00000000 	.word	0x00000000
  4066cc:	454d4153 	.word	0x454d4153
  4066d0:	582d3037 	.word	0x582d3037
  4066d4:	00444c50 	.word	0x00444c50
  4066d8:	25202d2d 	.word	0x25202d2d
  4066dc:	000d0a73 	.word	0x000d0a73
  4066e0:	303a3032 	.word	0x303a3032
  4066e4:	33313a30 	.word	0x33313a30
  4066e8:	00000000 	.word	0x00000000
  4066ec:	20766f4e 	.word	0x20766f4e
  4066f0:	32203631 	.word	0x32203631
  4066f4:	00303230 	.word	0x00303230
  4066f8:	43202d2d 	.word	0x43202d2d
  4066fc:	69706d6f 	.word	0x69706d6f
  406700:	3a64656c 	.word	0x3a64656c
  406704:	20732520 	.word	0x20732520
  406708:	2d207325 	.word	0x2d207325
  40670c:	000d0a2d 	.word	0x000d0a2d
  406710:	0064654c 	.word	0x0064654c
  406714:	6c696146 	.word	0x6c696146
  406718:	74206465 	.word	0x74206465
  40671c:	7263206f 	.word	0x7263206f
  406720:	65746165 	.word	0x65746165
  406724:	73657420 	.word	0x73657420
  406728:	656c2074 	.word	0x656c2074
  40672c:	61742064 	.word	0x61742064
  406730:	0a0d6b73 	.word	0x0a0d6b73
  406734:	00000000 	.word	0x00000000
  406738:	444e4553 	.word	0x444e4553
  40673c:	00000000 	.word	0x00000000
  406740:	6c696146 	.word	0x6c696146
  406744:	74206465 	.word	0x74206465
  406748:	7263206f 	.word	0x7263206f
  40674c:	65746165 	.word	0x65746165
  406750:	4e455320 	.word	0x4e455320
  406754:	61742044 	.word	0x61742044
  406758:	0a0d6b73 	.word	0x0a0d6b73
  40675c:	00000000 	.word	0x00000000
  406760:	00434441 	.word	0x00434441
  406764:	6c696146 	.word	0x6c696146
  406768:	74206465 	.word	0x74206465
  40676c:	7263206f 	.word	0x7263206f
  406770:	65746165 	.word	0x65746165
  406774:	43444120 	.word	0x43444120
  406778:	73617420 	.word	0x73617420
  40677c:	000a0d6b 	.word	0x000a0d6b
  406780:	50534552 	.word	0x50534552
  406784:	45534e4f 	.word	0x45534e4f
  406788:	00000000 	.word	0x00000000
  40678c:	6c696146 	.word	0x6c696146
  406790:	74206465 	.word	0x74206465
  406794:	7263206f 	.word	0x7263206f
  406798:	65746165 	.word	0x65746165
  40679c:	53455220 	.word	0x53455220
  4067a0:	534e4f50 	.word	0x534e4f50
  4067a4:	61742045 	.word	0x61742045
  4067a8:	0a0d6b73 	.word	0x0a0d6b73
  4067ac:	00000000 	.word	0x00000000
  4067b0:	686c6166 	.word	0x686c6166
  4067b4:	6d652061 	.word	0x6d652061
  4067b8:	69726320 	.word	0x69726320
  4067bc:	6f207261 	.word	0x6f207261
  4067c0:	6d657320 	.word	0x6d657320
  4067c4:	726f6661 	.word	0x726f6661
  4067c8:	000a206f 	.word	0x000a206f
  4067cc:	5f636461 	.word	0x5f636461
  4067d0:	3a746162 	.word	0x3a746162
  4067d4:	0a642520 	.word	0x0a642520
  4067d8:	00000000 	.word	0x00000000
  4067dc:	63617473 	.word	0x63617473
  4067e0:	766f206b 	.word	0x766f206b
  4067e4:	6c667265 	.word	0x6c667265
  4067e8:	2520776f 	.word	0x2520776f
  4067ec:	73252078 	.word	0x73252078
  4067f0:	00000a0d 	.word	0x00000a0d

004067f4 <_global_impure_ptr>:
  4067f4:	20400010 33323130 37363534 42413938     ..@ 0123456789AB
  406804:	46454443 00000000 33323130 37363534     CDEF....01234567
  406814:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  406824:	0000296c                                l)..

00406828 <blanks.7217>:
  406828:	20202020 20202020 20202020 20202020                     

00406838 <zeroes.7218>:
  406838:	30303030 30303030 30303030 30303030     0000000000000000
  406848:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00406858 <_ctype_>:
  406858:	20202000 20202020 28282020 20282828     .         ((((( 
  406868:	20202020 20202020 20202020 20202020                     
  406878:	10108820 10101010 10101010 10101010      ...............
  406888:	04040410 04040404 10040404 10101010     ................
  406898:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4068a8:	01010101 01010101 01010101 10101010     ................
  4068b8:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4068c8:	02020202 02020202 02020202 10101010     ................
  4068d8:	00000020 00000000 00000000 00000000      ...............
	...

0040695c <_init>:
  40695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40695e:	bf00      	nop
  406960:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406962:	bc08      	pop	{r3}
  406964:	469e      	mov	lr, r3
  406966:	4770      	bx	lr

00406968 <__init_array_start>:
  406968:	00404ff9 	.word	0x00404ff9

0040696c <__frame_dummy_init_array_entry>:
  40696c:	0040018d                                ..@.

00406970 <_fini>:
  406970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406972:	bf00      	nop
  406974:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406976:	bc08      	pop	{r3}
  406978:	469e      	mov	lr, r3
  40697a:	4770      	bx	lr

0040697c <__fini_array_start>:
  40697c:	00400169 	.word	0x00400169
